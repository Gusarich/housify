// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Grammar should fail 1 1`] = `"Cannot assign 'int' to 'bool'"`;

exports[`Grammar should parse 1 1`] = `
{
  "id": 24,
  "items": [
    {
      "id": 23,
      "items": [
        {
          "defaultValue": {
            "id": 4,
            "kind": "integerLiteral",
            "value": "10",
          },
          "id": 5,
          "kind": "globalStat",
          "name": {
            "id": 2,
            "kind": "id",
            "name": "x",
          },
          "type": {
            "id": 3,
            "kind": "id",
            "name": "int",
          },
        },
        {
          "event": {
            "id": 6,
            "kind": "id",
            "name": "BlockBreak",
          },
          "id": 22,
          "kind": "handler",
          "statements": [
            {
              "id": 12,
              "kind": "statementAssign",
              "lvalue": {
                "field": {
                  "id": 9,
                  "kind": "id",
                  "name": "x",
                },
                "id": 10,
                "kind": "expressionField",
                "struct": {
                  "id": 8,
                  "kind": "expressionId",
                  "name": {
                    "id": 7,
                    "kind": "id",
                    "name": "global",
                  },
                },
              },
              "value": {
                "id": 11,
                "kind": "integerLiteral",
                "value": "123",
              },
            },
            {
              "id": 21,
              "kind": "statementLet",
              "name": {
                "id": 13,
                "kind": "id",
                "name": "y",
              },
              "type": {
                "id": 14,
                "kind": "id",
                "name": "int",
              },
              "value": {
                "id": 20,
                "kind": "expressionBinary",
                "left": {
                  "field": {
                    "id": 17,
                    "kind": "id",
                    "name": "x",
                  },
                  "id": 18,
                  "kind": "expressionField",
                  "struct": {
                    "id": 16,
                    "kind": "expressionId",
                    "name": {
                      "id": 15,
                      "kind": "id",
                      "name": "global",
                    },
                  },
                },
                "op": "+",
                "right": {
                  "id": 19,
                  "kind": "integerLiteral",
                  "value": "1",
                },
              },
            },
          ],
        },
      ],
      "kind": "house",
      "name": {
        "id": 1,
        "kind": "id",
        "name": "MyHouse",
      },
    },
  ],
  "kind": "module",
}
`;

exports[`Grammar should parse 1 2`] = `
CompilerContext {
  "expressions": Map {
    4 => {
      "type": "int",
    },
    8 => {
      "fields": [
        {
          "name": "x",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    10 => {
      "type": "int",
    },
    11 => {
      "type": "int",
    },
    16 => {
      "fields": [
        {
          "name": "x",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    18 => {
      "type": "int",
    },
    19 => {
      "type": "int",
    },
    20 => {
      "type": "int",
    },
  },
}
`;
