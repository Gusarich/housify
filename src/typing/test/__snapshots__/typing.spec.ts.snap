// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Typing should fail 1 1`] = `"Cannot assign 'int' to 'bool'"`;

exports[`Typing should fail 2 1`] = `"Cannot assign 'bool' to 'int'"`;

exports[`Typing should fail 3 1`] = `"Cannot assign 'int' to 'bool'"`;

exports[`Typing should fail 4 1`] = `"Variable 'x' not found"`;

exports[`Typing should fail 5 1`] = `"Variable 'x' already exists"`;

exports[`Typing should fail 6 1`] = `"Field 'nonExistentField' not found"`;

exports[`Typing should fail 7 1`] = `"Cannot assign 'bool' to 'int'"`;

exports[`Typing should fail 8 1`] = `"Cannot assign 'bool' to 'int'"`;

exports[`Typing should fail 9 1`] = `"Operands must be integers"`;

exports[`Typing should fail 10 1`] = `"Cannot assign 'bool' to 'int'"`;

exports[`Typing should fail 11 1`] = `"Cannot assign 'bool' to 'int'"`;

exports[`Typing should fail 12 1`] = `"Cannot assign 'bool' to 'int'"`;

exports[`Typing should fail 13 1`] = `"Cannot assign 'bool' to 'int'"`;

exports[`Typing should fail 14 1`] = `"Cannot assign 'bool' to 'int'"`;

exports[`Typing should fail 15 1`] = `"Cannot assign 'bool' to 'int'"`;

exports[`Typing should fail 16 1`] = `"Cannot assign 'bool' to 'int'"`;

exports[`Typing should fail 17 1`] = `"Cannot assign 'bool' to 'int'"`;

exports[`Typing should fail 18 1`] = `"Cannot assign 'bool' to 'int'"`;

exports[`Typing should fail 19 1`] = `"Cannot assign 'bool' to 'int'"`;

exports[`Typing should fail 20 1`] = `"Cannot assign 'int' to 'bool'"`;

exports[`Typing should parse 1 1`] = `
{
  "id": 24,
  "items": [
    {
      "id": 23,
      "items": [
        {
          "defaultValue": {
            "id": 4,
            "kind": "integerLiteral",
            "value": "10",
          },
          "id": 5,
          "kind": "globalStat",
          "name": {
            "id": 2,
            "kind": "id",
            "name": "x",
          },
          "type": {
            "id": 3,
            "kind": "id",
            "name": "int",
          },
        },
        {
          "event": {
            "id": 6,
            "kind": "id",
            "name": "BlockBreak",
          },
          "id": 22,
          "kind": "handler",
          "statements": [
            {
              "id": 12,
              "kind": "statementAssign",
              "lvalue": {
                "field": {
                  "id": 9,
                  "kind": "id",
                  "name": "x",
                },
                "id": 10,
                "kind": "expressionField",
                "struct": {
                  "id": 8,
                  "kind": "expressionId",
                  "name": {
                    "id": 7,
                    "kind": "id",
                    "name": "global",
                  },
                },
              },
              "value": {
                "id": 11,
                "kind": "integerLiteral",
                "value": "123",
              },
            },
            {
              "id": 21,
              "kind": "statementLet",
              "name": {
                "id": 13,
                "kind": "id",
                "name": "y",
              },
              "type": {
                "id": 14,
                "kind": "id",
                "name": "int",
              },
              "value": {
                "id": 20,
                "kind": "expressionBinary",
                "left": {
                  "field": {
                    "id": 17,
                    "kind": "id",
                    "name": "x",
                  },
                  "id": 18,
                  "kind": "expressionField",
                  "struct": {
                    "id": 16,
                    "kind": "expressionId",
                    "name": {
                      "id": 15,
                      "kind": "id",
                      "name": "global",
                    },
                  },
                },
                "op": "+",
                "right": {
                  "id": 19,
                  "kind": "integerLiteral",
                  "value": "1",
                },
              },
            },
          ],
        },
      ],
      "kind": "house",
      "name": {
        "id": 1,
        "kind": "id",
        "name": "MyHouse",
      },
    },
  ],
  "kind": "module",
}
`;

exports[`Typing should parse 1 2`] = `
CompilerContext {
  "expressions": Map {
    4 => {
      "type": "int",
    },
    8 => {
      "fields": [
        {
          "name": "x",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    10 => {
      "type": "int",
    },
    11 => {
      "type": "int",
    },
    16 => {
      "fields": [
        {
          "name": "x",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    18 => {
      "type": "int",
    },
    19 => {
      "type": "int",
    },
    20 => {
      "type": "int",
    },
  },
}
`;

exports[`Typing should parse 2 1`] = `
{
  "id": 20,
  "items": [
    {
      "id": 19,
      "items": [
        {
          "defaultValue": {
            "id": 4,
            "kind": "booleanLiteral",
            "value": true,
          },
          "id": 5,
          "kind": "globalStat",
          "name": {
            "id": 2,
            "kind": "id",
            "name": "isActive",
          },
          "type": {
            "id": 3,
            "kind": "id",
            "name": "bool",
          },
        },
        {
          "event": {
            "id": 6,
            "kind": "id",
            "name": "BlockBreak",
          },
          "id": 18,
          "kind": "handler",
          "statements": [
            {
              "condition": {
                "field": {
                  "id": 9,
                  "kind": "id",
                  "name": "isActive",
                },
                "id": 10,
                "kind": "expressionField",
                "struct": {
                  "id": 8,
                  "kind": "expressionId",
                  "name": {
                    "id": 7,
                    "kind": "id",
                    "name": "global",
                  },
                },
              },
              "id": 17,
              "kind": "statementIf",
              "then": [
                {
                  "id": 16,
                  "kind": "statementAssign",
                  "lvalue": {
                    "field": {
                      "id": 13,
                      "kind": "id",
                      "name": "isActive",
                    },
                    "id": 14,
                    "kind": "expressionField",
                    "struct": {
                      "id": 12,
                      "kind": "expressionId",
                      "name": {
                        "id": 11,
                        "kind": "id",
                        "name": "global",
                      },
                    },
                  },
                  "value": {
                    "id": 15,
                    "kind": "booleanLiteral",
                    "value": false,
                  },
                },
              ],
            },
          ],
        },
      ],
      "kind": "house",
      "name": {
        "id": 1,
        "kind": "id",
        "name": "MyHouse",
      },
    },
  ],
  "kind": "module",
}
`;

exports[`Typing should parse 2 2`] = `
CompilerContext {
  "expressions": Map {
    4 => {
      "type": "bool",
    },
    8 => {
      "fields": [
        {
          "name": "isActive",
          "type": {
            "type": "bool",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    10 => {
      "type": "bool",
    },
    12 => {
      "fields": [
        {
          "name": "isActive",
          "type": {
            "type": "bool",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    14 => {
      "type": "bool",
    },
    15 => {
      "type": "bool",
    },
  },
}
`;

exports[`Typing should parse 3 1`] = `
{
  "id": 20,
  "items": [
    {
      "id": 19,
      "items": [
        {
          "defaultValue": {
            "id": 4,
            "kind": "integerLiteral",
            "value": "100",
          },
          "id": 5,
          "kind": "playerStat",
          "name": {
            "id": 2,
            "kind": "id",
            "name": "score",
          },
          "type": {
            "id": 3,
            "kind": "id",
            "name": "int",
          },
        },
        {
          "event": {
            "id": 6,
            "kind": "id",
            "name": "BlockBreak",
          },
          "id": 18,
          "kind": "handler",
          "statements": [
            {
              "id": 17,
              "kind": "statementAssign",
              "lvalue": {
                "field": {
                  "id": 9,
                  "kind": "id",
                  "name": "score",
                },
                "id": 10,
                "kind": "expressionField",
                "struct": {
                  "id": 8,
                  "kind": "expressionId",
                  "name": {
                    "id": 7,
                    "kind": "id",
                    "name": "player",
                  },
                },
              },
              "value": {
                "id": 16,
                "kind": "expressionBinary",
                "left": {
                  "field": {
                    "id": 13,
                    "kind": "id",
                    "name": "score",
                  },
                  "id": 14,
                  "kind": "expressionField",
                  "struct": {
                    "id": 12,
                    "kind": "expressionId",
                    "name": {
                      "id": 11,
                      "kind": "id",
                      "name": "player",
                    },
                  },
                },
                "op": "+",
                "right": {
                  "id": 15,
                  "kind": "integerLiteral",
                  "value": "10",
                },
              },
            },
          ],
        },
      ],
      "kind": "house",
      "name": {
        "id": 1,
        "kind": "id",
        "name": "MyHouse",
      },
    },
  ],
  "kind": "module",
}
`;

exports[`Typing should parse 3 2`] = `
CompilerContext {
  "expressions": Map {
    4 => {
      "type": "int",
    },
    8 => {
      "fields": [
        {
          "name": "score",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "player",
      "type": "struct",
    },
    10 => {
      "type": "int",
    },
    12 => {
      "fields": [
        {
          "name": "score",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "player",
      "type": "struct",
    },
    14 => {
      "type": "int",
    },
    15 => {
      "type": "int",
    },
    16 => {
      "type": "int",
    },
  },
}
`;

exports[`Typing should parse 4 1`] = `
{
  "id": 20,
  "items": [
    {
      "id": 19,
      "items": [
        {
          "defaultValue": {
            "id": 4,
            "kind": "booleanLiteral",
            "value": true,
          },
          "id": 5,
          "kind": "globalStat",
          "name": {
            "id": 2,
            "kind": "id",
            "name": "isActive",
          },
          "type": {
            "id": 3,
            "kind": "id",
            "name": "bool",
          },
        },
        {
          "event": {
            "id": 6,
            "kind": "id",
            "name": "BlockBreak",
          },
          "id": 18,
          "kind": "handler",
          "statements": [
            {
              "condition": {
                "field": {
                  "id": 9,
                  "kind": "id",
                  "name": "isActive",
                },
                "id": 10,
                "kind": "expressionField",
                "struct": {
                  "id": 8,
                  "kind": "expressionId",
                  "name": {
                    "id": 7,
                    "kind": "id",
                    "name": "global",
                  },
                },
              },
              "id": 17,
              "kind": "statementIf",
              "then": [
                {
                  "id": 16,
                  "kind": "statementAssign",
                  "lvalue": {
                    "field": {
                      "id": 13,
                      "kind": "id",
                      "name": "isActive",
                    },
                    "id": 14,
                    "kind": "expressionField",
                    "struct": {
                      "id": 12,
                      "kind": "expressionId",
                      "name": {
                        "id": 11,
                        "kind": "id",
                        "name": "global",
                      },
                    },
                  },
                  "value": {
                    "id": 15,
                    "kind": "booleanLiteral",
                    "value": false,
                  },
                },
              ],
            },
          ],
        },
      ],
      "kind": "house",
      "name": {
        "id": 1,
        "kind": "id",
        "name": "MyHouse",
      },
    },
  ],
  "kind": "module",
}
`;

exports[`Typing should parse 4 2`] = `
CompilerContext {
  "expressions": Map {
    4 => {
      "type": "bool",
    },
    8 => {
      "fields": [
        {
          "name": "isActive",
          "type": {
            "type": "bool",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    10 => {
      "type": "bool",
    },
    12 => {
      "fields": [
        {
          "name": "isActive",
          "type": {
            "type": "bool",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    14 => {
      "type": "bool",
    },
    15 => {
      "type": "bool",
    },
  },
}
`;

exports[`Typing should parse 5 1`] = `
{
  "id": 22,
  "items": [
    {
      "id": 21,
      "items": [
        {
          "event": {
            "id": 2,
            "kind": "id",
            "name": "BlockBreak",
          },
          "id": 20,
          "kind": "handler",
          "statements": [
            {
              "id": 6,
              "kind": "statementLet",
              "name": {
                "id": 3,
                "kind": "id",
                "name": "x",
              },
              "type": {
                "id": 4,
                "kind": "id",
                "name": "int",
              },
              "value": {
                "id": 5,
                "kind": "integerLiteral",
                "value": "5",
              },
            },
            {
              "condition": {
                "id": 10,
                "kind": "expressionBinary",
                "left": {
                  "id": 8,
                  "kind": "expressionId",
                  "name": {
                    "id": 7,
                    "kind": "id",
                    "name": "x",
                  },
                },
                "op": "==",
                "right": {
                  "id": 9,
                  "kind": "integerLiteral",
                  "value": "5",
                },
              },
              "else": [
                {
                  "id": 18,
                  "kind": "statementLet",
                  "name": {
                    "id": 15,
                    "kind": "id",
                    "name": "y",
                  },
                  "type": {
                    "id": 16,
                    "kind": "id",
                    "name": "int",
                  },
                  "value": {
                    "id": 17,
                    "kind": "integerLiteral",
                    "value": "20",
                  },
                },
              ],
              "id": 19,
              "kind": "statementIf",
              "then": [
                {
                  "id": 14,
                  "kind": "statementLet",
                  "name": {
                    "id": 11,
                    "kind": "id",
                    "name": "y",
                  },
                  "type": {
                    "id": 12,
                    "kind": "id",
                    "name": "int",
                  },
                  "value": {
                    "id": 13,
                    "kind": "integerLiteral",
                    "value": "10",
                  },
                },
              ],
            },
          ],
        },
      ],
      "kind": "house",
      "name": {
        "id": 1,
        "kind": "id",
        "name": "MyHouse",
      },
    },
  ],
  "kind": "module",
}
`;

exports[`Typing should parse 5 2`] = `
CompilerContext {
  "expressions": Map {
    5 => {
      "type": "int",
    },
    8 => {
      "type": "int",
    },
    9 => {
      "type": "int",
    },
    10 => {
      "type": "bool",
    },
    13 => {
      "type": "int",
    },
    17 => {
      "type": "int",
    },
  },
}
`;

exports[`Typing should parse 6 1`] = `
{
  "id": 31,
  "items": [
    {
      "id": 30,
      "items": [
        {
          "event": {
            "id": 2,
            "kind": "id",
            "name": "BlockBreak",
          },
          "id": 29,
          "kind": "handler",
          "statements": [
            {
              "id": 6,
              "kind": "statementLet",
              "name": {
                "id": 3,
                "kind": "id",
                "name": "x",
              },
              "type": {
                "id": 4,
                "kind": "id",
                "name": "int",
              },
              "value": {
                "id": 5,
                "kind": "integerLiteral",
                "value": "10",
              },
            },
            {
              "condition": {
                "id": 10,
                "kind": "expressionBinary",
                "left": {
                  "id": 8,
                  "kind": "expressionId",
                  "name": {
                    "id": 7,
                    "kind": "id",
                    "name": "x",
                  },
                },
                "op": "==",
                "right": {
                  "id": 9,
                  "kind": "integerLiteral",
                  "value": "5",
                },
              },
              "else": [
                {
                  "condition": {
                    "id": 18,
                    "kind": "expressionBinary",
                    "left": {
                      "id": 16,
                      "kind": "expressionId",
                      "name": {
                        "id": 15,
                        "kind": "id",
                        "name": "x",
                      },
                    },
                    "op": "==",
                    "right": {
                      "id": 17,
                      "kind": "integerLiteral",
                      "value": "10",
                    },
                  },
                  "else": [
                    {
                      "id": 26,
                      "kind": "statementLet",
                      "name": {
                        "id": 23,
                        "kind": "id",
                        "name": "y",
                      },
                      "type": {
                        "id": 24,
                        "kind": "id",
                        "name": "int",
                      },
                      "value": {
                        "id": 25,
                        "kind": "integerLiteral",
                        "value": "30",
                      },
                    },
                  ],
                  "id": 27,
                  "kind": "statementIf",
                  "then": [
                    {
                      "id": 22,
                      "kind": "statementLet",
                      "name": {
                        "id": 19,
                        "kind": "id",
                        "name": "y",
                      },
                      "type": {
                        "id": 20,
                        "kind": "id",
                        "name": "int",
                      },
                      "value": {
                        "id": 21,
                        "kind": "integerLiteral",
                        "value": "20",
                      },
                    },
                  ],
                },
              ],
              "id": 28,
              "kind": "statementIf",
              "then": [
                {
                  "id": 14,
                  "kind": "statementLet",
                  "name": {
                    "id": 11,
                    "kind": "id",
                    "name": "y",
                  },
                  "type": {
                    "id": 12,
                    "kind": "id",
                    "name": "int",
                  },
                  "value": {
                    "id": 13,
                    "kind": "integerLiteral",
                    "value": "10",
                  },
                },
              ],
            },
          ],
        },
      ],
      "kind": "house",
      "name": {
        "id": 1,
        "kind": "id",
        "name": "MyHouse",
      },
    },
  ],
  "kind": "module",
}
`;

exports[`Typing should parse 6 2`] = `
CompilerContext {
  "expressions": Map {
    5 => {
      "type": "int",
    },
    8 => {
      "type": "int",
    },
    9 => {
      "type": "int",
    },
    10 => {
      "type": "bool",
    },
    13 => {
      "type": "int",
    },
    16 => {
      "type": "int",
    },
    17 => {
      "type": "int",
    },
    18 => {
      "type": "bool",
    },
    21 => {
      "type": "int",
    },
    25 => {
      "type": "int",
    },
  },
}
`;

exports[`Typing should parse 7 1`] = `
{
  "id": 9,
  "items": [
    {
      "id": 8,
      "items": [
        {
          "event": {
            "id": 2,
            "kind": "id",
            "name": "BlockBreak",
          },
          "id": 7,
          "kind": "handler",
          "statements": [
            {
              "id": 6,
              "kind": "statementLet",
              "name": {
                "id": 3,
                "kind": "id",
                "name": "x",
              },
              "type": {
                "id": 4,
                "kind": "id",
                "name": "int",
              },
              "value": {
                "id": 5,
                "kind": "integerLiteral",
                "value": "5",
              },
            },
          ],
        },
      ],
      "kind": "house",
      "name": {
        "id": 1,
        "kind": "id",
        "name": "MyHouse",
      },
    },
  ],
  "kind": "module",
}
`;

exports[`Typing should parse 7 2`] = `
CompilerContext {
  "expressions": Map {
    5 => {
      "type": "int",
    },
  },
}
`;

exports[`Typing should parse 8 1`] = `
{
  "id": 15,
  "items": [
    {
      "id": 14,
      "items": [
        {
          "defaultValue": {
            "id": 4,
            "kind": "integerLiteral",
            "value": "10",
          },
          "id": 5,
          "kind": "globalStat",
          "name": {
            "id": 2,
            "kind": "id",
            "name": "x",
          },
          "type": {
            "id": 3,
            "kind": "id",
            "name": "int",
          },
        },
        {
          "event": {
            "id": 6,
            "kind": "id",
            "name": "BlockBreak",
          },
          "id": 13,
          "kind": "handler",
          "statements": [
            {
              "id": 12,
              "kind": "statementAssign",
              "lvalue": {
                "field": {
                  "id": 9,
                  "kind": "id",
                  "name": "x",
                },
                "id": 10,
                "kind": "expressionField",
                "struct": {
                  "id": 8,
                  "kind": "expressionId",
                  "name": {
                    "id": 7,
                    "kind": "id",
                    "name": "global",
                  },
                },
              },
              "value": {
                "id": 11,
                "kind": "integerLiteral",
                "value": "42",
              },
            },
          ],
        },
      ],
      "kind": "house",
      "name": {
        "id": 1,
        "kind": "id",
        "name": "MyHouse",
      },
    },
  ],
  "kind": "module",
}
`;

exports[`Typing should parse 8 2`] = `
CompilerContext {
  "expressions": Map {
    4 => {
      "type": "int",
    },
    8 => {
      "fields": [
        {
          "name": "x",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    10 => {
      "type": "int",
    },
    11 => {
      "type": "int",
    },
  },
}
`;

exports[`Typing should parse 9 1`] = `
{
  "id": 24,
  "items": [
    {
      "id": 23,
      "items": [
        {
          "event": {
            "id": 2,
            "kind": "id",
            "name": "BlockBreak",
          },
          "id": 22,
          "kind": "handler",
          "statements": [
            {
              "id": 6,
              "kind": "statementLet",
              "name": {
                "id": 3,
                "kind": "id",
                "name": "y",
              },
              "type": {
                "id": 4,
                "kind": "id",
                "name": "int",
              },
              "value": {
                "id": 5,
                "kind": "integerLiteral",
                "value": "10",
              },
            },
            {
              "id": 13,
              "kind": "statementLet",
              "name": {
                "id": 7,
                "kind": "id",
                "name": "z",
              },
              "type": {
                "id": 8,
                "kind": "id",
                "name": "int",
              },
              "value": {
                "id": 12,
                "kind": "expressionBinary",
                "left": {
                  "id": 10,
                  "kind": "expressionId",
                  "name": {
                    "id": 9,
                    "kind": "id",
                    "name": "y",
                  },
                },
                "op": "+",
                "right": {
                  "id": 11,
                  "kind": "integerLiteral",
                  "value": "10",
                },
              },
            },
            {
              "id": 21,
              "kind": "statementLet",
              "name": {
                "id": 14,
                "kind": "id",
                "name": "x",
              },
              "type": {
                "id": 15,
                "kind": "id",
                "name": "int",
              },
              "value": {
                "id": 20,
                "kind": "expressionBinary",
                "left": {
                  "id": 17,
                  "kind": "expressionId",
                  "name": {
                    "id": 16,
                    "kind": "id",
                    "name": "y",
                  },
                },
                "op": "+",
                "right": {
                  "id": 19,
                  "kind": "expressionId",
                  "name": {
                    "id": 18,
                    "kind": "id",
                    "name": "z",
                  },
                },
              },
            },
          ],
        },
      ],
      "kind": "house",
      "name": {
        "id": 1,
        "kind": "id",
        "name": "MyHouse",
      },
    },
  ],
  "kind": "module",
}
`;

exports[`Typing should parse 9 2`] = `
CompilerContext {
  "expressions": Map {
    5 => {
      "type": "int",
    },
    10 => {
      "type": "int",
    },
    11 => {
      "type": "int",
    },
    12 => {
      "type": "int",
    },
    17 => {
      "type": "int",
    },
    19 => {
      "type": "int",
    },
    20 => {
      "type": "int",
    },
  },
}
`;

exports[`Typing should parse 10 1`] = `
{
  "id": 15,
  "items": [
    {
      "id": 14,
      "items": [
        {
          "event": {
            "id": 2,
            "kind": "id",
            "name": "BlockBreak",
          },
          "id": 13,
          "kind": "handler",
          "statements": [
            {
              "id": 6,
              "kind": "statementLet",
              "name": {
                "id": 3,
                "kind": "id",
                "name": "y",
              },
              "type": {
                "id": 4,
                "kind": "id",
                "name": "int",
              },
              "value": {
                "id": 5,
                "kind": "integerLiteral",
                "value": "10",
              },
            },
            {
              "id": 12,
              "kind": "statementLet",
              "name": {
                "id": 7,
                "kind": "id",
                "name": "x",
              },
              "type": {
                "id": 8,
                "kind": "id",
                "name": "int",
              },
              "value": {
                "id": 11,
                "kind": "expressionUnary",
                "op": "-",
                "operand": {
                  "id": 10,
                  "kind": "expressionId",
                  "name": {
                    "id": 9,
                    "kind": "id",
                    "name": "y",
                  },
                },
              },
            },
          ],
        },
      ],
      "kind": "house",
      "name": {
        "id": 1,
        "kind": "id",
        "name": "MyHouse",
      },
    },
  ],
  "kind": "module",
}
`;

exports[`Typing should parse 10 2`] = `
CompilerContext {
  "expressions": Map {
    5 => {
      "type": "int",
    },
    10 => {
      "type": "int",
    },
    11 => {
      "type": "int",
    },
  },
}
`;

exports[`Typing should parse 11 1`] = `
{
  "id": 25,
  "items": [
    {
      "id": 24,
      "items": [
        {
          "defaultValue": {
            "id": 4,
            "kind": "integerLiteral",
            "value": "10",
          },
          "id": 5,
          "kind": "globalStat",
          "name": {
            "id": 2,
            "kind": "id",
            "name": "x",
          },
          "type": {
            "id": 3,
            "kind": "id",
            "name": "int",
          },
        },
        {
          "defaultValue": {
            "id": 8,
            "kind": "integerLiteral",
            "value": "20",
          },
          "id": 9,
          "kind": "globalStat",
          "name": {
            "id": 6,
            "kind": "id",
            "name": "y",
          },
          "type": {
            "id": 7,
            "kind": "id",
            "name": "int",
          },
        },
        {
          "event": {
            "id": 10,
            "kind": "id",
            "name": "BlockBreak",
          },
          "id": 23,
          "kind": "handler",
          "statements": [
            {
              "id": 22,
              "kind": "statementLet",
              "name": {
                "id": 11,
                "kind": "id",
                "name": "z",
              },
              "type": {
                "id": 12,
                "kind": "id",
                "name": "int",
              },
              "value": {
                "id": 21,
                "kind": "expressionBinary",
                "left": {
                  "field": {
                    "id": 15,
                    "kind": "id",
                    "name": "x",
                  },
                  "id": 16,
                  "kind": "expressionField",
                  "struct": {
                    "id": 14,
                    "kind": "expressionId",
                    "name": {
                      "id": 13,
                      "kind": "id",
                      "name": "global",
                    },
                  },
                },
                "op": "+",
                "right": {
                  "field": {
                    "id": 19,
                    "kind": "id",
                    "name": "y",
                  },
                  "id": 20,
                  "kind": "expressionField",
                  "struct": {
                    "id": 18,
                    "kind": "expressionId",
                    "name": {
                      "id": 17,
                      "kind": "id",
                      "name": "global",
                    },
                  },
                },
              },
            },
          ],
        },
      ],
      "kind": "house",
      "name": {
        "id": 1,
        "kind": "id",
        "name": "MyHouse",
      },
    },
  ],
  "kind": "module",
}
`;

exports[`Typing should parse 11 2`] = `
CompilerContext {
  "expressions": Map {
    4 => {
      "type": "int",
    },
    8 => {
      "type": "int",
    },
    14 => {
      "fields": [
        {
          "name": "x",
          "type": {
            "type": "int",
          },
        },
        {
          "name": "y",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    16 => {
      "type": "int",
    },
    18 => {
      "fields": [
        {
          "name": "x",
          "type": {
            "type": "int",
          },
        },
        {
          "name": "y",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    20 => {
      "type": "int",
    },
    21 => {
      "type": "int",
    },
  },
}
`;

exports[`Typing should parse 12 1`] = `
{
  "id": 25,
  "items": [
    {
      "id": 24,
      "items": [
        {
          "defaultValue": {
            "id": 4,
            "kind": "integerLiteral",
            "value": "10",
          },
          "id": 5,
          "kind": "globalStat",
          "name": {
            "id": 2,
            "kind": "id",
            "name": "x",
          },
          "type": {
            "id": 3,
            "kind": "id",
            "name": "int",
          },
        },
        {
          "defaultValue": {
            "id": 8,
            "kind": "integerLiteral",
            "value": "20",
          },
          "id": 9,
          "kind": "globalStat",
          "name": {
            "id": 6,
            "kind": "id",
            "name": "y",
          },
          "type": {
            "id": 7,
            "kind": "id",
            "name": "int",
          },
        },
        {
          "event": {
            "id": 10,
            "kind": "id",
            "name": "BlockBreak",
          },
          "id": 23,
          "kind": "handler",
          "statements": [
            {
              "id": 22,
              "kind": "statementLet",
              "name": {
                "id": 11,
                "kind": "id",
                "name": "z",
              },
              "type": {
                "id": 12,
                "kind": "id",
                "name": "int",
              },
              "value": {
                "id": 21,
                "kind": "expressionBinary",
                "left": {
                  "field": {
                    "id": 15,
                    "kind": "id",
                    "name": "x",
                  },
                  "id": 16,
                  "kind": "expressionField",
                  "struct": {
                    "id": 14,
                    "kind": "expressionId",
                    "name": {
                      "id": 13,
                      "kind": "id",
                      "name": "global",
                    },
                  },
                },
                "op": "+",
                "right": {
                  "field": {
                    "id": 19,
                    "kind": "id",
                    "name": "y",
                  },
                  "id": 20,
                  "kind": "expressionField",
                  "struct": {
                    "id": 18,
                    "kind": "expressionId",
                    "name": {
                      "id": 17,
                      "kind": "id",
                      "name": "global",
                    },
                  },
                },
              },
            },
          ],
        },
      ],
      "kind": "house",
      "name": {
        "id": 1,
        "kind": "id",
        "name": "MyHouse",
      },
    },
  ],
  "kind": "module",
}
`;

exports[`Typing should parse 12 2`] = `
CompilerContext {
  "expressions": Map {
    4 => {
      "type": "int",
    },
    8 => {
      "type": "int",
    },
    14 => {
      "fields": [
        {
          "name": "x",
          "type": {
            "type": "int",
          },
        },
        {
          "name": "y",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    16 => {
      "type": "int",
    },
    18 => {
      "fields": [
        {
          "name": "x",
          "type": {
            "type": "int",
          },
        },
        {
          "name": "y",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    20 => {
      "type": "int",
    },
    21 => {
      "type": "int",
    },
  },
}
`;

exports[`Typing should parse 13 1`] = `
{
  "id": 15,
  "items": [
    {
      "id": 14,
      "items": [
        {
          "defaultValue": {
            "id": 4,
            "kind": "integerLiteral",
            "value": "10",
          },
          "id": 5,
          "kind": "globalStat",
          "name": {
            "id": 2,
            "kind": "id",
            "name": "x",
          },
          "type": {
            "id": 3,
            "kind": "id",
            "name": "int",
          },
        },
        {
          "event": {
            "id": 6,
            "kind": "id",
            "name": "BlockBreak",
          },
          "id": 13,
          "kind": "handler",
          "statements": [
            {
              "id": 12,
              "kind": "statementAssign",
              "lvalue": {
                "field": {
                  "id": 9,
                  "kind": "id",
                  "name": "x",
                },
                "id": 10,
                "kind": "expressionField",
                "struct": {
                  "id": 8,
                  "kind": "expressionId",
                  "name": {
                    "id": 7,
                    "kind": "id",
                    "name": "global",
                  },
                },
              },
              "value": {
                "id": 11,
                "kind": "integerLiteral",
                "value": "20",
              },
            },
          ],
        },
      ],
      "kind": "house",
      "name": {
        "id": 1,
        "kind": "id",
        "name": "MyHouse",
      },
    },
  ],
  "kind": "module",
}
`;

exports[`Typing should parse 13 2`] = `
CompilerContext {
  "expressions": Map {
    4 => {
      "type": "int",
    },
    8 => {
      "fields": [
        {
          "name": "x",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    10 => {
      "type": "int",
    },
    11 => {
      "type": "int",
    },
  },
}
`;

exports[`Typing should parse 14 1`] = `
{
  "id": 20,
  "items": [
    {
      "id": 19,
      "items": [
        {
          "defaultValue": {
            "id": 4,
            "kind": "integerLiteral",
            "value": "100",
          },
          "id": 5,
          "kind": "playerStat",
          "name": {
            "id": 2,
            "kind": "id",
            "name": "score",
          },
          "type": {
            "id": 3,
            "kind": "id",
            "name": "int",
          },
        },
        {
          "event": {
            "id": 6,
            "kind": "id",
            "name": "BlockBreak",
          },
          "id": 18,
          "kind": "handler",
          "statements": [
            {
              "id": 17,
              "kind": "statementAssign",
              "lvalue": {
                "field": {
                  "id": 9,
                  "kind": "id",
                  "name": "score",
                },
                "id": 10,
                "kind": "expressionField",
                "struct": {
                  "id": 8,
                  "kind": "expressionId",
                  "name": {
                    "id": 7,
                    "kind": "id",
                    "name": "player",
                  },
                },
              },
              "value": {
                "id": 16,
                "kind": "expressionBinary",
                "left": {
                  "field": {
                    "id": 13,
                    "kind": "id",
                    "name": "score",
                  },
                  "id": 14,
                  "kind": "expressionField",
                  "struct": {
                    "id": 12,
                    "kind": "expressionId",
                    "name": {
                      "id": 11,
                      "kind": "id",
                      "name": "player",
                    },
                  },
                },
                "op": "+",
                "right": {
                  "id": 15,
                  "kind": "integerLiteral",
                  "value": "10",
                },
              },
            },
          ],
        },
      ],
      "kind": "house",
      "name": {
        "id": 1,
        "kind": "id",
        "name": "MyHouse",
      },
    },
  ],
  "kind": "module",
}
`;

exports[`Typing should parse 14 2`] = `
CompilerContext {
  "expressions": Map {
    4 => {
      "type": "int",
    },
    8 => {
      "fields": [
        {
          "name": "score",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "player",
      "type": "struct",
    },
    10 => {
      "type": "int",
    },
    12 => {
      "fields": [
        {
          "name": "score",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "player",
      "type": "struct",
    },
    14 => {
      "type": "int",
    },
    15 => {
      "type": "int",
    },
    16 => {
      "type": "int",
    },
  },
}
`;

exports[`Typing should parse 15 1`] = `
{
  "id": 217,
  "items": [
    {
      "id": 216,
      "items": [
        {
          "defaultValue": {
            "id": 4,
            "kind": "integerLiteral",
            "value": "10",
          },
          "id": 5,
          "kind": "globalStat",
          "name": {
            "id": 2,
            "kind": "id",
            "name": "x",
          },
          "type": {
            "id": 3,
            "kind": "id",
            "name": "int",
          },
        },
        {
          "defaultValue": {
            "id": 8,
            "kind": "integerLiteral",
            "value": "20",
          },
          "id": 9,
          "kind": "globalStat",
          "name": {
            "id": 6,
            "kind": "id",
            "name": "y",
          },
          "type": {
            "id": 7,
            "kind": "id",
            "name": "int",
          },
        },
        {
          "defaultValue": {
            "id": 12,
            "kind": "integerLiteral",
            "value": "30",
          },
          "id": 13,
          "kind": "playerStat",
          "name": {
            "id": 10,
            "kind": "id",
            "name": "z",
          },
          "type": {
            "id": 11,
            "kind": "id",
            "name": "int",
          },
        },
        {
          "event": {
            "id": 14,
            "kind": "id",
            "name": "BlockBreak",
          },
          "id": 215,
          "kind": "handler",
          "statements": [
            {
              "id": 26,
              "kind": "statementLet",
              "name": {
                "id": 15,
                "kind": "id",
                "name": "a",
              },
              "type": {
                "id": 16,
                "kind": "id",
                "name": "int",
              },
              "value": {
                "id": 25,
                "kind": "expressionBinary",
                "left": {
                  "field": {
                    "id": 19,
                    "kind": "id",
                    "name": "x",
                  },
                  "id": 20,
                  "kind": "expressionField",
                  "struct": {
                    "id": 18,
                    "kind": "expressionId",
                    "name": {
                      "id": 17,
                      "kind": "id",
                      "name": "global",
                    },
                  },
                },
                "op": "+",
                "right": {
                  "field": {
                    "id": 23,
                    "kind": "id",
                    "name": "y",
                  },
                  "id": 24,
                  "kind": "expressionField",
                  "struct": {
                    "id": 22,
                    "kind": "expressionId",
                    "name": {
                      "id": 21,
                      "kind": "id",
                      "name": "global",
                    },
                  },
                },
              },
            },
            {
              "id": 36,
              "kind": "statementLet",
              "name": {
                "id": 27,
                "kind": "id",
                "name": "b",
              },
              "type": {
                "id": 28,
                "kind": "id",
                "name": "int",
              },
              "value": {
                "id": 35,
                "kind": "expressionBinary",
                "left": {
                  "id": 30,
                  "kind": "expressionId",
                  "name": {
                    "id": 29,
                    "kind": "id",
                    "name": "a",
                  },
                },
                "op": "*",
                "right": {
                  "field": {
                    "id": 33,
                    "kind": "id",
                    "name": "z",
                  },
                  "id": 34,
                  "kind": "expressionField",
                  "struct": {
                    "id": 32,
                    "kind": "expressionId",
                    "name": {
                      "id": 31,
                      "kind": "id",
                      "name": "player",
                    },
                  },
                },
              },
            },
            {
              "id": 43,
              "kind": "statementLet",
              "name": {
                "id": 37,
                "kind": "id",
                "name": "c",
              },
              "type": {
                "id": 38,
                "kind": "id",
                "name": "int",
              },
              "value": {
                "id": 42,
                "kind": "expressionBinary",
                "left": {
                  "id": 40,
                  "kind": "expressionId",
                  "name": {
                    "id": 39,
                    "kind": "id",
                    "name": "b",
                  },
                },
                "op": "-",
                "right": {
                  "id": 41,
                  "kind": "integerLiteral",
                  "value": "5",
                },
              },
            },
            {
              "id": 50,
              "kind": "statementLet",
              "name": {
                "id": 44,
                "kind": "id",
                "name": "d",
              },
              "type": {
                "id": 45,
                "kind": "id",
                "name": "int",
              },
              "value": {
                "id": 49,
                "kind": "expressionBinary",
                "left": {
                  "id": 47,
                  "kind": "expressionId",
                  "name": {
                    "id": 46,
                    "kind": "id",
                    "name": "c",
                  },
                },
                "op": "/",
                "right": {
                  "id": 48,
                  "kind": "integerLiteral",
                  "value": "2",
                },
              },
            },
            {
              "id": 57,
              "kind": "statementLet",
              "name": {
                "id": 51,
                "kind": "id",
                "name": "e",
              },
              "type": {
                "id": 52,
                "kind": "id",
                "name": "int",
              },
              "value": {
                "id": 56,
                "kind": "expressionBinary",
                "left": {
                  "id": 54,
                  "kind": "expressionId",
                  "name": {
                    "id": 53,
                    "kind": "id",
                    "name": "d",
                  },
                },
                "op": "+",
                "right": {
                  "id": 55,
                  "kind": "integerLiteral",
                  "value": "3",
                },
              },
            },
            {
              "id": 64,
              "kind": "statementLet",
              "name": {
                "id": 58,
                "kind": "id",
                "name": "f",
              },
              "type": {
                "id": 59,
                "kind": "id",
                "name": "bool",
              },
              "value": {
                "id": 63,
                "kind": "expressionBinary",
                "left": {
                  "id": 61,
                  "kind": "expressionId",
                  "name": {
                    "id": 60,
                    "kind": "id",
                    "name": "e",
                  },
                },
                "op": "==",
                "right": {
                  "id": 62,
                  "kind": "integerLiteral",
                  "value": "1",
                },
              },
            },
            {
              "id": 71,
              "kind": "statementLet",
              "name": {
                "id": 65,
                "kind": "id",
                "name": "g",
              },
              "type": {
                "id": 66,
                "kind": "id",
                "name": "bool",
              },
              "value": {
                "id": 70,
                "kind": "expressionBinary",
                "left": {
                  "id": 68,
                  "kind": "expressionId",
                  "name": {
                    "id": 67,
                    "kind": "id",
                    "name": "f",
                  },
                },
                "op": "&&",
                "right": {
                  "id": 69,
                  "kind": "booleanLiteral",
                  "value": true,
                },
              },
            },
            {
              "id": 77,
              "kind": "statementLet",
              "name": {
                "id": 72,
                "kind": "id",
                "name": "h",
              },
              "type": {
                "id": 73,
                "kind": "id",
                "name": "bool",
              },
              "value": {
                "id": 76,
                "kind": "expressionUnary",
                "op": "!",
                "operand": {
                  "id": 75,
                  "kind": "expressionId",
                  "name": {
                    "id": 74,
                    "kind": "id",
                    "name": "g",
                  },
                },
              },
            },
            {
              "id": 83,
              "kind": "statementLet",
              "name": {
                "id": 78,
                "kind": "id",
                "name": "i",
              },
              "type": {
                "id": 79,
                "kind": "id",
                "name": "int",
              },
              "value": {
                "id": 82,
                "kind": "expressionUnary",
                "op": "-",
                "operand": {
                  "id": 81,
                  "kind": "expressionId",
                  "name": {
                    "id": 80,
                    "kind": "id",
                    "name": "d",
                  },
                },
              },
            },
            {
              "id": 89,
              "kind": "statementLet",
              "name": {
                "id": 84,
                "kind": "id",
                "name": "j",
              },
              "type": {
                "id": 85,
                "kind": "id",
                "name": "int",
              },
              "value": {
                "id": 88,
                "kind": "expressionUnary",
                "op": "+",
                "operand": {
                  "id": 87,
                  "kind": "expressionId",
                  "name": {
                    "id": 86,
                    "kind": "id",
                    "name": "i",
                  },
                },
              },
            },
            {
              "id": 101,
              "kind": "statementLet",
              "name": {
                "id": 90,
                "kind": "id",
                "name": "k",
              },
              "type": {
                "id": 91,
                "kind": "id",
                "name": "int",
              },
              "value": {
                "id": 100,
                "kind": "expressionBinary",
                "left": {
                  "id": 95,
                  "kind": "expressionBinary",
                  "left": {
                    "id": 93,
                    "kind": "expressionId",
                    "name": {
                      "id": 92,
                      "kind": "id",
                      "name": "j",
                    },
                  },
                  "op": "+",
                  "right": {
                    "id": 94,
                    "kind": "integerLiteral",
                    "value": "2",
                  },
                },
                "op": "*",
                "right": {
                  "id": 99,
                  "kind": "expressionBinary",
                  "left": {
                    "id": 97,
                    "kind": "expressionId",
                    "name": {
                      "id": 96,
                      "kind": "id",
                      "name": "a",
                    },
                  },
                  "op": "-",
                  "right": {
                    "id": 98,
                    "kind": "integerLiteral",
                    "value": "1",
                  },
                },
              },
            },
            {
              "id": 111,
              "kind": "statementLet",
              "name": {
                "id": 102,
                "kind": "id",
                "name": "l",
              },
              "type": {
                "id": 103,
                "kind": "id",
                "name": "int",
              },
              "value": {
                "id": 110,
                "kind": "expressionBinary",
                "left": {
                  "id": 105,
                  "kind": "expressionId",
                  "name": {
                    "id": 104,
                    "kind": "id",
                    "name": "k",
                  },
                },
                "op": "/",
                "right": {
                  "id": 109,
                  "kind": "expressionBinary",
                  "left": {
                    "id": 107,
                    "kind": "expressionId",
                    "name": {
                      "id": 106,
                      "kind": "id",
                      "name": "b",
                    },
                  },
                  "op": "+",
                  "right": {
                    "id": 108,
                    "kind": "integerLiteral",
                    "value": "3",
                  },
                },
              },
            },
            {
              "id": 121,
              "kind": "statementLet",
              "name": {
                "id": 112,
                "kind": "id",
                "name": "m",
              },
              "type": {
                "id": 113,
                "kind": "id",
                "name": "int",
              },
              "value": {
                "id": 120,
                "kind": "expressionBinary",
                "left": {
                  "id": 115,
                  "kind": "expressionId",
                  "name": {
                    "id": 114,
                    "kind": "id",
                    "name": "l",
                  },
                },
                "op": "+",
                "right": {
                  "id": 119,
                  "kind": "expressionBinary",
                  "left": {
                    "id": 117,
                    "kind": "expressionId",
                    "name": {
                      "id": 116,
                      "kind": "id",
                      "name": "c",
                    },
                  },
                  "op": "-",
                  "right": {
                    "id": 118,
                    "kind": "integerLiteral",
                    "value": "4",
                  },
                },
              },
            },
            {
              "id": 128,
              "kind": "statementLet",
              "name": {
                "id": 122,
                "kind": "id",
                "name": "n",
              },
              "type": {
                "id": 123,
                "kind": "id",
                "name": "bool",
              },
              "value": {
                "id": 127,
                "kind": "expressionBinary",
                "left": {
                  "id": 125,
                  "kind": "expressionId",
                  "name": {
                    "id": 124,
                    "kind": "id",
                    "name": "m",
                  },
                },
                "op": "!=",
                "right": {
                  "id": 126,
                  "kind": "integerLiteral",
                  "value": "0",
                },
              },
            },
            {
              "id": 135,
              "kind": "statementLet",
              "name": {
                "id": 129,
                "kind": "id",
                "name": "o",
              },
              "type": {
                "id": 130,
                "kind": "id",
                "name": "bool",
              },
              "value": {
                "id": 134,
                "kind": "expressionBinary",
                "left": {
                  "id": 132,
                  "kind": "expressionId",
                  "name": {
                    "id": 131,
                    "kind": "id",
                    "name": "n",
                  },
                },
                "op": "||",
                "right": {
                  "id": 133,
                  "kind": "booleanLiteral",
                  "value": false,
                },
              },
            },
            {
              "id": 141,
              "kind": "statementLet",
              "name": {
                "id": 136,
                "kind": "id",
                "name": "p",
              },
              "type": {
                "id": 137,
                "kind": "id",
                "name": "bool",
              },
              "value": {
                "id": 140,
                "kind": "expressionUnary",
                "op": "!",
                "operand": {
                  "id": 139,
                  "kind": "expressionId",
                  "name": {
                    "id": 138,
                    "kind": "id",
                    "name": "o",
                  },
                },
              },
            },
            {
              "id": 147,
              "kind": "statementLet",
              "name": {
                "id": 142,
                "kind": "id",
                "name": "q",
              },
              "type": {
                "id": 143,
                "kind": "id",
                "name": "int",
              },
              "value": {
                "id": 146,
                "kind": "expressionUnary",
                "op": "-",
                "operand": {
                  "id": 145,
                  "kind": "expressionId",
                  "name": {
                    "id": 144,
                    "kind": "id",
                    "name": "m",
                  },
                },
              },
            },
            {
              "id": 153,
              "kind": "statementLet",
              "name": {
                "id": 148,
                "kind": "id",
                "name": "r",
              },
              "type": {
                "id": 149,
                "kind": "id",
                "name": "int",
              },
              "value": {
                "id": 152,
                "kind": "expressionUnary",
                "op": "+",
                "operand": {
                  "id": 151,
                  "kind": "expressionId",
                  "name": {
                    "id": 150,
                    "kind": "id",
                    "name": "q",
                  },
                },
              },
            },
            {
              "id": 165,
              "kind": "statementLet",
              "name": {
                "id": 154,
                "kind": "id",
                "name": "s",
              },
              "type": {
                "id": 155,
                "kind": "id",
                "name": "int",
              },
              "value": {
                "id": 164,
                "kind": "expressionBinary",
                "left": {
                  "id": 159,
                  "kind": "expressionBinary",
                  "left": {
                    "id": 157,
                    "kind": "expressionId",
                    "name": {
                      "id": 156,
                      "kind": "id",
                      "name": "r",
                    },
                  },
                  "op": "+",
                  "right": {
                    "id": 158,
                    "kind": "integerLiteral",
                    "value": "5",
                  },
                },
                "op": "*",
                "right": {
                  "id": 163,
                  "kind": "expressionBinary",
                  "left": {
                    "id": 161,
                    "kind": "expressionId",
                    "name": {
                      "id": 160,
                      "kind": "id",
                      "name": "d",
                    },
                  },
                  "op": "-",
                  "right": {
                    "id": 162,
                    "kind": "integerLiteral",
                    "value": "2",
                  },
                },
              },
            },
            {
              "id": 175,
              "kind": "statementLet",
              "name": {
                "id": 166,
                "kind": "id",
                "name": "t",
              },
              "type": {
                "id": 167,
                "kind": "id",
                "name": "int",
              },
              "value": {
                "id": 174,
                "kind": "expressionBinary",
                "left": {
                  "id": 169,
                  "kind": "expressionId",
                  "name": {
                    "id": 168,
                    "kind": "id",
                    "name": "s",
                  },
                },
                "op": "/",
                "right": {
                  "id": 173,
                  "kind": "expressionBinary",
                  "left": {
                    "id": 171,
                    "kind": "expressionId",
                    "name": {
                      "id": 170,
                      "kind": "id",
                      "name": "e",
                    },
                  },
                  "op": "+",
                  "right": {
                    "id": 172,
                    "kind": "integerLiteral",
                    "value": "4",
                  },
                },
              },
            },
            {
              "id": 182,
              "kind": "statementLet",
              "name": {
                "id": 176,
                "kind": "id",
                "name": "u",
              },
              "type": {
                "id": 177,
                "kind": "id",
                "name": "int",
              },
              "value": {
                "id": 181,
                "kind": "expressionBinary",
                "left": {
                  "id": 179,
                  "kind": "expressionId",
                  "name": {
                    "id": 178,
                    "kind": "id",
                    "name": "t",
                  },
                },
                "op": "+",
                "right": {
                  "id": 180,
                  "kind": "integerLiteral",
                  "value": "123",
                },
              },
            },
            {
              "id": 189,
              "kind": "statementLet",
              "name": {
                "id": 183,
                "kind": "id",
                "name": "v",
              },
              "type": {
                "id": 184,
                "kind": "id",
                "name": "bool",
              },
              "value": {
                "id": 188,
                "kind": "expressionBinary",
                "left": {
                  "id": 186,
                  "kind": "expressionId",
                  "name": {
                    "id": 185,
                    "kind": "id",
                    "name": "u",
                  },
                },
                "op": "==",
                "right": {
                  "id": 187,
                  "kind": "integerLiteral",
                  "value": "1",
                },
              },
            },
            {
              "id": 196,
              "kind": "statementLet",
              "name": {
                "id": 190,
                "kind": "id",
                "name": "w",
              },
              "type": {
                "id": 191,
                "kind": "id",
                "name": "bool",
              },
              "value": {
                "id": 195,
                "kind": "expressionBinary",
                "left": {
                  "id": 193,
                  "kind": "expressionId",
                  "name": {
                    "id": 192,
                    "kind": "id",
                    "name": "v",
                  },
                },
                "op": "&&",
                "right": {
                  "id": 194,
                  "kind": "booleanLiteral",
                  "value": true,
                },
              },
            },
            {
              "id": 202,
              "kind": "statementLet",
              "name": {
                "id": 197,
                "kind": "id",
                "name": "x",
              },
              "type": {
                "id": 198,
                "kind": "id",
                "name": "bool",
              },
              "value": {
                "id": 201,
                "kind": "expressionUnary",
                "op": "!",
                "operand": {
                  "id": 200,
                  "kind": "expressionId",
                  "name": {
                    "id": 199,
                    "kind": "id",
                    "name": "w",
                  },
                },
              },
            },
            {
              "id": 208,
              "kind": "statementLet",
              "name": {
                "id": 203,
                "kind": "id",
                "name": "y",
              },
              "type": {
                "id": 204,
                "kind": "id",
                "name": "int",
              },
              "value": {
                "id": 207,
                "kind": "expressionUnary",
                "op": "-",
                "operand": {
                  "id": 206,
                  "kind": "expressionId",
                  "name": {
                    "id": 205,
                    "kind": "id",
                    "name": "u",
                  },
                },
              },
            },
            {
              "id": 214,
              "kind": "statementLet",
              "name": {
                "id": 209,
                "kind": "id",
                "name": "z",
              },
              "type": {
                "id": 210,
                "kind": "id",
                "name": "int",
              },
              "value": {
                "id": 213,
                "kind": "expressionUnary",
                "op": "+",
                "operand": {
                  "id": 212,
                  "kind": "expressionId",
                  "name": {
                    "id": 211,
                    "kind": "id",
                    "name": "y",
                  },
                },
              },
            },
          ],
        },
      ],
      "kind": "house",
      "name": {
        "id": 1,
        "kind": "id",
        "name": "MyHouse",
      },
    },
  ],
  "kind": "module",
}
`;

exports[`Typing should parse 15 2`] = `
CompilerContext {
  "expressions": Map {
    4 => {
      "type": "int",
    },
    8 => {
      "type": "int",
    },
    12 => {
      "type": "int",
    },
    18 => {
      "fields": [
        {
          "name": "x",
          "type": {
            "type": "int",
          },
        },
        {
          "name": "y",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    20 => {
      "type": "int",
    },
    22 => {
      "fields": [
        {
          "name": "x",
          "type": {
            "type": "int",
          },
        },
        {
          "name": "y",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    24 => {
      "type": "int",
    },
    25 => {
      "type": "int",
    },
    30 => {
      "type": "int",
    },
    32 => {
      "fields": [
        {
          "name": "z",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "player",
      "type": "struct",
    },
    34 => {
      "type": "int",
    },
    35 => {
      "type": "int",
    },
    40 => {
      "type": "int",
    },
    41 => {
      "type": "int",
    },
    42 => {
      "type": "int",
    },
    47 => {
      "type": "int",
    },
    48 => {
      "type": "int",
    },
    49 => {
      "type": "int",
    },
    54 => {
      "type": "int",
    },
    55 => {
      "type": "int",
    },
    56 => {
      "type": "int",
    },
    61 => {
      "type": "int",
    },
    62 => {
      "type": "int",
    },
    63 => {
      "type": "bool",
    },
    68 => {
      "type": "bool",
    },
    69 => {
      "type": "bool",
    },
    70 => {
      "type": "bool",
    },
    75 => {
      "type": "bool",
    },
    76 => {
      "type": "bool",
    },
    81 => {
      "type": "int",
    },
    82 => {
      "type": "int",
    },
    87 => {
      "type": "int",
    },
    88 => {
      "type": "int",
    },
    93 => {
      "type": "int",
    },
    94 => {
      "type": "int",
    },
    95 => {
      "type": "int",
    },
    97 => {
      "type": "int",
    },
    98 => {
      "type": "int",
    },
    99 => {
      "type": "int",
    },
    100 => {
      "type": "int",
    },
    105 => {
      "type": "int",
    },
    107 => {
      "type": "int",
    },
    108 => {
      "type": "int",
    },
    109 => {
      "type": "int",
    },
    110 => {
      "type": "int",
    },
    115 => {
      "type": "int",
    },
    117 => {
      "type": "int",
    },
    118 => {
      "type": "int",
    },
    119 => {
      "type": "int",
    },
    120 => {
      "type": "int",
    },
    125 => {
      "type": "int",
    },
    126 => {
      "type": "int",
    },
    127 => {
      "type": "bool",
    },
    132 => {
      "type": "bool",
    },
    133 => {
      "type": "bool",
    },
    134 => {
      "type": "bool",
    },
    139 => {
      "type": "bool",
    },
    140 => {
      "type": "bool",
    },
    145 => {
      "type": "int",
    },
    146 => {
      "type": "int",
    },
    151 => {
      "type": "int",
    },
    152 => {
      "type": "int",
    },
    157 => {
      "type": "int",
    },
    158 => {
      "type": "int",
    },
    159 => {
      "type": "int",
    },
    161 => {
      "type": "int",
    },
    162 => {
      "type": "int",
    },
    163 => {
      "type": "int",
    },
    164 => {
      "type": "int",
    },
    169 => {
      "type": "int",
    },
    171 => {
      "type": "int",
    },
    172 => {
      "type": "int",
    },
    173 => {
      "type": "int",
    },
    174 => {
      "type": "int",
    },
    179 => {
      "type": "int",
    },
    180 => {
      "type": "int",
    },
    181 => {
      "type": "int",
    },
    186 => {
      "type": "int",
    },
    187 => {
      "type": "int",
    },
    188 => {
      "type": "bool",
    },
    193 => {
      "type": "bool",
    },
    194 => {
      "type": "bool",
    },
    195 => {
      "type": "bool",
    },
    200 => {
      "type": "bool",
    },
    201 => {
      "type": "bool",
    },
    206 => {
      "type": "int",
    },
    207 => {
      "type": "int",
    },
    212 => {
      "type": "int",
    },
    213 => {
      "type": "int",
    },
  },
}
`;
