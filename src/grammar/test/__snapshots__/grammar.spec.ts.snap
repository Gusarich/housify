// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Grammar should fail augmented-assignment-invalid-op 1`] = `
"Line 4, col 11:
  3 |         let x: int = 0;
> 4 |         x |= 1;
                ^
  5 |     }
Expected ";", "(", ".", "-", "+", "/", "*", "==", "!=", "<=", "<", ">=", ">", "||", "&&", "/=", "*=", "-=", "+=", or "=""
`;

exports[`Grammar should fail id-identical-to-keyword 1`] = `
"Line 2, col 12:
  1 | house MyHouse {
> 2 |     global handle: int;
                 ^
  3 | }
Expected not a keyword"
`;

exports[`Grammar should fail id-starts-with-digit 1`] = `
"Line 2, col 12:
  1 | house MyHouse {
> 2 |     global 1x: int;
                 ^
  3 | }
Expected "_", "A".."Z", or "a".."z""
`;

exports[`Grammar should fail invalid-integer-literal 1`] = `
"Line 3, col 15:
  2 |     handle BLOCK_BREAK {
> 3 |         x = 42a;
                    ^
  4 |     }
Expected ";""
`;

exports[`Grammar should fail no-colon-in-stat-definition 1`] = `
"Line 5, col 15:
  4 |     player xp: int;
> 5 |     player yp int;
                    ^
  6 | 
Expected ":""
`;

exports[`Grammar should fail no-else-body 1`] = `
"Line 6, col 5:
  5 |         } else
> 6 |     }
          ^
  7 | }
Expected "if" or "{""
`;

exports[`Grammar should fail no-expression-in-assignment 1`] = `
"Line 3, col 13:
  2 |     handle BLOCK_BREAK {
> 3 |         x = ;
                  ^
  4 |     }
Expected "_", "A".."Z", "a".."z", "false", "true", a digit, "(", "!", or "-""
`;

exports[`Grammar should fail no-expression-in-let-statement 1`] = `
"Line 3, col 22:
  2 |     handle BLOCK_BREAK {
> 3 |         let x: int = ;
                           ^
  4 |     }
Expected "_", "A".."Z", "a".."z", "false", "true", a digit, "(", "!", or "-""
`;

exports[`Grammar should fail no-operand-in-arithmetics 1`] = `
"Line 3, col 19:
  2 |     handle BLOCK_BREAK {
> 3 |         (x + y) * ;
                        ^
  4 |     }
Expected "_", "A".."Z", "a".."z", "false", "true", a digit, "(", "!", or "-""
`;

exports[`Grammar should fail no-operand-in-unary-operation 1`] = `
"Line 3, col 14:
  2 |     handle BLOCK_BREAK {
> 3 |         x = -;
                   ^
  4 |     }
Expected "_", "A".."Z", "a".."z", "false", "true", a digit, "(", "!", or "-""
`;

exports[`Grammar should fail no-right-operand-in-binary-operation 1`] = `
"Line 3, col 17:
  2 |     handle BLOCK_BREAK {
> 3 |         x = 5 + ;
                      ^
  4 |     }
Expected "_", "A".."Z", "a".."z", "false", "true", a digit, "(", "!", or "-""
`;

exports[`Grammar should fail no-semicolon 1`] = `
"Line 4, col 5:
  3 |         5
> 4 |     }
          ^
  5 | }
Expected ";", ".", "-", "+", "/", "*", "==", "!=", "<=", "<", ">=", ">", "||", "&&", "/=", "*=", "-=", "+=", or "=""
`;

exports[`Grammar should fail no-semicolon2 1`] = `
"Line 4, col 5:
  3 |         myVar
> 4 |     }
          ^
  5 | }
Expected ";", "(", ".", "-", "+", "/", "*", "==", "!=", "<=", "<", ">=", ">", "||", "&&", "/=", "*=", "-=", "+=", or "=""
`;

exports[`Grammar should fail stat-definition-after-handler 1`] = `
"Line 10, col 5:
   9 | 
> 10 |     player yp: int;
           ^
  11 | }
Expected "}" or "handle""
`;

exports[`Grammar should fail static-constant-no-value 1`] = `
"Line 2, col 13:
  1 | const x: int = 123;
> 2 | const y: int;
                  ^
  3 | 
Expected "=""
`;

exports[`Grammar should parse arithmetics 1`] = `
{
  "id": 14,
  "items": [
    {
      "id": 13,
      "items": [
        {
          "event": {
            "id": 2,
            "kind": "id",
            "name": "BLOCK_BREAK",
            "source": {
              "interval": Interval {
                "_contents": "BLOCK_BREAK",
                "endIdx": 38,
                "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        (x + y) * z;
    }
}
",
                "startIdx": 27,
              },
            },
          },
          "id": 12,
          "kind": "handler",
          "source": {
            "interval": Interval {
              "endIdx": 67,
              "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        (x + y) * z;
    }
}
",
              "startIdx": 20,
            },
          },
          "statements": [
            {
              "expression": {
                "id": 10,
                "kind": "expressionBinary",
                "left": {
                  "id": 7,
                  "kind": "expressionBinary",
                  "left": {
                    "id": 4,
                    "kind": "expressionId",
                    "name": {
                      "id": 3,
                      "kind": "id",
                      "name": "x",
                      "source": {
                        "interval": Interval {
                          "_contents": "x",
                          "endIdx": 51,
                          "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        (x + y) * z;
    }
}
",
                          "startIdx": 50,
                        },
                      },
                    },
                    "source": {
                      "interval": Interval {
                        "endIdx": 51,
                        "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        (x + y) * z;
    }
}
",
                        "startIdx": 50,
                      },
                    },
                  },
                  "op": "+",
                  "right": {
                    "id": 6,
                    "kind": "expressionId",
                    "name": {
                      "id": 5,
                      "kind": "id",
                      "name": "y",
                      "source": {
                        "interval": Interval {
                          "_contents": "y",
                          "endIdx": 55,
                          "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        (x + y) * z;
    }
}
",
                          "startIdx": 54,
                        },
                      },
                    },
                    "source": {
                      "interval": Interval {
                        "endIdx": 55,
                        "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        (x + y) * z;
    }
}
",
                        "startIdx": 54,
                      },
                    },
                  },
                  "source": {
                    "interval": Interval {
                      "endIdx": 55,
                      "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        (x + y) * z;
    }
}
",
                      "startIdx": 50,
                    },
                  },
                },
                "op": "*",
                "right": {
                  "id": 9,
                  "kind": "expressionId",
                  "name": {
                    "id": 8,
                    "kind": "id",
                    "name": "z",
                    "source": {
                      "interval": Interval {
                        "_contents": "z",
                        "endIdx": 60,
                        "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        (x + y) * z;
    }
}
",
                        "startIdx": 59,
                      },
                    },
                  },
                  "source": {
                    "interval": Interval {
                      "endIdx": 60,
                      "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        (x + y) * z;
    }
}
",
                      "startIdx": 59,
                    },
                  },
                },
                "source": {
                  "interval": Interval {
                    "endIdx": 60,
                    "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        (x + y) * z;
    }
}
",
                    "startIdx": 49,
                  },
                },
              },
              "id": 11,
              "kind": "statementExpression",
              "source": {
                "interval": Interval {
                  "endIdx": 61,
                  "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        (x + y) * z;
    }
}
",
                  "startIdx": 49,
                },
              },
            },
          ],
        },
      ],
      "kind": "house",
      "name": {
        "id": 1,
        "kind": "id",
        "name": "MyHouse",
        "source": {
          "interval": Interval {
            "_contents": "MyHouse",
            "endIdx": 13,
            "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        (x + y) * z;
    }
}
",
            "startIdx": 6,
          },
        },
      },
      "source": {
        "interval": Interval {
          "endIdx": 69,
          "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        (x + y) * z;
    }
}
",
          "startIdx": 0,
        },
      },
    },
  ],
  "kind": "module",
  "source": {
    "interval": Interval {
      "endIdx": 70,
      "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        (x + y) * z;
    }
}
",
      "startIdx": 0,
    },
  },
}
`;

exports[`Grammar should parse assignment 1`] = `
{
  "id": 9,
  "items": [
    {
      "id": 8,
      "items": [
        {
          "event": {
            "id": 2,
            "kind": "id",
            "name": "BLOCK_BREAK",
            "source": {
              "interval": Interval {
                "_contents": "BLOCK_BREAK",
                "endIdx": 38,
                "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        x = 5;
    }
}
",
                "startIdx": 27,
              },
            },
          },
          "id": 7,
          "kind": "handler",
          "source": {
            "interval": Interval {
              "endIdx": 61,
              "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        x = 5;
    }
}
",
              "startIdx": 20,
            },
          },
          "statements": [
            {
              "id": 6,
              "kind": "statementAssign",
              "lvalue": {
                "id": 4,
                "kind": "expressionId",
                "name": {
                  "id": 3,
                  "kind": "id",
                  "name": "x",
                  "source": {
                    "interval": Interval {
                      "_contents": "x",
                      "endIdx": 50,
                      "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        x = 5;
    }
}
",
                      "startIdx": 49,
                    },
                  },
                },
                "source": {
                  "interval": Interval {
                    "endIdx": 50,
                    "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        x = 5;
    }
}
",
                    "startIdx": 49,
                  },
                },
              },
              "source": {
                "interval": Interval {
                  "endIdx": 55,
                  "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        x = 5;
    }
}
",
                  "startIdx": 49,
                },
              },
              "value": {
                "id": 5,
                "kind": "integerLiteral",
                "source": {
                  "interval": Interval {
                    "_contents": "5",
                    "endIdx": 54,
                    "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        x = 5;
    }
}
",
                    "startIdx": 53,
                  },
                },
                "value": "5",
              },
            },
          ],
        },
      ],
      "kind": "house",
      "name": {
        "id": 1,
        "kind": "id",
        "name": "MyHouse",
        "source": {
          "interval": Interval {
            "_contents": "MyHouse",
            "endIdx": 13,
            "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        x = 5;
    }
}
",
            "startIdx": 6,
          },
        },
      },
      "source": {
        "interval": Interval {
          "endIdx": 63,
          "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        x = 5;
    }
}
",
          "startIdx": 0,
        },
      },
    },
  ],
  "kind": "module",
  "source": {
    "interval": Interval {
      "endIdx": 64,
      "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        x = 5;
    }
}
",
      "startIdx": 0,
    },
  },
}
`;

exports[`Grammar should parse augmented-assignment 1`] = `
{
  "id": 52,
  "items": [
    {
      "id": 51,
      "items": [
        {
          "id": 4,
          "kind": "globalStat",
          "name": {
            "id": 2,
            "kind": "id",
            "name": "x",
            "source": {
              "interval": Interval {
                "_contents": "x",
                "endIdx": 28,
                "sourceString": "house MyHouse {
    global x: int;

    handle JOIN {
        let x: int = 0;
        x += 1;
        x -= 1;
        x *= 1;
        x /= 1;
        global.x += 1;
        global.x -= 1;
        global.x *= 1;
        global.x /= 1;
    }
}",
                "startIdx": 27,
              },
            },
          },
          "source": {
            "interval": Interval {
              "endIdx": 34,
              "sourceString": "house MyHouse {
    global x: int;

    handle JOIN {
        let x: int = 0;
        x += 1;
        x -= 1;
        x *= 1;
        x /= 1;
        global.x += 1;
        global.x -= 1;
        global.x *= 1;
        global.x /= 1;
    }
}",
              "startIdx": 20,
            },
          },
          "type": {
            "id": 3,
            "kind": "id",
            "name": "int",
            "source": {
              "interval": Interval {
                "_contents": "int",
                "endIdx": 33,
                "sourceString": "house MyHouse {
    global x: int;

    handle JOIN {
        let x: int = 0;
        x += 1;
        x -= 1;
        x *= 1;
        x /= 1;
        global.x += 1;
        global.x -= 1;
        global.x *= 1;
        global.x /= 1;
    }
}",
                "startIdx": 30,
              },
            },
          },
        },
        {
          "event": {
            "id": 5,
            "kind": "id",
            "name": "JOIN",
            "source": {
              "interval": Interval {
                "_contents": "JOIN",
                "endIdx": 51,
                "sourceString": "house MyHouse {
    global x: int;

    handle JOIN {
        let x: int = 0;
        x += 1;
        x -= 1;
        x *= 1;
        x /= 1;
        global.x += 1;
        global.x -= 1;
        global.x *= 1;
        global.x /= 1;
    }
}",
                "startIdx": 47,
              },
            },
          },
          "id": 50,
          "kind": "handler",
          "source": {
            "interval": Interval {
              "endIdx": 239,
              "sourceString": "house MyHouse {
    global x: int;

    handle JOIN {
        let x: int = 0;
        x += 1;
        x -= 1;
        x *= 1;
        x /= 1;
        global.x += 1;
        global.x -= 1;
        global.x *= 1;
        global.x /= 1;
    }
}",
              "startIdx": 40,
            },
          },
          "statements": [
            {
              "id": 9,
              "kind": "statementLet",
              "name": {
                "id": 6,
                "kind": "id",
                "name": "x",
                "source": {
                  "interval": Interval {
                    "_contents": "x",
                    "endIdx": 67,
                    "sourceString": "house MyHouse {
    global x: int;

    handle JOIN {
        let x: int = 0;
        x += 1;
        x -= 1;
        x *= 1;
        x /= 1;
        global.x += 1;
        global.x -= 1;
        global.x *= 1;
        global.x /= 1;
    }
}",
                    "startIdx": 66,
                  },
                },
              },
              "source": {
                "interval": Interval {
                  "endIdx": 77,
                  "sourceString": "house MyHouse {
    global x: int;

    handle JOIN {
        let x: int = 0;
        x += 1;
        x -= 1;
        x *= 1;
        x /= 1;
        global.x += 1;
        global.x -= 1;
        global.x *= 1;
        global.x /= 1;
    }
}",
                  "startIdx": 62,
                },
              },
              "type": {
                "id": 7,
                "kind": "id",
                "name": "int",
                "source": {
                  "interval": Interval {
                    "_contents": "int",
                    "endIdx": 72,
                    "sourceString": "house MyHouse {
    global x: int;

    handle JOIN {
        let x: int = 0;
        x += 1;
        x -= 1;
        x *= 1;
        x /= 1;
        global.x += 1;
        global.x -= 1;
        global.x *= 1;
        global.x /= 1;
    }
}",
                    "startIdx": 69,
                  },
                },
              },
              "value": {
                "id": 8,
                "kind": "integerLiteral",
                "source": {
                  "interval": Interval {
                    "_contents": "0",
                    "endIdx": 76,
                    "sourceString": "house MyHouse {
    global x: int;

    handle JOIN {
        let x: int = 0;
        x += 1;
        x -= 1;
        x *= 1;
        x /= 1;
        global.x += 1;
        global.x -= 1;
        global.x *= 1;
        global.x /= 1;
    }
}",
                    "startIdx": 75,
                  },
                },
                "value": "0",
              },
            },
            {
              "id": 13,
              "kind": "statementAugmentedAssign",
              "lvalue": {
                "id": 11,
                "kind": "expressionId",
                "name": {
                  "id": 10,
                  "kind": "id",
                  "name": "x",
                  "source": {
                    "interval": Interval {
                      "_contents": "x",
                      "endIdx": 87,
                      "sourceString": "house MyHouse {
    global x: int;

    handle JOIN {
        let x: int = 0;
        x += 1;
        x -= 1;
        x *= 1;
        x /= 1;
        global.x += 1;
        global.x -= 1;
        global.x *= 1;
        global.x /= 1;
    }
}",
                      "startIdx": 86,
                    },
                  },
                },
                "source": {
                  "interval": Interval {
                    "endIdx": 87,
                    "sourceString": "house MyHouse {
    global x: int;

    handle JOIN {
        let x: int = 0;
        x += 1;
        x -= 1;
        x *= 1;
        x /= 1;
        global.x += 1;
        global.x -= 1;
        global.x *= 1;
        global.x /= 1;
    }
}",
                    "startIdx": 86,
                  },
                },
              },
              "op": "+",
              "source": {
                "interval": Interval {
                  "endIdx": 93,
                  "sourceString": "house MyHouse {
    global x: int;

    handle JOIN {
        let x: int = 0;
        x += 1;
        x -= 1;
        x *= 1;
        x /= 1;
        global.x += 1;
        global.x -= 1;
        global.x *= 1;
        global.x /= 1;
    }
}",
                  "startIdx": 86,
                },
              },
              "value": {
                "id": 12,
                "kind": "integerLiteral",
                "source": {
                  "interval": Interval {
                    "_contents": "1",
                    "endIdx": 92,
                    "sourceString": "house MyHouse {
    global x: int;

    handle JOIN {
        let x: int = 0;
        x += 1;
        x -= 1;
        x *= 1;
        x /= 1;
        global.x += 1;
        global.x -= 1;
        global.x *= 1;
        global.x /= 1;
    }
}",
                    "startIdx": 91,
                  },
                },
                "value": "1",
              },
            },
            {
              "id": 17,
              "kind": "statementAugmentedAssign",
              "lvalue": {
                "id": 15,
                "kind": "expressionId",
                "name": {
                  "id": 14,
                  "kind": "id",
                  "name": "x",
                  "source": {
                    "interval": Interval {
                      "_contents": "x",
                      "endIdx": 103,
                      "sourceString": "house MyHouse {
    global x: int;

    handle JOIN {
        let x: int = 0;
        x += 1;
        x -= 1;
        x *= 1;
        x /= 1;
        global.x += 1;
        global.x -= 1;
        global.x *= 1;
        global.x /= 1;
    }
}",
                      "startIdx": 102,
                    },
                  },
                },
                "source": {
                  "interval": Interval {
                    "endIdx": 103,
                    "sourceString": "house MyHouse {
    global x: int;

    handle JOIN {
        let x: int = 0;
        x += 1;
        x -= 1;
        x *= 1;
        x /= 1;
        global.x += 1;
        global.x -= 1;
        global.x *= 1;
        global.x /= 1;
    }
}",
                    "startIdx": 102,
                  },
                },
              },
              "op": "-",
              "source": {
                "interval": Interval {
                  "endIdx": 109,
                  "sourceString": "house MyHouse {
    global x: int;

    handle JOIN {
        let x: int = 0;
        x += 1;
        x -= 1;
        x *= 1;
        x /= 1;
        global.x += 1;
        global.x -= 1;
        global.x *= 1;
        global.x /= 1;
    }
}",
                  "startIdx": 102,
                },
              },
              "value": {
                "id": 16,
                "kind": "integerLiteral",
                "source": {
                  "interval": Interval {
                    "_contents": "1",
                    "endIdx": 108,
                    "sourceString": "house MyHouse {
    global x: int;

    handle JOIN {
        let x: int = 0;
        x += 1;
        x -= 1;
        x *= 1;
        x /= 1;
        global.x += 1;
        global.x -= 1;
        global.x *= 1;
        global.x /= 1;
    }
}",
                    "startIdx": 107,
                  },
                },
                "value": "1",
              },
            },
            {
              "id": 21,
              "kind": "statementAugmentedAssign",
              "lvalue": {
                "id": 19,
                "kind": "expressionId",
                "name": {
                  "id": 18,
                  "kind": "id",
                  "name": "x",
                  "source": {
                    "interval": Interval {
                      "_contents": "x",
                      "endIdx": 119,
                      "sourceString": "house MyHouse {
    global x: int;

    handle JOIN {
        let x: int = 0;
        x += 1;
        x -= 1;
        x *= 1;
        x /= 1;
        global.x += 1;
        global.x -= 1;
        global.x *= 1;
        global.x /= 1;
    }
}",
                      "startIdx": 118,
                    },
                  },
                },
                "source": {
                  "interval": Interval {
                    "endIdx": 119,
                    "sourceString": "house MyHouse {
    global x: int;

    handle JOIN {
        let x: int = 0;
        x += 1;
        x -= 1;
        x *= 1;
        x /= 1;
        global.x += 1;
        global.x -= 1;
        global.x *= 1;
        global.x /= 1;
    }
}",
                    "startIdx": 118,
                  },
                },
              },
              "op": "*",
              "source": {
                "interval": Interval {
                  "endIdx": 125,
                  "sourceString": "house MyHouse {
    global x: int;

    handle JOIN {
        let x: int = 0;
        x += 1;
        x -= 1;
        x *= 1;
        x /= 1;
        global.x += 1;
        global.x -= 1;
        global.x *= 1;
        global.x /= 1;
    }
}",
                  "startIdx": 118,
                },
              },
              "value": {
                "id": 20,
                "kind": "integerLiteral",
                "source": {
                  "interval": Interval {
                    "_contents": "1",
                    "endIdx": 124,
                    "sourceString": "house MyHouse {
    global x: int;

    handle JOIN {
        let x: int = 0;
        x += 1;
        x -= 1;
        x *= 1;
        x /= 1;
        global.x += 1;
        global.x -= 1;
        global.x *= 1;
        global.x /= 1;
    }
}",
                    "startIdx": 123,
                  },
                },
                "value": "1",
              },
            },
            {
              "id": 25,
              "kind": "statementAugmentedAssign",
              "lvalue": {
                "id": 23,
                "kind": "expressionId",
                "name": {
                  "id": 22,
                  "kind": "id",
                  "name": "x",
                  "source": {
                    "interval": Interval {
                      "_contents": "x",
                      "endIdx": 135,
                      "sourceString": "house MyHouse {
    global x: int;

    handle JOIN {
        let x: int = 0;
        x += 1;
        x -= 1;
        x *= 1;
        x /= 1;
        global.x += 1;
        global.x -= 1;
        global.x *= 1;
        global.x /= 1;
    }
}",
                      "startIdx": 134,
                    },
                  },
                },
                "source": {
                  "interval": Interval {
                    "endIdx": 135,
                    "sourceString": "house MyHouse {
    global x: int;

    handle JOIN {
        let x: int = 0;
        x += 1;
        x -= 1;
        x *= 1;
        x /= 1;
        global.x += 1;
        global.x -= 1;
        global.x *= 1;
        global.x /= 1;
    }
}",
                    "startIdx": 134,
                  },
                },
              },
              "op": "/",
              "source": {
                "interval": Interval {
                  "endIdx": 141,
                  "sourceString": "house MyHouse {
    global x: int;

    handle JOIN {
        let x: int = 0;
        x += 1;
        x -= 1;
        x *= 1;
        x /= 1;
        global.x += 1;
        global.x -= 1;
        global.x *= 1;
        global.x /= 1;
    }
}",
                  "startIdx": 134,
                },
              },
              "value": {
                "id": 24,
                "kind": "integerLiteral",
                "source": {
                  "interval": Interval {
                    "_contents": "1",
                    "endIdx": 140,
                    "sourceString": "house MyHouse {
    global x: int;

    handle JOIN {
        let x: int = 0;
        x += 1;
        x -= 1;
        x *= 1;
        x /= 1;
        global.x += 1;
        global.x -= 1;
        global.x *= 1;
        global.x /= 1;
    }
}",
                    "startIdx": 139,
                  },
                },
                "value": "1",
              },
            },
            {
              "id": 31,
              "kind": "statementAugmentedAssign",
              "lvalue": {
                "field": {
                  "id": 28,
                  "kind": "id",
                  "name": "x",
                  "source": {
                    "interval": Interval {
                      "_contents": "x",
                      "endIdx": 158,
                      "sourceString": "house MyHouse {
    global x: int;

    handle JOIN {
        let x: int = 0;
        x += 1;
        x -= 1;
        x *= 1;
        x /= 1;
        global.x += 1;
        global.x -= 1;
        global.x *= 1;
        global.x /= 1;
    }
}",
                      "startIdx": 157,
                    },
                  },
                },
                "id": 29,
                "kind": "expressionField",
                "source": {
                  "interval": Interval {
                    "endIdx": 158,
                    "sourceString": "house MyHouse {
    global x: int;

    handle JOIN {
        let x: int = 0;
        x += 1;
        x -= 1;
        x *= 1;
        x /= 1;
        global.x += 1;
        global.x -= 1;
        global.x *= 1;
        global.x /= 1;
    }
}",
                    "startIdx": 150,
                  },
                },
                "struct": {
                  "id": 27,
                  "kind": "expressionId",
                  "name": {
                    "id": 26,
                    "kind": "id",
                    "name": "global",
                    "source": {
                      "interval": Interval {
                        "_contents": "global",
                        "endIdx": 156,
                        "sourceString": "house MyHouse {
    global x: int;

    handle JOIN {
        let x: int = 0;
        x += 1;
        x -= 1;
        x *= 1;
        x /= 1;
        global.x += 1;
        global.x -= 1;
        global.x *= 1;
        global.x /= 1;
    }
}",
                        "startIdx": 150,
                      },
                    },
                  },
                  "source": {
                    "interval": Interval {
                      "endIdx": 156,
                      "sourceString": "house MyHouse {
    global x: int;

    handle JOIN {
        let x: int = 0;
        x += 1;
        x -= 1;
        x *= 1;
        x /= 1;
        global.x += 1;
        global.x -= 1;
        global.x *= 1;
        global.x /= 1;
    }
}",
                      "startIdx": 150,
                    },
                  },
                },
              },
              "op": "+",
              "source": {
                "interval": Interval {
                  "endIdx": 164,
                  "sourceString": "house MyHouse {
    global x: int;

    handle JOIN {
        let x: int = 0;
        x += 1;
        x -= 1;
        x *= 1;
        x /= 1;
        global.x += 1;
        global.x -= 1;
        global.x *= 1;
        global.x /= 1;
    }
}",
                  "startIdx": 150,
                },
              },
              "value": {
                "id": 30,
                "kind": "integerLiteral",
                "source": {
                  "interval": Interval {
                    "_contents": "1",
                    "endIdx": 163,
                    "sourceString": "house MyHouse {
    global x: int;

    handle JOIN {
        let x: int = 0;
        x += 1;
        x -= 1;
        x *= 1;
        x /= 1;
        global.x += 1;
        global.x -= 1;
        global.x *= 1;
        global.x /= 1;
    }
}",
                    "startIdx": 162,
                  },
                },
                "value": "1",
              },
            },
            {
              "id": 37,
              "kind": "statementAugmentedAssign",
              "lvalue": {
                "field": {
                  "id": 34,
                  "kind": "id",
                  "name": "x",
                  "source": {
                    "interval": Interval {
                      "_contents": "x",
                      "endIdx": 181,
                      "sourceString": "house MyHouse {
    global x: int;

    handle JOIN {
        let x: int = 0;
        x += 1;
        x -= 1;
        x *= 1;
        x /= 1;
        global.x += 1;
        global.x -= 1;
        global.x *= 1;
        global.x /= 1;
    }
}",
                      "startIdx": 180,
                    },
                  },
                },
                "id": 35,
                "kind": "expressionField",
                "source": {
                  "interval": Interval {
                    "endIdx": 181,
                    "sourceString": "house MyHouse {
    global x: int;

    handle JOIN {
        let x: int = 0;
        x += 1;
        x -= 1;
        x *= 1;
        x /= 1;
        global.x += 1;
        global.x -= 1;
        global.x *= 1;
        global.x /= 1;
    }
}",
                    "startIdx": 173,
                  },
                },
                "struct": {
                  "id": 33,
                  "kind": "expressionId",
                  "name": {
                    "id": 32,
                    "kind": "id",
                    "name": "global",
                    "source": {
                      "interval": Interval {
                        "_contents": "global",
                        "endIdx": 179,
                        "sourceString": "house MyHouse {
    global x: int;

    handle JOIN {
        let x: int = 0;
        x += 1;
        x -= 1;
        x *= 1;
        x /= 1;
        global.x += 1;
        global.x -= 1;
        global.x *= 1;
        global.x /= 1;
    }
}",
                        "startIdx": 173,
                      },
                    },
                  },
                  "source": {
                    "interval": Interval {
                      "endIdx": 179,
                      "sourceString": "house MyHouse {
    global x: int;

    handle JOIN {
        let x: int = 0;
        x += 1;
        x -= 1;
        x *= 1;
        x /= 1;
        global.x += 1;
        global.x -= 1;
        global.x *= 1;
        global.x /= 1;
    }
}",
                      "startIdx": 173,
                    },
                  },
                },
              },
              "op": "-",
              "source": {
                "interval": Interval {
                  "endIdx": 187,
                  "sourceString": "house MyHouse {
    global x: int;

    handle JOIN {
        let x: int = 0;
        x += 1;
        x -= 1;
        x *= 1;
        x /= 1;
        global.x += 1;
        global.x -= 1;
        global.x *= 1;
        global.x /= 1;
    }
}",
                  "startIdx": 173,
                },
              },
              "value": {
                "id": 36,
                "kind": "integerLiteral",
                "source": {
                  "interval": Interval {
                    "_contents": "1",
                    "endIdx": 186,
                    "sourceString": "house MyHouse {
    global x: int;

    handle JOIN {
        let x: int = 0;
        x += 1;
        x -= 1;
        x *= 1;
        x /= 1;
        global.x += 1;
        global.x -= 1;
        global.x *= 1;
        global.x /= 1;
    }
}",
                    "startIdx": 185,
                  },
                },
                "value": "1",
              },
            },
            {
              "id": 43,
              "kind": "statementAugmentedAssign",
              "lvalue": {
                "field": {
                  "id": 40,
                  "kind": "id",
                  "name": "x",
                  "source": {
                    "interval": Interval {
                      "_contents": "x",
                      "endIdx": 204,
                      "sourceString": "house MyHouse {
    global x: int;

    handle JOIN {
        let x: int = 0;
        x += 1;
        x -= 1;
        x *= 1;
        x /= 1;
        global.x += 1;
        global.x -= 1;
        global.x *= 1;
        global.x /= 1;
    }
}",
                      "startIdx": 203,
                    },
                  },
                },
                "id": 41,
                "kind": "expressionField",
                "source": {
                  "interval": Interval {
                    "endIdx": 204,
                    "sourceString": "house MyHouse {
    global x: int;

    handle JOIN {
        let x: int = 0;
        x += 1;
        x -= 1;
        x *= 1;
        x /= 1;
        global.x += 1;
        global.x -= 1;
        global.x *= 1;
        global.x /= 1;
    }
}",
                    "startIdx": 196,
                  },
                },
                "struct": {
                  "id": 39,
                  "kind": "expressionId",
                  "name": {
                    "id": 38,
                    "kind": "id",
                    "name": "global",
                    "source": {
                      "interval": Interval {
                        "_contents": "global",
                        "endIdx": 202,
                        "sourceString": "house MyHouse {
    global x: int;

    handle JOIN {
        let x: int = 0;
        x += 1;
        x -= 1;
        x *= 1;
        x /= 1;
        global.x += 1;
        global.x -= 1;
        global.x *= 1;
        global.x /= 1;
    }
}",
                        "startIdx": 196,
                      },
                    },
                  },
                  "source": {
                    "interval": Interval {
                      "endIdx": 202,
                      "sourceString": "house MyHouse {
    global x: int;

    handle JOIN {
        let x: int = 0;
        x += 1;
        x -= 1;
        x *= 1;
        x /= 1;
        global.x += 1;
        global.x -= 1;
        global.x *= 1;
        global.x /= 1;
    }
}",
                      "startIdx": 196,
                    },
                  },
                },
              },
              "op": "*",
              "source": {
                "interval": Interval {
                  "endIdx": 210,
                  "sourceString": "house MyHouse {
    global x: int;

    handle JOIN {
        let x: int = 0;
        x += 1;
        x -= 1;
        x *= 1;
        x /= 1;
        global.x += 1;
        global.x -= 1;
        global.x *= 1;
        global.x /= 1;
    }
}",
                  "startIdx": 196,
                },
              },
              "value": {
                "id": 42,
                "kind": "integerLiteral",
                "source": {
                  "interval": Interval {
                    "_contents": "1",
                    "endIdx": 209,
                    "sourceString": "house MyHouse {
    global x: int;

    handle JOIN {
        let x: int = 0;
        x += 1;
        x -= 1;
        x *= 1;
        x /= 1;
        global.x += 1;
        global.x -= 1;
        global.x *= 1;
        global.x /= 1;
    }
}",
                    "startIdx": 208,
                  },
                },
                "value": "1",
              },
            },
            {
              "id": 49,
              "kind": "statementAugmentedAssign",
              "lvalue": {
                "field": {
                  "id": 46,
                  "kind": "id",
                  "name": "x",
                  "source": {
                    "interval": Interval {
                      "_contents": "x",
                      "endIdx": 227,
                      "sourceString": "house MyHouse {
    global x: int;

    handle JOIN {
        let x: int = 0;
        x += 1;
        x -= 1;
        x *= 1;
        x /= 1;
        global.x += 1;
        global.x -= 1;
        global.x *= 1;
        global.x /= 1;
    }
}",
                      "startIdx": 226,
                    },
                  },
                },
                "id": 47,
                "kind": "expressionField",
                "source": {
                  "interval": Interval {
                    "endIdx": 227,
                    "sourceString": "house MyHouse {
    global x: int;

    handle JOIN {
        let x: int = 0;
        x += 1;
        x -= 1;
        x *= 1;
        x /= 1;
        global.x += 1;
        global.x -= 1;
        global.x *= 1;
        global.x /= 1;
    }
}",
                    "startIdx": 219,
                  },
                },
                "struct": {
                  "id": 45,
                  "kind": "expressionId",
                  "name": {
                    "id": 44,
                    "kind": "id",
                    "name": "global",
                    "source": {
                      "interval": Interval {
                        "_contents": "global",
                        "endIdx": 225,
                        "sourceString": "house MyHouse {
    global x: int;

    handle JOIN {
        let x: int = 0;
        x += 1;
        x -= 1;
        x *= 1;
        x /= 1;
        global.x += 1;
        global.x -= 1;
        global.x *= 1;
        global.x /= 1;
    }
}",
                        "startIdx": 219,
                      },
                    },
                  },
                  "source": {
                    "interval": Interval {
                      "endIdx": 225,
                      "sourceString": "house MyHouse {
    global x: int;

    handle JOIN {
        let x: int = 0;
        x += 1;
        x -= 1;
        x *= 1;
        x /= 1;
        global.x += 1;
        global.x -= 1;
        global.x *= 1;
        global.x /= 1;
    }
}",
                      "startIdx": 219,
                    },
                  },
                },
              },
              "op": "/",
              "source": {
                "interval": Interval {
                  "endIdx": 233,
                  "sourceString": "house MyHouse {
    global x: int;

    handle JOIN {
        let x: int = 0;
        x += 1;
        x -= 1;
        x *= 1;
        x /= 1;
        global.x += 1;
        global.x -= 1;
        global.x *= 1;
        global.x /= 1;
    }
}",
                  "startIdx": 219,
                },
              },
              "value": {
                "id": 48,
                "kind": "integerLiteral",
                "source": {
                  "interval": Interval {
                    "_contents": "1",
                    "endIdx": 232,
                    "sourceString": "house MyHouse {
    global x: int;

    handle JOIN {
        let x: int = 0;
        x += 1;
        x -= 1;
        x *= 1;
        x /= 1;
        global.x += 1;
        global.x -= 1;
        global.x *= 1;
        global.x /= 1;
    }
}",
                    "startIdx": 231,
                  },
                },
                "value": "1",
              },
            },
          ],
        },
      ],
      "kind": "house",
      "name": {
        "id": 1,
        "kind": "id",
        "name": "MyHouse",
        "source": {
          "interval": Interval {
            "_contents": "MyHouse",
            "endIdx": 13,
            "sourceString": "house MyHouse {
    global x: int;

    handle JOIN {
        let x: int = 0;
        x += 1;
        x -= 1;
        x *= 1;
        x /= 1;
        global.x += 1;
        global.x -= 1;
        global.x *= 1;
        global.x /= 1;
    }
}",
            "startIdx": 6,
          },
        },
      },
      "source": {
        "interval": Interval {
          "endIdx": 241,
          "sourceString": "house MyHouse {
    global x: int;

    handle JOIN {
        let x: int = 0;
        x += 1;
        x -= 1;
        x *= 1;
        x /= 1;
        global.x += 1;
        global.x -= 1;
        global.x *= 1;
        global.x /= 1;
    }
}",
          "startIdx": 0,
        },
      },
    },
  ],
  "kind": "module",
  "source": {
    "interval": Interval {
      "endIdx": 241,
      "sourceString": "house MyHouse {
    global x: int;

    handle JOIN {
        let x: int = 0;
        x += 1;
        x -= 1;
        x *= 1;
        x /= 1;
        global.x += 1;
        global.x -= 1;
        global.x *= 1;
        global.x /= 1;
    }
}",
      "startIdx": 0,
    },
  },
}
`;

exports[`Grammar should parse binary-operator 1`] = `
{
  "id": 11,
  "items": [
    {
      "id": 10,
      "items": [
        {
          "event": {
            "id": 2,
            "kind": "id",
            "name": "BLOCK_BREAK",
            "source": {
              "interval": Interval {
                "_contents": "BLOCK_BREAK",
                "endIdx": 38,
                "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        x = 5 + 3;
    }
}
",
                "startIdx": 27,
              },
            },
          },
          "id": 9,
          "kind": "handler",
          "source": {
            "interval": Interval {
              "endIdx": 65,
              "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        x = 5 + 3;
    }
}
",
              "startIdx": 20,
            },
          },
          "statements": [
            {
              "id": 8,
              "kind": "statementAssign",
              "lvalue": {
                "id": 4,
                "kind": "expressionId",
                "name": {
                  "id": 3,
                  "kind": "id",
                  "name": "x",
                  "source": {
                    "interval": Interval {
                      "_contents": "x",
                      "endIdx": 50,
                      "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        x = 5 + 3;
    }
}
",
                      "startIdx": 49,
                    },
                  },
                },
                "source": {
                  "interval": Interval {
                    "endIdx": 50,
                    "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        x = 5 + 3;
    }
}
",
                    "startIdx": 49,
                  },
                },
              },
              "source": {
                "interval": Interval {
                  "endIdx": 59,
                  "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        x = 5 + 3;
    }
}
",
                  "startIdx": 49,
                },
              },
              "value": {
                "id": 7,
                "kind": "expressionBinary",
                "left": {
                  "id": 5,
                  "kind": "integerLiteral",
                  "source": {
                    "interval": Interval {
                      "_contents": "5",
                      "endIdx": 54,
                      "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        x = 5 + 3;
    }
}
",
                      "startIdx": 53,
                    },
                  },
                  "value": "5",
                },
                "op": "+",
                "right": {
                  "id": 6,
                  "kind": "integerLiteral",
                  "source": {
                    "interval": Interval {
                      "_contents": "3",
                      "endIdx": 58,
                      "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        x = 5 + 3;
    }
}
",
                      "startIdx": 57,
                    },
                  },
                  "value": "3",
                },
                "source": {
                  "interval": Interval {
                    "endIdx": 58,
                    "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        x = 5 + 3;
    }
}
",
                    "startIdx": 53,
                  },
                },
              },
            },
          ],
        },
      ],
      "kind": "house",
      "name": {
        "id": 1,
        "kind": "id",
        "name": "MyHouse",
        "source": {
          "interval": Interval {
            "_contents": "MyHouse",
            "endIdx": 13,
            "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        x = 5 + 3;
    }
}
",
            "startIdx": 6,
          },
        },
      },
      "source": {
        "interval": Interval {
          "endIdx": 67,
          "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        x = 5 + 3;
    }
}
",
          "startIdx": 0,
        },
      },
    },
  ],
  "kind": "module",
  "source": {
    "interval": Interval {
      "endIdx": 68,
      "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        x = 5 + 3;
    }
}
",
      "startIdx": 0,
    },
  },
}
`;

exports[`Grammar should parse booleans 1`] = `
{
  "id": 23,
  "items": [
    {
      "id": 22,
      "items": [
        {
          "event": {
            "id": 2,
            "kind": "id",
            "name": "BLOCK_BREAK",
            "source": {
              "interval": Interval {
                "_contents": "BLOCK_BREAK",
                "endIdx": 38,
                "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        let x: bool = true;
        let y: bool = false;
        let z: bool = x && y && true;
    }
}
",
                "startIdx": 27,
              },
            },
          },
          "id": 21,
          "kind": "handler",
          "source": {
            "interval": Interval {
              "endIdx": 141,
              "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        let x: bool = true;
        let y: bool = false;
        let z: bool = x && y && true;
    }
}
",
              "startIdx": 20,
            },
          },
          "statements": [
            {
              "id": 6,
              "kind": "statementLet",
              "name": {
                "id": 3,
                "kind": "id",
                "name": "x",
                "source": {
                  "interval": Interval {
                    "_contents": "x",
                    "endIdx": 54,
                    "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        let x: bool = true;
        let y: bool = false;
        let z: bool = x && y && true;
    }
}
",
                    "startIdx": 53,
                  },
                },
              },
              "source": {
                "interval": Interval {
                  "endIdx": 68,
                  "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        let x: bool = true;
        let y: bool = false;
        let z: bool = x && y && true;
    }
}
",
                  "startIdx": 49,
                },
              },
              "type": {
                "id": 4,
                "kind": "id",
                "name": "bool",
                "source": {
                  "interval": Interval {
                    "_contents": "bool",
                    "endIdx": 60,
                    "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        let x: bool = true;
        let y: bool = false;
        let z: bool = x && y && true;
    }
}
",
                    "startIdx": 56,
                  },
                },
              },
              "value": {
                "id": 5,
                "kind": "booleanLiteral",
                "source": {
                  "interval": Interval {
                    "_contents": "true",
                    "endIdx": 67,
                    "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        let x: bool = true;
        let y: bool = false;
        let z: bool = x && y && true;
    }
}
",
                    "startIdx": 63,
                  },
                },
                "value": true,
              },
            },
            {
              "id": 10,
              "kind": "statementLet",
              "name": {
                "id": 7,
                "kind": "id",
                "name": "y",
                "source": {
                  "interval": Interval {
                    "_contents": "y",
                    "endIdx": 82,
                    "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        let x: bool = true;
        let y: bool = false;
        let z: bool = x && y && true;
    }
}
",
                    "startIdx": 81,
                  },
                },
              },
              "source": {
                "interval": Interval {
                  "endIdx": 97,
                  "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        let x: bool = true;
        let y: bool = false;
        let z: bool = x && y && true;
    }
}
",
                  "startIdx": 77,
                },
              },
              "type": {
                "id": 8,
                "kind": "id",
                "name": "bool",
                "source": {
                  "interval": Interval {
                    "_contents": "bool",
                    "endIdx": 88,
                    "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        let x: bool = true;
        let y: bool = false;
        let z: bool = x && y && true;
    }
}
",
                    "startIdx": 84,
                  },
                },
              },
              "value": {
                "id": 9,
                "kind": "booleanLiteral",
                "source": {
                  "interval": Interval {
                    "_contents": "false",
                    "endIdx": 96,
                    "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        let x: bool = true;
        let y: bool = false;
        let z: bool = x && y && true;
    }
}
",
                    "startIdx": 91,
                  },
                },
                "value": false,
              },
            },
            {
              "id": 20,
              "kind": "statementLet",
              "name": {
                "id": 11,
                "kind": "id",
                "name": "z",
                "source": {
                  "interval": Interval {
                    "_contents": "z",
                    "endIdx": 111,
                    "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        let x: bool = true;
        let y: bool = false;
        let z: bool = x && y && true;
    }
}
",
                    "startIdx": 110,
                  },
                },
              },
              "source": {
                "interval": Interval {
                  "endIdx": 135,
                  "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        let x: bool = true;
        let y: bool = false;
        let z: bool = x && y && true;
    }
}
",
                  "startIdx": 106,
                },
              },
              "type": {
                "id": 12,
                "kind": "id",
                "name": "bool",
                "source": {
                  "interval": Interval {
                    "_contents": "bool",
                    "endIdx": 117,
                    "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        let x: bool = true;
        let y: bool = false;
        let z: bool = x && y && true;
    }
}
",
                    "startIdx": 113,
                  },
                },
              },
              "value": {
                "id": 19,
                "kind": "expressionBinary",
                "left": {
                  "id": 17,
                  "kind": "expressionBinary",
                  "left": {
                    "id": 14,
                    "kind": "expressionId",
                    "name": {
                      "id": 13,
                      "kind": "id",
                      "name": "x",
                      "source": {
                        "interval": Interval {
                          "_contents": "x",
                          "endIdx": 121,
                          "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        let x: bool = true;
        let y: bool = false;
        let z: bool = x && y && true;
    }
}
",
                          "startIdx": 120,
                        },
                      },
                    },
                    "source": {
                      "interval": Interval {
                        "endIdx": 121,
                        "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        let x: bool = true;
        let y: bool = false;
        let z: bool = x && y && true;
    }
}
",
                        "startIdx": 120,
                      },
                    },
                  },
                  "op": "&&",
                  "right": {
                    "id": 16,
                    "kind": "expressionId",
                    "name": {
                      "id": 15,
                      "kind": "id",
                      "name": "y",
                      "source": {
                        "interval": Interval {
                          "_contents": "y",
                          "endIdx": 126,
                          "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        let x: bool = true;
        let y: bool = false;
        let z: bool = x && y && true;
    }
}
",
                          "startIdx": 125,
                        },
                      },
                    },
                    "source": {
                      "interval": Interval {
                        "endIdx": 126,
                        "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        let x: bool = true;
        let y: bool = false;
        let z: bool = x && y && true;
    }
}
",
                        "startIdx": 125,
                      },
                    },
                  },
                  "source": {
                    "interval": Interval {
                      "endIdx": 126,
                      "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        let x: bool = true;
        let y: bool = false;
        let z: bool = x && y && true;
    }
}
",
                      "startIdx": 120,
                    },
                  },
                },
                "op": "&&",
                "right": {
                  "id": 18,
                  "kind": "booleanLiteral",
                  "source": {
                    "interval": Interval {
                      "_contents": "true",
                      "endIdx": 134,
                      "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        let x: bool = true;
        let y: bool = false;
        let z: bool = x && y && true;
    }
}
",
                      "startIdx": 130,
                    },
                  },
                  "value": true,
                },
                "source": {
                  "interval": Interval {
                    "endIdx": 134,
                    "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        let x: bool = true;
        let y: bool = false;
        let z: bool = x && y && true;
    }
}
",
                    "startIdx": 120,
                  },
                },
              },
            },
          ],
        },
      ],
      "kind": "house",
      "name": {
        "id": 1,
        "kind": "id",
        "name": "MyHouse",
        "source": {
          "interval": Interval {
            "_contents": "MyHouse",
            "endIdx": 13,
            "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        let x: bool = true;
        let y: bool = false;
        let z: bool = x && y && true;
    }
}
",
            "startIdx": 6,
          },
        },
      },
      "source": {
        "interval": Interval {
          "endIdx": 143,
          "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        let x: bool = true;
        let y: bool = false;
        let z: bool = x && y && true;
    }
}
",
          "startIdx": 0,
        },
      },
    },
  ],
  "kind": "module",
  "source": {
    "interval": Interval {
      "endIdx": 144,
      "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        let x: bool = true;
        let y: bool = false;
        let z: bool = x && y && true;
    }
}
",
      "startIdx": 0,
    },
  },
}
`;

exports[`Grammar should parse constants 1`] = `
{
  "id": 21,
  "items": [
    {
      "id": 20,
      "items": [
        {
          "event": {
            "id": 2,
            "kind": "id",
            "name": "BLOCK_BREAK",
            "source": {
              "interval": Interval {
                "_contents": "BLOCK_BREAK",
                "endIdx": 38,
                "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        let x: int = 5;
        const y: int = 10;
        const z: int = x + y;
    }
}
",
                "startIdx": 27,
              },
            },
          },
          "id": 19,
          "kind": "handler",
          "source": {
            "interval": Interval {
              "endIdx": 127,
              "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        let x: int = 5;
        const y: int = 10;
        const z: int = x + y;
    }
}
",
              "startIdx": 20,
            },
          },
          "statements": [
            {
              "id": 6,
              "kind": "statementLet",
              "name": {
                "id": 3,
                "kind": "id",
                "name": "x",
                "source": {
                  "interval": Interval {
                    "_contents": "x",
                    "endIdx": 54,
                    "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        let x: int = 5;
        const y: int = 10;
        const z: int = x + y;
    }
}
",
                    "startIdx": 53,
                  },
                },
              },
              "source": {
                "interval": Interval {
                  "endIdx": 64,
                  "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        let x: int = 5;
        const y: int = 10;
        const z: int = x + y;
    }
}
",
                  "startIdx": 49,
                },
              },
              "type": {
                "id": 4,
                "kind": "id",
                "name": "int",
                "source": {
                  "interval": Interval {
                    "_contents": "int",
                    "endIdx": 59,
                    "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        let x: int = 5;
        const y: int = 10;
        const z: int = x + y;
    }
}
",
                    "startIdx": 56,
                  },
                },
              },
              "value": {
                "id": 5,
                "kind": "integerLiteral",
                "source": {
                  "interval": Interval {
                    "_contents": "5",
                    "endIdx": 63,
                    "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        let x: int = 5;
        const y: int = 10;
        const z: int = x + y;
    }
}
",
                    "startIdx": 62,
                  },
                },
                "value": "5",
              },
            },
            {
              "id": 10,
              "kind": "statementConst",
              "name": {
                "id": 7,
                "kind": "id",
                "name": "y",
                "source": {
                  "interval": Interval {
                    "_contents": "y",
                    "endIdx": 80,
                    "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        let x: int = 5;
        const y: int = 10;
        const z: int = x + y;
    }
}
",
                    "startIdx": 79,
                  },
                },
              },
              "source": {
                "interval": Interval {
                  "endIdx": 91,
                  "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        let x: int = 5;
        const y: int = 10;
        const z: int = x + y;
    }
}
",
                  "startIdx": 73,
                },
              },
              "type": {
                "id": 8,
                "kind": "id",
                "name": "int",
                "source": {
                  "interval": Interval {
                    "_contents": "int",
                    "endIdx": 85,
                    "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        let x: int = 5;
        const y: int = 10;
        const z: int = x + y;
    }
}
",
                    "startIdx": 82,
                  },
                },
              },
              "value": {
                "id": 9,
                "kind": "integerLiteral",
                "source": {
                  "interval": Interval {
                    "_contents": "10",
                    "endIdx": 90,
                    "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        let x: int = 5;
        const y: int = 10;
        const z: int = x + y;
    }
}
",
                    "startIdx": 88,
                  },
                },
                "value": "10",
              },
            },
            {
              "id": 18,
              "kind": "statementConst",
              "name": {
                "id": 11,
                "kind": "id",
                "name": "z",
                "source": {
                  "interval": Interval {
                    "_contents": "z",
                    "endIdx": 107,
                    "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        let x: int = 5;
        const y: int = 10;
        const z: int = x + y;
    }
}
",
                    "startIdx": 106,
                  },
                },
              },
              "source": {
                "interval": Interval {
                  "endIdx": 121,
                  "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        let x: int = 5;
        const y: int = 10;
        const z: int = x + y;
    }
}
",
                  "startIdx": 100,
                },
              },
              "type": {
                "id": 12,
                "kind": "id",
                "name": "int",
                "source": {
                  "interval": Interval {
                    "_contents": "int",
                    "endIdx": 112,
                    "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        let x: int = 5;
        const y: int = 10;
        const z: int = x + y;
    }
}
",
                    "startIdx": 109,
                  },
                },
              },
              "value": {
                "id": 17,
                "kind": "expressionBinary",
                "left": {
                  "id": 14,
                  "kind": "expressionId",
                  "name": {
                    "id": 13,
                    "kind": "id",
                    "name": "x",
                    "source": {
                      "interval": Interval {
                        "_contents": "x",
                        "endIdx": 116,
                        "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        let x: int = 5;
        const y: int = 10;
        const z: int = x + y;
    }
}
",
                        "startIdx": 115,
                      },
                    },
                  },
                  "source": {
                    "interval": Interval {
                      "endIdx": 116,
                      "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        let x: int = 5;
        const y: int = 10;
        const z: int = x + y;
    }
}
",
                      "startIdx": 115,
                    },
                  },
                },
                "op": "+",
                "right": {
                  "id": 16,
                  "kind": "expressionId",
                  "name": {
                    "id": 15,
                    "kind": "id",
                    "name": "y",
                    "source": {
                      "interval": Interval {
                        "_contents": "y",
                        "endIdx": 120,
                        "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        let x: int = 5;
        const y: int = 10;
        const z: int = x + y;
    }
}
",
                        "startIdx": 119,
                      },
                    },
                  },
                  "source": {
                    "interval": Interval {
                      "endIdx": 120,
                      "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        let x: int = 5;
        const y: int = 10;
        const z: int = x + y;
    }
}
",
                      "startIdx": 119,
                    },
                  },
                },
                "source": {
                  "interval": Interval {
                    "endIdx": 120,
                    "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        let x: int = 5;
        const y: int = 10;
        const z: int = x + y;
    }
}
",
                    "startIdx": 115,
                  },
                },
              },
            },
          ],
        },
      ],
      "kind": "house",
      "name": {
        "id": 1,
        "kind": "id",
        "name": "MyHouse",
        "source": {
          "interval": Interval {
            "_contents": "MyHouse",
            "endIdx": 13,
            "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        let x: int = 5;
        const y: int = 10;
        const z: int = x + y;
    }
}
",
            "startIdx": 6,
          },
        },
      },
      "source": {
        "interval": Interval {
          "endIdx": 129,
          "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        let x: int = 5;
        const y: int = 10;
        const z: int = x + y;
    }
}
",
          "startIdx": 0,
        },
      },
    },
  ],
  "kind": "module",
  "source": {
    "interval": Interval {
      "endIdx": 130,
      "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        let x: int = 5;
        const y: int = 10;
        const z: int = x + y;
    }
}
",
      "startIdx": 0,
    },
  },
}
`;

exports[`Grammar should parse field-access 1`] = `
{
  "id": 29,
  "items": [
    {
      "id": 28,
      "items": [
        {
          "event": {
            "id": 2,
            "kind": "id",
            "name": "BLOCK_BREAK",
            "source": {
              "interval": Interval {
                "_contents": "BLOCK_BREAK",
                "endIdx": 38,
                "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        self.x = 10;
        self.x.y = 10;
        self.x.y.z = 10;
    }
}
",
                "startIdx": 27,
              },
            },
          },
          "id": 27,
          "kind": "handler",
          "source": {
            "interval": Interval {
              "endIdx": 115,
              "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        self.x = 10;
        self.x.y = 10;
        self.x.y.z = 10;
    }
}
",
              "startIdx": 20,
            },
          },
          "statements": [
            {
              "id": 8,
              "kind": "statementAssign",
              "lvalue": {
                "field": {
                  "id": 5,
                  "kind": "id",
                  "name": "x",
                  "source": {
                    "interval": Interval {
                      "_contents": "x",
                      "endIdx": 55,
                      "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        self.x = 10;
        self.x.y = 10;
        self.x.y.z = 10;
    }
}
",
                      "startIdx": 54,
                    },
                  },
                },
                "id": 6,
                "kind": "expressionField",
                "source": {
                  "interval": Interval {
                    "endIdx": 55,
                    "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        self.x = 10;
        self.x.y = 10;
        self.x.y.z = 10;
    }
}
",
                    "startIdx": 49,
                  },
                },
                "struct": {
                  "id": 4,
                  "kind": "expressionId",
                  "name": {
                    "id": 3,
                    "kind": "id",
                    "name": "self",
                    "source": {
                      "interval": Interval {
                        "_contents": "self",
                        "endIdx": 53,
                        "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        self.x = 10;
        self.x.y = 10;
        self.x.y.z = 10;
    }
}
",
                        "startIdx": 49,
                      },
                    },
                  },
                  "source": {
                    "interval": Interval {
                      "endIdx": 53,
                      "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        self.x = 10;
        self.x.y = 10;
        self.x.y.z = 10;
    }
}
",
                      "startIdx": 49,
                    },
                  },
                },
              },
              "source": {
                "interval": Interval {
                  "endIdx": 61,
                  "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        self.x = 10;
        self.x.y = 10;
        self.x.y.z = 10;
    }
}
",
                  "startIdx": 49,
                },
              },
              "value": {
                "id": 7,
                "kind": "integerLiteral",
                "source": {
                  "interval": Interval {
                    "_contents": "10",
                    "endIdx": 60,
                    "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        self.x = 10;
        self.x.y = 10;
        self.x.y.z = 10;
    }
}
",
                    "startIdx": 58,
                  },
                },
                "value": "10",
              },
            },
            {
              "id": 16,
              "kind": "statementAssign",
              "lvalue": {
                "field": {
                  "id": 13,
                  "kind": "id",
                  "name": "y",
                  "source": {
                    "interval": Interval {
                      "_contents": "y",
                      "endIdx": 78,
                      "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        self.x = 10;
        self.x.y = 10;
        self.x.y.z = 10;
    }
}
",
                      "startIdx": 77,
                    },
                  },
                },
                "id": 14,
                "kind": "expressionField",
                "source": {
                  "interval": Interval {
                    "endIdx": 78,
                    "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        self.x = 10;
        self.x.y = 10;
        self.x.y.z = 10;
    }
}
",
                    "startIdx": 70,
                  },
                },
                "struct": {
                  "field": {
                    "id": 11,
                    "kind": "id",
                    "name": "x",
                    "source": {
                      "interval": Interval {
                        "_contents": "x",
                        "endIdx": 76,
                        "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        self.x = 10;
        self.x.y = 10;
        self.x.y.z = 10;
    }
}
",
                        "startIdx": 75,
                      },
                    },
                  },
                  "id": 12,
                  "kind": "expressionField",
                  "source": {
                    "interval": Interval {
                      "endIdx": 76,
                      "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        self.x = 10;
        self.x.y = 10;
        self.x.y.z = 10;
    }
}
",
                      "startIdx": 70,
                    },
                  },
                  "struct": {
                    "id": 10,
                    "kind": "expressionId",
                    "name": {
                      "id": 9,
                      "kind": "id",
                      "name": "self",
                      "source": {
                        "interval": Interval {
                          "_contents": "self",
                          "endIdx": 74,
                          "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        self.x = 10;
        self.x.y = 10;
        self.x.y.z = 10;
    }
}
",
                          "startIdx": 70,
                        },
                      },
                    },
                    "source": {
                      "interval": Interval {
                        "endIdx": 74,
                        "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        self.x = 10;
        self.x.y = 10;
        self.x.y.z = 10;
    }
}
",
                        "startIdx": 70,
                      },
                    },
                  },
                },
              },
              "source": {
                "interval": Interval {
                  "endIdx": 84,
                  "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        self.x = 10;
        self.x.y = 10;
        self.x.y.z = 10;
    }
}
",
                  "startIdx": 70,
                },
              },
              "value": {
                "id": 15,
                "kind": "integerLiteral",
                "source": {
                  "interval": Interval {
                    "_contents": "10",
                    "endIdx": 83,
                    "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        self.x = 10;
        self.x.y = 10;
        self.x.y.z = 10;
    }
}
",
                    "startIdx": 81,
                  },
                },
                "value": "10",
              },
            },
            {
              "id": 26,
              "kind": "statementAssign",
              "lvalue": {
                "field": {
                  "id": 23,
                  "kind": "id",
                  "name": "z",
                  "source": {
                    "interval": Interval {
                      "_contents": "z",
                      "endIdx": 103,
                      "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        self.x = 10;
        self.x.y = 10;
        self.x.y.z = 10;
    }
}
",
                      "startIdx": 102,
                    },
                  },
                },
                "id": 24,
                "kind": "expressionField",
                "source": {
                  "interval": Interval {
                    "endIdx": 103,
                    "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        self.x = 10;
        self.x.y = 10;
        self.x.y.z = 10;
    }
}
",
                    "startIdx": 93,
                  },
                },
                "struct": {
                  "field": {
                    "id": 21,
                    "kind": "id",
                    "name": "y",
                    "source": {
                      "interval": Interval {
                        "_contents": "y",
                        "endIdx": 101,
                        "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        self.x = 10;
        self.x.y = 10;
        self.x.y.z = 10;
    }
}
",
                        "startIdx": 100,
                      },
                    },
                  },
                  "id": 22,
                  "kind": "expressionField",
                  "source": {
                    "interval": Interval {
                      "endIdx": 101,
                      "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        self.x = 10;
        self.x.y = 10;
        self.x.y.z = 10;
    }
}
",
                      "startIdx": 93,
                    },
                  },
                  "struct": {
                    "field": {
                      "id": 19,
                      "kind": "id",
                      "name": "x",
                      "source": {
                        "interval": Interval {
                          "_contents": "x",
                          "endIdx": 99,
                          "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        self.x = 10;
        self.x.y = 10;
        self.x.y.z = 10;
    }
}
",
                          "startIdx": 98,
                        },
                      },
                    },
                    "id": 20,
                    "kind": "expressionField",
                    "source": {
                      "interval": Interval {
                        "endIdx": 99,
                        "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        self.x = 10;
        self.x.y = 10;
        self.x.y.z = 10;
    }
}
",
                        "startIdx": 93,
                      },
                    },
                    "struct": {
                      "id": 18,
                      "kind": "expressionId",
                      "name": {
                        "id": 17,
                        "kind": "id",
                        "name": "self",
                        "source": {
                          "interval": Interval {
                            "_contents": "self",
                            "endIdx": 97,
                            "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        self.x = 10;
        self.x.y = 10;
        self.x.y.z = 10;
    }
}
",
                            "startIdx": 93,
                          },
                        },
                      },
                      "source": {
                        "interval": Interval {
                          "endIdx": 97,
                          "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        self.x = 10;
        self.x.y = 10;
        self.x.y.z = 10;
    }
}
",
                          "startIdx": 93,
                        },
                      },
                    },
                  },
                },
              },
              "source": {
                "interval": Interval {
                  "endIdx": 109,
                  "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        self.x = 10;
        self.x.y = 10;
        self.x.y.z = 10;
    }
}
",
                  "startIdx": 93,
                },
              },
              "value": {
                "id": 25,
                "kind": "integerLiteral",
                "source": {
                  "interval": Interval {
                    "_contents": "10",
                    "endIdx": 108,
                    "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        self.x = 10;
        self.x.y = 10;
        self.x.y.z = 10;
    }
}
",
                    "startIdx": 106,
                  },
                },
                "value": "10",
              },
            },
          ],
        },
      ],
      "kind": "house",
      "name": {
        "id": 1,
        "kind": "id",
        "name": "MyHouse",
        "source": {
          "interval": Interval {
            "_contents": "MyHouse",
            "endIdx": 13,
            "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        self.x = 10;
        self.x.y = 10;
        self.x.y.z = 10;
    }
}
",
            "startIdx": 6,
          },
        },
      },
      "source": {
        "interval": Interval {
          "endIdx": 117,
          "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        self.x = 10;
        self.x.y = 10;
        self.x.y.z = 10;
    }
}
",
          "startIdx": 0,
        },
      },
    },
  ],
  "kind": "module",
  "source": {
    "interval": Interval {
      "endIdx": 118,
      "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        self.x = 10;
        self.x.y = 10;
        self.x.y.z = 10;
    }
}
",
      "startIdx": 0,
    },
  },
}
`;

exports[`Grammar should parse field-access2 1`] = `
{
  "id": 11,
  "items": [
    {
      "id": 10,
      "items": [
        {
          "event": {
            "id": 2,
            "kind": "id",
            "name": "BLOCK_BREAK",
            "source": {
              "interval": Interval {
                "_contents": "BLOCK_BREAK",
                "endIdx": 38,
                "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        global.x = 123;
    }
}
",
                "startIdx": 27,
              },
            },
          },
          "id": 9,
          "kind": "handler",
          "source": {
            "interval": Interval {
              "endIdx": 70,
              "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        global.x = 123;
    }
}
",
              "startIdx": 20,
            },
          },
          "statements": [
            {
              "id": 8,
              "kind": "statementAssign",
              "lvalue": {
                "field": {
                  "id": 5,
                  "kind": "id",
                  "name": "x",
                  "source": {
                    "interval": Interval {
                      "_contents": "x",
                      "endIdx": 57,
                      "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        global.x = 123;
    }
}
",
                      "startIdx": 56,
                    },
                  },
                },
                "id": 6,
                "kind": "expressionField",
                "source": {
                  "interval": Interval {
                    "endIdx": 57,
                    "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        global.x = 123;
    }
}
",
                    "startIdx": 49,
                  },
                },
                "struct": {
                  "id": 4,
                  "kind": "expressionId",
                  "name": {
                    "id": 3,
                    "kind": "id",
                    "name": "global",
                    "source": {
                      "interval": Interval {
                        "_contents": "global",
                        "endIdx": 55,
                        "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        global.x = 123;
    }
}
",
                        "startIdx": 49,
                      },
                    },
                  },
                  "source": {
                    "interval": Interval {
                      "endIdx": 55,
                      "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        global.x = 123;
    }
}
",
                      "startIdx": 49,
                    },
                  },
                },
              },
              "source": {
                "interval": Interval {
                  "endIdx": 64,
                  "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        global.x = 123;
    }
}
",
                  "startIdx": 49,
                },
              },
              "value": {
                "id": 7,
                "kind": "integerLiteral",
                "source": {
                  "interval": Interval {
                    "_contents": "123",
                    "endIdx": 63,
                    "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        global.x = 123;
    }
}
",
                    "startIdx": 60,
                  },
                },
                "value": "123",
              },
            },
          ],
        },
      ],
      "kind": "house",
      "name": {
        "id": 1,
        "kind": "id",
        "name": "MyHouse",
        "source": {
          "interval": Interval {
            "_contents": "MyHouse",
            "endIdx": 13,
            "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        global.x = 123;
    }
}
",
            "startIdx": 6,
          },
        },
      },
      "source": {
        "interval": Interval {
          "endIdx": 72,
          "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        global.x = 123;
    }
}
",
          "startIdx": 0,
        },
      },
    },
  ],
  "kind": "module",
  "source": {
    "interval": Interval {
      "endIdx": 73,
      "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        global.x = 123;
    }
}
",
      "startIdx": 0,
    },
  },
}
`;

exports[`Grammar should parse id 1`] = `
{
  "id": 8,
  "items": [
    {
      "id": 7,
      "items": [
        {
          "event": {
            "id": 2,
            "kind": "id",
            "name": "BLOCK_BREAK",
            "source": {
              "interval": Interval {
                "_contents": "BLOCK_BREAK",
                "endIdx": 38,
                "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        myVar;
    }
}
",
                "startIdx": 27,
              },
            },
          },
          "id": 6,
          "kind": "handler",
          "source": {
            "interval": Interval {
              "endIdx": 61,
              "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        myVar;
    }
}
",
              "startIdx": 20,
            },
          },
          "statements": [
            {
              "expression": {
                "id": 4,
                "kind": "expressionId",
                "name": {
                  "id": 3,
                  "kind": "id",
                  "name": "myVar",
                  "source": {
                    "interval": Interval {
                      "_contents": "myVar",
                      "endIdx": 54,
                      "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        myVar;
    }
}
",
                      "startIdx": 49,
                    },
                  },
                },
                "source": {
                  "interval": Interval {
                    "endIdx": 54,
                    "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        myVar;
    }
}
",
                    "startIdx": 49,
                  },
                },
              },
              "id": 5,
              "kind": "statementExpression",
              "source": {
                "interval": Interval {
                  "endIdx": 55,
                  "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        myVar;
    }
}
",
                  "startIdx": 49,
                },
              },
            },
          ],
        },
      ],
      "kind": "house",
      "name": {
        "id": 1,
        "kind": "id",
        "name": "MyHouse",
        "source": {
          "interval": Interval {
            "_contents": "MyHouse",
            "endIdx": 13,
            "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        myVar;
    }
}
",
            "startIdx": 6,
          },
        },
      },
      "source": {
        "interval": Interval {
          "endIdx": 63,
          "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        myVar;
    }
}
",
          "startIdx": 0,
        },
      },
    },
  ],
  "kind": "module",
  "source": {
    "interval": Interval {
      "endIdx": 64,
      "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        myVar;
    }
}
",
      "startIdx": 0,
    },
  },
}
`;

exports[`Grammar should parse if-statement 1`] = `
{
  "id": 14,
  "items": [
    {
      "id": 13,
      "items": [
        {
          "event": {
            "id": 2,
            "kind": "id",
            "name": "BLOCK_BREAK",
            "source": {
              "interval": Interval {
                "_contents": "BLOCK_BREAK",
                "endIdx": 38,
                "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        if (x == 5) {
            y = 10;
        }
    }
}
",
                "startIdx": 27,
              },
            },
          },
          "id": 12,
          "kind": "handler",
          "source": {
            "interval": Interval {
              "endIdx": 98,
              "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        if (x == 5) {
            y = 10;
        }
    }
}
",
              "startIdx": 20,
            },
          },
          "statements": [
            {
              "condition": {
                "id": 6,
                "kind": "expressionBinary",
                "left": {
                  "id": 4,
                  "kind": "expressionId",
                  "name": {
                    "id": 3,
                    "kind": "id",
                    "name": "x",
                    "source": {
                      "interval": Interval {
                        "_contents": "x",
                        "endIdx": 54,
                        "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        if (x == 5) {
            y = 10;
        }
    }
}
",
                        "startIdx": 53,
                      },
                    },
                  },
                  "source": {
                    "interval": Interval {
                      "endIdx": 54,
                      "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        if (x == 5) {
            y = 10;
        }
    }
}
",
                      "startIdx": 53,
                    },
                  },
                },
                "op": "==",
                "right": {
                  "id": 5,
                  "kind": "integerLiteral",
                  "source": {
                    "interval": Interval {
                      "_contents": "5",
                      "endIdx": 59,
                      "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        if (x == 5) {
            y = 10;
        }
    }
}
",
                      "startIdx": 58,
                    },
                  },
                  "value": "5",
                },
                "source": {
                  "interval": Interval {
                    "endIdx": 59,
                    "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        if (x == 5) {
            y = 10;
        }
    }
}
",
                    "startIdx": 53,
                  },
                },
              },
              "id": 11,
              "kind": "statementIf",
              "source": {
                "interval": Interval {
                  "endIdx": 92,
                  "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        if (x == 5) {
            y = 10;
        }
    }
}
",
                  "startIdx": 49,
                },
              },
              "then": [
                {
                  "id": 10,
                  "kind": "statementAssign",
                  "lvalue": {
                    "id": 8,
                    "kind": "expressionId",
                    "name": {
                      "id": 7,
                      "kind": "id",
                      "name": "y",
                      "source": {
                        "interval": Interval {
                          "_contents": "y",
                          "endIdx": 76,
                          "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        if (x == 5) {
            y = 10;
        }
    }
}
",
                          "startIdx": 75,
                        },
                      },
                    },
                    "source": {
                      "interval": Interval {
                        "endIdx": 76,
                        "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        if (x == 5) {
            y = 10;
        }
    }
}
",
                        "startIdx": 75,
                      },
                    },
                  },
                  "source": {
                    "interval": Interval {
                      "endIdx": 82,
                      "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        if (x == 5) {
            y = 10;
        }
    }
}
",
                      "startIdx": 75,
                    },
                  },
                  "value": {
                    "id": 9,
                    "kind": "integerLiteral",
                    "source": {
                      "interval": Interval {
                        "_contents": "10",
                        "endIdx": 81,
                        "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        if (x == 5) {
            y = 10;
        }
    }
}
",
                        "startIdx": 79,
                      },
                    },
                    "value": "10",
                  },
                },
              ],
            },
          ],
        },
      ],
      "kind": "house",
      "name": {
        "id": 1,
        "kind": "id",
        "name": "MyHouse",
        "source": {
          "interval": Interval {
            "_contents": "MyHouse",
            "endIdx": 13,
            "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        if (x == 5) {
            y = 10;
        }
    }
}
",
            "startIdx": 6,
          },
        },
      },
      "source": {
        "interval": Interval {
          "endIdx": 100,
          "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        if (x == 5) {
            y = 10;
        }
    }
}
",
          "startIdx": 0,
        },
      },
    },
  ],
  "kind": "module",
  "source": {
    "interval": Interval {
      "endIdx": 101,
      "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        if (x == 5) {
            y = 10;
        }
    }
}
",
      "startIdx": 0,
    },
  },
}
`;

exports[`Grammar should parse inline-functions 1`] = `
{
  "id": 99,
  "items": [
    {
      "id": 30,
      "kind": "function",
      "name": {
        "id": 1,
        "kind": "id",
        "name": "testFunction",
        "source": {
          "interval": Interval {
            "_contents": "testFunction",
            "endIdx": 16,
            "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
            "startIdx": 4,
          },
        },
      },
      "parameters": [
        {
          "id": 4,
          "kind": "parameter",
          "name": {
            "id": 2,
            "kind": "id",
            "name": "x",
            "source": {
              "interval": Interval {
                "_contents": "x",
                "endIdx": 18,
                "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                "startIdx": 17,
              },
            },
          },
          "source": {
            "interval": Interval {
              "endIdx": 23,
              "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
              "startIdx": 17,
            },
          },
          "type": {
            "id": 3,
            "kind": "id",
            "name": "int",
            "source": {
              "interval": Interval {
                "_contents": "int",
                "endIdx": 23,
                "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                "startIdx": 20,
              },
            },
          },
        },
        {
          "id": 7,
          "kind": "parameter",
          "name": {
            "id": 5,
            "kind": "id",
            "name": "y",
            "source": {
              "interval": Interval {
                "_contents": "y",
                "endIdx": 26,
                "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                "startIdx": 25,
              },
            },
          },
          "source": {
            "interval": Interval {
              "endIdx": 32,
              "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
              "startIdx": 25,
            },
          },
          "type": {
            "id": 6,
            "kind": "id",
            "name": "bool",
            "source": {
              "interval": Interval {
                "_contents": "bool",
                "endIdx": 32,
                "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                "startIdx": 28,
              },
            },
          },
        },
      ],
      "returnType": {
        "id": 8,
        "kind": "id",
        "name": "int",
        "source": {
          "interval": Interval {
            "_contents": "int",
            "endIdx": 38,
            "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
            "startIdx": 35,
          },
        },
      },
      "source": {
        "interval": Interval {
          "endIdx": 144,
          "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
          "startIdx": 0,
        },
      },
      "statements": [
        {
          "id": 15,
          "kind": "statementLet",
          "name": {
            "id": 9,
            "kind": "id",
            "name": "z",
            "source": {
              "interval": Interval {
                "_contents": "z",
                "endIdx": 50,
                "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                "startIdx": 49,
              },
            },
          },
          "source": {
            "interval": Interval {
              "endIdx": 64,
              "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
              "startIdx": 45,
            },
          },
          "type": {
            "id": 10,
            "kind": "id",
            "name": "int",
            "source": {
              "interval": Interval {
                "_contents": "int",
                "endIdx": 55,
                "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                "startIdx": 52,
              },
            },
          },
          "value": {
            "id": 14,
            "kind": "expressionBinary",
            "left": {
              "id": 12,
              "kind": "expressionId",
              "name": {
                "id": 11,
                "kind": "id",
                "name": "x",
                "source": {
                  "interval": Interval {
                    "_contents": "x",
                    "endIdx": 59,
                    "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                    "startIdx": 58,
                  },
                },
              },
              "source": {
                "interval": Interval {
                  "endIdx": 59,
                  "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                  "startIdx": 58,
                },
              },
            },
            "op": "+",
            "right": {
              "id": 13,
              "kind": "integerLiteral",
              "source": {
                "interval": Interval {
                  "_contents": "1",
                  "endIdx": 63,
                  "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                  "startIdx": 62,
                },
              },
              "value": "1",
            },
            "source": {
              "interval": Interval {
                "endIdx": 63,
                "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                "startIdx": 58,
              },
            },
          },
        },
        {
          "condition": {
            "id": 22,
            "kind": "expressionBinary",
            "left": {
              "id": 17,
              "kind": "expressionId",
              "name": {
                "id": 16,
                "kind": "id",
                "name": "y",
                "source": {
                  "interval": Interval {
                    "_contents": "y",
                    "endIdx": 74,
                    "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                    "startIdx": 73,
                  },
                },
              },
              "source": {
                "interval": Interval {
                  "endIdx": 74,
                  "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                  "startIdx": 73,
                },
              },
            },
            "op": "&&",
            "right": {
              "id": 21,
              "kind": "expressionBinary",
              "left": {
                "id": 19,
                "kind": "expressionId",
                "name": {
                  "id": 18,
                  "kind": "id",
                  "name": "z",
                  "source": {
                    "interval": Interval {
                      "_contents": "z",
                      "endIdx": 79,
                      "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                      "startIdx": 78,
                    },
                  },
                },
                "source": {
                  "interval": Interval {
                    "endIdx": 79,
                    "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                    "startIdx": 78,
                  },
                },
              },
              "op": ">",
              "right": {
                "id": 20,
                "kind": "integerLiteral",
                "source": {
                  "interval": Interval {
                    "_contents": "0",
                    "endIdx": 83,
                    "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                    "startIdx": 82,
                  },
                },
                "value": "0",
              },
              "source": {
                "interval": Interval {
                  "endIdx": 83,
                  "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                  "startIdx": 78,
                },
              },
            },
            "source": {
              "interval": Interval {
                "endIdx": 83,
                "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                "startIdx": 73,
              },
            },
          },
          "else": [
            {
              "expression": {
                "id": 27,
                "kind": "expressionUnary",
                "op": "-",
                "operand": {
                  "id": 26,
                  "kind": "integerLiteral",
                  "source": {
                    "interval": Interval {
                      "_contents": "1",
                      "endIdx": 135,
                      "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                      "startIdx": 134,
                    },
                  },
                  "value": "1",
                },
                "source": {
                  "interval": Interval {
                    "endIdx": 135,
                    "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                    "startIdx": 133,
                  },
                },
              },
              "id": 28,
              "kind": "statementReturn",
              "source": {
                "interval": Interval {
                  "endIdx": 136,
                  "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                  "startIdx": 126,
                },
              },
            },
          ],
          "id": 29,
          "kind": "statementIf",
          "source": {
            "interval": Interval {
              "endIdx": 142,
              "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
              "startIdx": 69,
            },
          },
          "then": [
            {
              "expression": {
                "id": 24,
                "kind": "expressionId",
                "name": {
                  "id": 23,
                  "kind": "id",
                  "name": "z",
                  "source": {
                    "interval": Interval {
                      "_contents": "z",
                      "endIdx": 103,
                      "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                      "startIdx": 102,
                    },
                  },
                },
                "source": {
                  "interval": Interval {
                    "endIdx": 103,
                    "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                    "startIdx": 102,
                  },
                },
              },
              "id": 25,
              "kind": "statementReturn",
              "source": {
                "interval": Interval {
                  "endIdx": 104,
                  "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                  "startIdx": 95,
                },
              },
            },
          ],
        },
      ],
    },
    {
      "id": 62,
      "kind": "function",
      "name": {
        "id": 31,
        "kind": "id",
        "name": "testFunction2",
        "source": {
          "interval": Interval {
            "_contents": "testFunction2",
            "endIdx": 163,
            "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
            "startIdx": 150,
          },
        },
      },
      "parameters": [
        {
          "id": 34,
          "kind": "parameter",
          "name": {
            "id": 32,
            "kind": "id",
            "name": "x",
            "source": {
              "interval": Interval {
                "_contents": "x",
                "endIdx": 165,
                "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                "startIdx": 164,
              },
            },
          },
          "source": {
            "interval": Interval {
              "endIdx": 170,
              "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
              "startIdx": 164,
            },
          },
          "type": {
            "id": 33,
            "kind": "id",
            "name": "int",
            "source": {
              "interval": Interval {
                "_contents": "int",
                "endIdx": 170,
                "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                "startIdx": 167,
              },
            },
          },
        },
        {
          "id": 37,
          "kind": "parameter",
          "name": {
            "id": 35,
            "kind": "id",
            "name": "y",
            "source": {
              "interval": Interval {
                "_contents": "y",
                "endIdx": 173,
                "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                "startIdx": 172,
              },
            },
          },
          "source": {
            "interval": Interval {
              "endIdx": 179,
              "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
              "startIdx": 172,
            },
          },
          "type": {
            "id": 36,
            "kind": "id",
            "name": "bool",
            "source": {
              "interval": Interval {
                "_contents": "bool",
                "endIdx": 179,
                "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                "startIdx": 175,
              },
            },
          },
        },
      ],
      "returnType": {
        "id": 38,
        "kind": "id",
        "name": "int",
        "source": {
          "interval": Interval {
            "_contents": "int",
            "endIdx": 185,
            "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
            "startIdx": 182,
          },
        },
      },
      "source": {
        "interval": Interval {
          "endIdx": 315,
          "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
          "startIdx": 146,
        },
      },
      "statements": [
        {
          "condition": {
            "id": 55,
            "kind": "expressionBinary",
            "left": {
              "arguments": [
                {
                  "id": 41,
                  "kind": "expressionId",
                  "name": {
                    "id": 40,
                    "kind": "id",
                    "name": "x",
                    "source": {
                      "interval": Interval {
                        "_contents": "x",
                        "endIdx": 210,
                        "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                        "startIdx": 209,
                      },
                    },
                  },
                  "source": {
                    "interval": Interval {
                      "endIdx": 210,
                      "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                      "startIdx": 209,
                    },
                  },
                },
                {
                  "id": 43,
                  "kind": "expressionId",
                  "name": {
                    "id": 42,
                    "kind": "id",
                    "name": "y",
                    "source": {
                      "interval": Interval {
                        "_contents": "y",
                        "endIdx": 213,
                        "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                        "startIdx": 212,
                      },
                    },
                  },
                  "source": {
                    "interval": Interval {
                      "endIdx": 213,
                      "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                      "startIdx": 212,
                    },
                  },
                },
              ],
              "function": {
                "id": 39,
                "kind": "id",
                "name": "testFunction",
                "source": {
                  "interval": Interval {
                    "_contents": "testFunction",
                    "endIdx": 208,
                    "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                    "startIdx": 196,
                  },
                },
              },
              "id": 44,
              "kind": "expressionCall",
              "source": {
                "interval": Interval {
                  "endIdx": 214,
                  "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                  "startIdx": 196,
                },
              },
            },
            "op": "==",
            "right": {
              "arguments": [
                {
                  "field": {
                    "id": 48,
                    "kind": "id",
                    "name": "x",
                    "source": {
                      "interval": Interval {
                        "_contents": "x",
                        "endIdx": 239,
                        "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                        "startIdx": 238,
                      },
                    },
                  },
                  "id": 49,
                  "kind": "expressionField",
                  "source": {
                    "interval": Interval {
                      "endIdx": 239,
                      "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                      "startIdx": 231,
                    },
                  },
                  "struct": {
                    "id": 47,
                    "kind": "expressionId",
                    "name": {
                      "id": 46,
                      "kind": "id",
                      "name": "global",
                      "source": {
                        "interval": Interval {
                          "_contents": "global",
                          "endIdx": 237,
                          "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                          "startIdx": 231,
                        },
                      },
                    },
                    "source": {
                      "interval": Interval {
                        "endIdx": 237,
                        "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                        "startIdx": 231,
                      },
                    },
                  },
                },
                {
                  "field": {
                    "id": 52,
                    "kind": "id",
                    "name": "y",
                    "source": {
                      "interval": Interval {
                        "_contents": "y",
                        "endIdx": 249,
                        "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                        "startIdx": 248,
                      },
                    },
                  },
                  "id": 53,
                  "kind": "expressionField",
                  "source": {
                    "interval": Interval {
                      "endIdx": 249,
                      "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                      "startIdx": 241,
                    },
                  },
                  "struct": {
                    "id": 51,
                    "kind": "expressionId",
                    "name": {
                      "id": 50,
                      "kind": "id",
                      "name": "global",
                      "source": {
                        "interval": Interval {
                          "_contents": "global",
                          "endIdx": 247,
                          "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                          "startIdx": 241,
                        },
                      },
                    },
                    "source": {
                      "interval": Interval {
                        "endIdx": 247,
                        "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                        "startIdx": 241,
                      },
                    },
                  },
                },
              ],
              "function": {
                "id": 45,
                "kind": "id",
                "name": "testFunction",
                "source": {
                  "interval": Interval {
                    "_contents": "testFunction",
                    "endIdx": 230,
                    "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                    "startIdx": 218,
                  },
                },
              },
              "id": 54,
              "kind": "expressionCall",
              "source": {
                "interval": Interval {
                  "endIdx": 250,
                  "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                  "startIdx": 218,
                },
              },
            },
            "source": {
              "interval": Interval {
                "endIdx": 250,
                "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                "startIdx": 196,
              },
            },
          },
          "else": [
            {
              "expression": {
                "id": 59,
                "kind": "expressionUnary",
                "op": "-",
                "operand": {
                  "id": 58,
                  "kind": "integerLiteral",
                  "source": {
                    "interval": Interval {
                      "_contents": "123",
                      "endIdx": 306,
                      "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                      "startIdx": 303,
                    },
                  },
                  "value": "123",
                },
                "source": {
                  "interval": Interval {
                    "endIdx": 306,
                    "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                    "startIdx": 302,
                  },
                },
              },
              "id": 60,
              "kind": "statementReturn",
              "source": {
                "interval": Interval {
                  "endIdx": 307,
                  "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                  "startIdx": 295,
                },
              },
            },
          ],
          "id": 61,
          "kind": "statementIf",
          "source": {
            "interval": Interval {
              "endIdx": 313,
              "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
              "startIdx": 192,
            },
          },
          "then": [
            {
              "expression": {
                "id": 56,
                "kind": "integerLiteral",
                "source": {
                  "interval": Interval {
                    "_contents": "123",
                    "endIdx": 272,
                    "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                    "startIdx": 269,
                  },
                },
                "value": "123",
              },
              "id": 57,
              "kind": "statementReturn",
              "source": {
                "interval": Interval {
                  "endIdx": 273,
                  "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                  "startIdx": 262,
                },
              },
            },
          ],
        },
      ],
    },
    {
      "id": 98,
      "items": [
        {
          "id": 66,
          "kind": "globalStat",
          "name": {
            "id": 64,
            "kind": "id",
            "name": "x",
            "source": {
              "interval": Interval {
                "_contents": "x",
                "endIdx": 345,
                "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                "startIdx": 344,
              },
            },
          },
          "source": {
            "interval": Interval {
              "endIdx": 351,
              "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
              "startIdx": 337,
            },
          },
          "type": {
            "id": 65,
            "kind": "id",
            "name": "int",
            "source": {
              "interval": Interval {
                "_contents": "int",
                "endIdx": 350,
                "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                "startIdx": 347,
              },
            },
          },
        },
        {
          "id": 69,
          "kind": "playerStat",
          "name": {
            "id": 67,
            "kind": "id",
            "name": "y",
            "source": {
              "interval": Interval {
                "_contents": "y",
                "endIdx": 364,
                "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                "startIdx": 363,
              },
            },
          },
          "source": {
            "interval": Interval {
              "endIdx": 371,
              "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
              "startIdx": 356,
            },
          },
          "type": {
            "id": 68,
            "kind": "id",
            "name": "bool",
            "source": {
              "interval": Interval {
                "_contents": "bool",
                "endIdx": 370,
                "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                "startIdx": 366,
              },
            },
          },
        },
        {
          "event": {
            "id": 70,
            "kind": "id",
            "name": "JOIN",
            "source": {
              "interval": Interval {
                "_contents": "JOIN",
                "endIdx": 388,
                "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                "startIdx": 384,
              },
            },
          },
          "id": 97,
          "kind": "handler",
          "source": {
            "interval": Interval {
              "endIdx": 532,
              "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
              "startIdx": 377,
            },
          },
          "statements": [
            {
              "id": 74,
              "kind": "statementLet",
              "name": {
                "id": 71,
                "kind": "id",
                "name": "x",
                "source": {
                  "interval": Interval {
                    "_contents": "x",
                    "endIdx": 404,
                    "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                    "startIdx": 403,
                  },
                },
              },
              "source": {
                "interval": Interval {
                  "endIdx": 414,
                  "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                  "startIdx": 399,
                },
              },
              "type": {
                "id": 72,
                "kind": "id",
                "name": "int",
                "source": {
                  "interval": Interval {
                    "_contents": "int",
                    "endIdx": 409,
                    "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                    "startIdx": 406,
                  },
                },
              },
              "value": {
                "id": 73,
                "kind": "integerLiteral",
                "source": {
                  "interval": Interval {
                    "_contents": "1",
                    "endIdx": 413,
                    "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                    "startIdx": 412,
                  },
                },
                "value": "1",
              },
            },
            {
              "id": 78,
              "kind": "statementLet",
              "name": {
                "id": 75,
                "kind": "id",
                "name": "y",
                "source": {
                  "interval": Interval {
                    "_contents": "y",
                    "endIdx": 428,
                    "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                    "startIdx": 427,
                  },
                },
              },
              "source": {
                "interval": Interval {
                  "endIdx": 442,
                  "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                  "startIdx": 423,
                },
              },
              "type": {
                "id": 76,
                "kind": "id",
                "name": "bool",
                "source": {
                  "interval": Interval {
                    "_contents": "bool",
                    "endIdx": 434,
                    "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                    "startIdx": 430,
                  },
                },
              },
              "value": {
                "id": 77,
                "kind": "booleanLiteral",
                "source": {
                  "interval": Interval {
                    "_contents": "true",
                    "endIdx": 441,
                    "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                    "startIdx": 437,
                  },
                },
                "value": true,
              },
            },
            {
              "id": 87,
              "kind": "statementLet",
              "name": {
                "id": 79,
                "kind": "id",
                "name": "z",
                "source": {
                  "interval": Interval {
                    "_contents": "z",
                    "endIdx": 456,
                    "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                    "startIdx": 455,
                  },
                },
              },
              "source": {
                "interval": Interval {
                  "endIdx": 484,
                  "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                  "startIdx": 451,
                },
              },
              "type": {
                "id": 80,
                "kind": "id",
                "name": "int",
                "source": {
                  "interval": Interval {
                    "_contents": "int",
                    "endIdx": 461,
                    "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                    "startIdx": 458,
                  },
                },
              },
              "value": {
                "arguments": [
                  {
                    "id": 83,
                    "kind": "expressionId",
                    "name": {
                      "id": 82,
                      "kind": "id",
                      "name": "x",
                      "source": {
                        "interval": Interval {
                          "_contents": "x",
                          "endIdx": 479,
                          "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                          "startIdx": 478,
                        },
                      },
                    },
                    "source": {
                      "interval": Interval {
                        "endIdx": 479,
                        "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                        "startIdx": 478,
                      },
                    },
                  },
                  {
                    "id": 85,
                    "kind": "expressionId",
                    "name": {
                      "id": 84,
                      "kind": "id",
                      "name": "y",
                      "source": {
                        "interval": Interval {
                          "_contents": "y",
                          "endIdx": 482,
                          "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                          "startIdx": 481,
                        },
                      },
                    },
                    "source": {
                      "interval": Interval {
                        "endIdx": 482,
                        "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                        "startIdx": 481,
                      },
                    },
                  },
                ],
                "function": {
                  "id": 81,
                  "kind": "id",
                  "name": "testFunction2",
                  "source": {
                    "interval": Interval {
                      "_contents": "testFunction2",
                      "endIdx": 477,
                      "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                      "startIdx": 464,
                    },
                  },
                },
                "id": 86,
                "kind": "expressionCall",
                "source": {
                  "interval": Interval {
                    "endIdx": 483,
                    "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                    "startIdx": 464,
                  },
                },
              },
            },
            {
              "id": 96,
              "kind": "statementLet",
              "name": {
                "id": 88,
                "kind": "id",
                "name": "z2",
                "source": {
                  "interval": Interval {
                    "_contents": "z2",
                    "endIdx": 499,
                    "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                    "startIdx": 497,
                  },
                },
              },
              "source": {
                "interval": Interval {
                  "endIdx": 526,
                  "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                  "startIdx": 493,
                },
              },
              "type": {
                "id": 89,
                "kind": "id",
                "name": "int",
                "source": {
                  "interval": Interval {
                    "_contents": "int",
                    "endIdx": 504,
                    "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                    "startIdx": 501,
                  },
                },
              },
              "value": {
                "arguments": [
                  {
                    "id": 92,
                    "kind": "expressionId",
                    "name": {
                      "id": 91,
                      "kind": "id",
                      "name": "x",
                      "source": {
                        "interval": Interval {
                          "_contents": "x",
                          "endIdx": 521,
                          "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                          "startIdx": 520,
                        },
                      },
                    },
                    "source": {
                      "interval": Interval {
                        "endIdx": 521,
                        "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                        "startIdx": 520,
                      },
                    },
                  },
                  {
                    "id": 94,
                    "kind": "expressionId",
                    "name": {
                      "id": 93,
                      "kind": "id",
                      "name": "y",
                      "source": {
                        "interval": Interval {
                          "_contents": "y",
                          "endIdx": 524,
                          "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                          "startIdx": 523,
                        },
                      },
                    },
                    "source": {
                      "interval": Interval {
                        "endIdx": 524,
                        "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                        "startIdx": 523,
                      },
                    },
                  },
                ],
                "function": {
                  "id": 90,
                  "kind": "id",
                  "name": "testFunction",
                  "source": {
                    "interval": Interval {
                      "_contents": "testFunction",
                      "endIdx": 519,
                      "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                      "startIdx": 507,
                    },
                  },
                },
                "id": 95,
                "kind": "expressionCall",
                "source": {
                  "interval": Interval {
                    "endIdx": 525,
                    "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
                    "startIdx": 507,
                  },
                },
              },
            },
          ],
        },
      ],
      "kind": "house",
      "name": {
        "id": 63,
        "kind": "id",
        "name": "MyHouse",
        "source": {
          "interval": Interval {
            "_contents": "MyHouse",
            "endIdx": 330,
            "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
            "startIdx": 323,
          },
        },
      },
      "source": {
        "interval": Interval {
          "endIdx": 534,
          "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
          "startIdx": 317,
        },
      },
    },
  ],
  "kind": "module",
  "source": {
    "interval": Interval {
      "endIdx": 534,
      "sourceString": "fun testFunction(x: int, y: bool): int {
    let z: int = x + 1;
    if (y && z > 0) {
        return z;
    } else {
        return -1;
    }
}

fun testFunction2(x: int, y: bool): int {
    if (testFunction(x, y) == testFunction(global.x, global.y)) {
        return 123;
    } else {
        return -123;
    }
}

house MyHouse {
    global x: int;
    player y: bool;

    handle JOIN {
        let x: int = 1;
        let y: bool = true;
        let z: int = testFunction2(x, y);
        let z2: int = testFunction(x, y);
    }
}",
      "startIdx": 0,
    },
  },
}
`;

exports[`Grammar should parse integer-literal 1`] = `
{
  "id": 9,
  "items": [
    {
      "id": 8,
      "items": [
        {
          "event": {
            "id": 2,
            "kind": "id",
            "name": "BLOCK_BREAK",
            "source": {
              "interval": Interval {
                "_contents": "BLOCK_BREAK",
                "endIdx": 38,
                "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        x = 42;
    }
}
",
                "startIdx": 27,
              },
            },
          },
          "id": 7,
          "kind": "handler",
          "source": {
            "interval": Interval {
              "endIdx": 62,
              "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        x = 42;
    }
}
",
              "startIdx": 20,
            },
          },
          "statements": [
            {
              "id": 6,
              "kind": "statementAssign",
              "lvalue": {
                "id": 4,
                "kind": "expressionId",
                "name": {
                  "id": 3,
                  "kind": "id",
                  "name": "x",
                  "source": {
                    "interval": Interval {
                      "_contents": "x",
                      "endIdx": 50,
                      "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        x = 42;
    }
}
",
                      "startIdx": 49,
                    },
                  },
                },
                "source": {
                  "interval": Interval {
                    "endIdx": 50,
                    "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        x = 42;
    }
}
",
                    "startIdx": 49,
                  },
                },
              },
              "source": {
                "interval": Interval {
                  "endIdx": 56,
                  "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        x = 42;
    }
}
",
                  "startIdx": 49,
                },
              },
              "value": {
                "id": 5,
                "kind": "integerLiteral",
                "source": {
                  "interval": Interval {
                    "_contents": "42",
                    "endIdx": 55,
                    "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        x = 42;
    }
}
",
                    "startIdx": 53,
                  },
                },
                "value": "42",
              },
            },
          ],
        },
      ],
      "kind": "house",
      "name": {
        "id": 1,
        "kind": "id",
        "name": "MyHouse",
        "source": {
          "interval": Interval {
            "_contents": "MyHouse",
            "endIdx": 13,
            "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        x = 42;
    }
}
",
            "startIdx": 6,
          },
        },
      },
      "source": {
        "interval": Interval {
          "endIdx": 64,
          "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        x = 42;
    }
}
",
          "startIdx": 0,
        },
      },
    },
  ],
  "kind": "module",
  "source": {
    "interval": Interval {
      "endIdx": 65,
      "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        x = 42;
    }
}
",
      "startIdx": 0,
    },
  },
}
`;

exports[`Grammar should parse let-statement 1`] = `
{
  "id": 9,
  "items": [
    {
      "id": 8,
      "items": [
        {
          "event": {
            "id": 2,
            "kind": "id",
            "name": "BLOCK_BREAK",
            "source": {
              "interval": Interval {
                "_contents": "BLOCK_BREAK",
                "endIdx": 38,
                "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        let x: int = 5;
    }
}
",
                "startIdx": 27,
              },
            },
          },
          "id": 7,
          "kind": "handler",
          "source": {
            "interval": Interval {
              "endIdx": 70,
              "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        let x: int = 5;
    }
}
",
              "startIdx": 20,
            },
          },
          "statements": [
            {
              "id": 6,
              "kind": "statementLet",
              "name": {
                "id": 3,
                "kind": "id",
                "name": "x",
                "source": {
                  "interval": Interval {
                    "_contents": "x",
                    "endIdx": 54,
                    "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        let x: int = 5;
    }
}
",
                    "startIdx": 53,
                  },
                },
              },
              "source": {
                "interval": Interval {
                  "endIdx": 64,
                  "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        let x: int = 5;
    }
}
",
                  "startIdx": 49,
                },
              },
              "type": {
                "id": 4,
                "kind": "id",
                "name": "int",
                "source": {
                  "interval": Interval {
                    "_contents": "int",
                    "endIdx": 59,
                    "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        let x: int = 5;
    }
}
",
                    "startIdx": 56,
                  },
                },
              },
              "value": {
                "id": 5,
                "kind": "integerLiteral",
                "source": {
                  "interval": Interval {
                    "_contents": "5",
                    "endIdx": 63,
                    "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        let x: int = 5;
    }
}
",
                    "startIdx": 62,
                  },
                },
                "value": "5",
              },
            },
          ],
        },
      ],
      "kind": "house",
      "name": {
        "id": 1,
        "kind": "id",
        "name": "MyHouse",
        "source": {
          "interval": Interval {
            "_contents": "MyHouse",
            "endIdx": 13,
            "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        let x: int = 5;
    }
}
",
            "startIdx": 6,
          },
        },
      },
      "source": {
        "interval": Interval {
          "endIdx": 72,
          "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        let x: int = 5;
    }
}
",
          "startIdx": 0,
        },
      },
    },
  ],
  "kind": "module",
  "source": {
    "interval": Interval {
      "endIdx": 73,
      "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        let x: int = 5;
    }
}
",
      "startIdx": 0,
    },
  },
}
`;

exports[`Grammar should parse multi-line-comments 1`] = `
{
  "id": 23,
  "items": [
    {
      "id": 22,
      "items": [
        {
          "event": {
            "id": 2,
            "kind": "id",
            "name": "BLOCK_BREAK",
            "source": {
              "interval": Interval {
                "_contents": "BLOCK_BREAK",
                "endIdx": 38,
                "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        global.x = 123; // comment
        /* comment */
        global.y = 456; /*
        // comment */

        /*


        comment

        */

        global.y /* test */ = 456;
    }
}
",
                "startIdx": 27,
              },
            },
          },
          "id": 21,
          "kind": "handler",
          "source": {
            "interval": Interval {
              "endIdx": 230,
              "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        global.x = 123; // comment
        /* comment */
        global.y = 456; /*
        // comment */

        /*


        comment

        */

        global.y /* test */ = 456;
    }
}
",
              "startIdx": 20,
            },
          },
          "statements": [
            {
              "id": 8,
              "kind": "statementAssign",
              "lvalue": {
                "field": {
                  "id": 5,
                  "kind": "id",
                  "name": "x",
                  "source": {
                    "interval": Interval {
                      "_contents": "x",
                      "endIdx": 57,
                      "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        global.x = 123; // comment
        /* comment */
        global.y = 456; /*
        // comment */

        /*


        comment

        */

        global.y /* test */ = 456;
    }
}
",
                      "startIdx": 56,
                    },
                  },
                },
                "id": 6,
                "kind": "expressionField",
                "source": {
                  "interval": Interval {
                    "endIdx": 57,
                    "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        global.x = 123; // comment
        /* comment */
        global.y = 456; /*
        // comment */

        /*


        comment

        */

        global.y /* test */ = 456;
    }
}
",
                    "startIdx": 49,
                  },
                },
                "struct": {
                  "id": 4,
                  "kind": "expressionId",
                  "name": {
                    "id": 3,
                    "kind": "id",
                    "name": "global",
                    "source": {
                      "interval": Interval {
                        "_contents": "global",
                        "endIdx": 55,
                        "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        global.x = 123; // comment
        /* comment */
        global.y = 456; /*
        // comment */

        /*


        comment

        */

        global.y /* test */ = 456;
    }
}
",
                        "startIdx": 49,
                      },
                    },
                  },
                  "source": {
                    "interval": Interval {
                      "endIdx": 55,
                      "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        global.x = 123; // comment
        /* comment */
        global.y = 456; /*
        // comment */

        /*


        comment

        */

        global.y /* test */ = 456;
    }
}
",
                      "startIdx": 49,
                    },
                  },
                },
              },
              "source": {
                "interval": Interval {
                  "endIdx": 64,
                  "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        global.x = 123; // comment
        /* comment */
        global.y = 456; /*
        // comment */

        /*


        comment

        */

        global.y /* test */ = 456;
    }
}
",
                  "startIdx": 49,
                },
              },
              "value": {
                "id": 7,
                "kind": "integerLiteral",
                "source": {
                  "interval": Interval {
                    "_contents": "123",
                    "endIdx": 63,
                    "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        global.x = 123; // comment
        /* comment */
        global.y = 456; /*
        // comment */

        /*


        comment

        */

        global.y /* test */ = 456;
    }
}
",
                    "startIdx": 60,
                  },
                },
                "value": "123",
              },
            },
            {
              "id": 14,
              "kind": "statementAssign",
              "lvalue": {
                "field": {
                  "id": 11,
                  "kind": "id",
                  "name": "y",
                  "source": {
                    "interval": Interval {
                      "_contents": "y",
                      "endIdx": 114,
                      "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        global.x = 123; // comment
        /* comment */
        global.y = 456; /*
        // comment */

        /*


        comment

        */

        global.y /* test */ = 456;
    }
}
",
                      "startIdx": 113,
                    },
                  },
                },
                "id": 12,
                "kind": "expressionField",
                "source": {
                  "interval": Interval {
                    "endIdx": 114,
                    "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        global.x = 123; // comment
        /* comment */
        global.y = 456; /*
        // comment */

        /*


        comment

        */

        global.y /* test */ = 456;
    }
}
",
                    "startIdx": 106,
                  },
                },
                "struct": {
                  "id": 10,
                  "kind": "expressionId",
                  "name": {
                    "id": 9,
                    "kind": "id",
                    "name": "global",
                    "source": {
                      "interval": Interval {
                        "_contents": "global",
                        "endIdx": 112,
                        "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        global.x = 123; // comment
        /* comment */
        global.y = 456; /*
        // comment */

        /*


        comment

        */

        global.y /* test */ = 456;
    }
}
",
                        "startIdx": 106,
                      },
                    },
                  },
                  "source": {
                    "interval": Interval {
                      "endIdx": 112,
                      "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        global.x = 123; // comment
        /* comment */
        global.y = 456; /*
        // comment */

        /*


        comment

        */

        global.y /* test */ = 456;
    }
}
",
                      "startIdx": 106,
                    },
                  },
                },
              },
              "source": {
                "interval": Interval {
                  "endIdx": 121,
                  "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        global.x = 123; // comment
        /* comment */
        global.y = 456; /*
        // comment */

        /*


        comment

        */

        global.y /* test */ = 456;
    }
}
",
                  "startIdx": 106,
                },
              },
              "value": {
                "id": 13,
                "kind": "integerLiteral",
                "source": {
                  "interval": Interval {
                    "_contents": "456",
                    "endIdx": 120,
                    "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        global.x = 123; // comment
        /* comment */
        global.y = 456; /*
        // comment */

        /*


        comment

        */

        global.y /* test */ = 456;
    }
}
",
                    "startIdx": 117,
                  },
                },
                "value": "456",
              },
            },
            {
              "id": 20,
              "kind": "statementAssign",
              "lvalue": {
                "field": {
                  "id": 17,
                  "kind": "id",
                  "name": "y",
                  "source": {
                    "interval": Interval {
                      "_contents": "y",
                      "endIdx": 206,
                      "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        global.x = 123; // comment
        /* comment */
        global.y = 456; /*
        // comment */

        /*


        comment

        */

        global.y /* test */ = 456;
    }
}
",
                      "startIdx": 205,
                    },
                  },
                },
                "id": 18,
                "kind": "expressionField",
                "source": {
                  "interval": Interval {
                    "endIdx": 206,
                    "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        global.x = 123; // comment
        /* comment */
        global.y = 456; /*
        // comment */

        /*


        comment

        */

        global.y /* test */ = 456;
    }
}
",
                    "startIdx": 198,
                  },
                },
                "struct": {
                  "id": 16,
                  "kind": "expressionId",
                  "name": {
                    "id": 15,
                    "kind": "id",
                    "name": "global",
                    "source": {
                      "interval": Interval {
                        "_contents": "global",
                        "endIdx": 204,
                        "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        global.x = 123; // comment
        /* comment */
        global.y = 456; /*
        // comment */

        /*


        comment

        */

        global.y /* test */ = 456;
    }
}
",
                        "startIdx": 198,
                      },
                    },
                  },
                  "source": {
                    "interval": Interval {
                      "endIdx": 204,
                      "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        global.x = 123; // comment
        /* comment */
        global.y = 456; /*
        // comment */

        /*


        comment

        */

        global.y /* test */ = 456;
    }
}
",
                      "startIdx": 198,
                    },
                  },
                },
              },
              "source": {
                "interval": Interval {
                  "endIdx": 224,
                  "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        global.x = 123; // comment
        /* comment */
        global.y = 456; /*
        // comment */

        /*


        comment

        */

        global.y /* test */ = 456;
    }
}
",
                  "startIdx": 198,
                },
              },
              "value": {
                "id": 19,
                "kind": "integerLiteral",
                "source": {
                  "interval": Interval {
                    "_contents": "456",
                    "endIdx": 223,
                    "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        global.x = 123; // comment
        /* comment */
        global.y = 456; /*
        // comment */

        /*


        comment

        */

        global.y /* test */ = 456;
    }
}
",
                    "startIdx": 220,
                  },
                },
                "value": "456",
              },
            },
          ],
        },
      ],
      "kind": "house",
      "name": {
        "id": 1,
        "kind": "id",
        "name": "MyHouse",
        "source": {
          "interval": Interval {
            "_contents": "MyHouse",
            "endIdx": 13,
            "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        global.x = 123; // comment
        /* comment */
        global.y = 456; /*
        // comment */

        /*


        comment

        */

        global.y /* test */ = 456;
    }
}
",
            "startIdx": 6,
          },
        },
      },
      "source": {
        "interval": Interval {
          "endIdx": 232,
          "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        global.x = 123; // comment
        /* comment */
        global.y = 456; /*
        // comment */

        /*


        comment

        */

        global.y /* test */ = 456;
    }
}
",
          "startIdx": 0,
        },
      },
    },
  ],
  "kind": "module",
  "source": {
    "interval": Interval {
      "endIdx": 233,
      "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        global.x = 123; // comment
        /* comment */
        global.y = 456; /*
        // comment */

        /*


        comment

        */

        global.y /* test */ = 456;
    }
}
",
      "startIdx": 0,
    },
  },
}
`;

exports[`Grammar should parse multiple-houses 1`] = `
{
  "id": 7,
  "items": [
    {
      "id": 2,
      "items": [],
      "kind": "house",
      "name": {
        "id": 1,
        "kind": "id",
        "name": "House1",
        "source": {
          "interval": Interval {
            "_contents": "House1",
            "endIdx": 12,
            "sourceString": "house House1 {

}

house House2 {

}

house House3 {

}",
            "startIdx": 6,
          },
        },
      },
      "source": {
        "interval": Interval {
          "endIdx": 17,
          "sourceString": "house House1 {

}

house House2 {

}

house House3 {

}",
          "startIdx": 0,
        },
      },
    },
    {
      "id": 4,
      "items": [],
      "kind": "house",
      "name": {
        "id": 3,
        "kind": "id",
        "name": "House2",
        "source": {
          "interval": Interval {
            "_contents": "House2",
            "endIdx": 31,
            "sourceString": "house House1 {

}

house House2 {

}

house House3 {

}",
            "startIdx": 25,
          },
        },
      },
      "source": {
        "interval": Interval {
          "endIdx": 36,
          "sourceString": "house House1 {

}

house House2 {

}

house House3 {

}",
          "startIdx": 19,
        },
      },
    },
    {
      "id": 6,
      "items": [],
      "kind": "house",
      "name": {
        "id": 5,
        "kind": "id",
        "name": "House3",
        "source": {
          "interval": Interval {
            "_contents": "House3",
            "endIdx": 50,
            "sourceString": "house House1 {

}

house House2 {

}

house House3 {

}",
            "startIdx": 44,
          },
        },
      },
      "source": {
        "interval": Interval {
          "endIdx": 55,
          "sourceString": "house House1 {

}

house House2 {

}

house House3 {

}",
          "startIdx": 38,
        },
      },
    },
  ],
  "kind": "module",
  "source": {
    "interval": Interval {
      "endIdx": 55,
      "sourceString": "house House1 {

}

house House2 {

}

house House3 {

}",
      "startIdx": 0,
    },
  },
}
`;

exports[`Grammar should parse single-line-comments 1`] = `
{
  "id": 17,
  "items": [
    {
      "id": 16,
      "items": [
        {
          "event": {
            "id": 2,
            "kind": "id",
            "name": "BLOCK_BREAK",
            "source": {
              "interval": Interval {
                "_contents": "BLOCK_BREAK",
                "endIdx": 38,
                "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        global.x = 123; // comment
        // comment
        global.y = 456;
        // comment    
    }
}
",
                "startIdx": 27,
              },
            },
          },
          "id": 15,
          "kind": "handler",
          "source": {
            "interval": Interval {
              "endIdx": 147,
              "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        global.x = 123; // comment
        // comment
        global.y = 456;
        // comment    
    }
}
",
              "startIdx": 20,
            },
          },
          "statements": [
            {
              "id": 8,
              "kind": "statementAssign",
              "lvalue": {
                "field": {
                  "id": 5,
                  "kind": "id",
                  "name": "x",
                  "source": {
                    "interval": Interval {
                      "_contents": "x",
                      "endIdx": 57,
                      "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        global.x = 123; // comment
        // comment
        global.y = 456;
        // comment    
    }
}
",
                      "startIdx": 56,
                    },
                  },
                },
                "id": 6,
                "kind": "expressionField",
                "source": {
                  "interval": Interval {
                    "endIdx": 57,
                    "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        global.x = 123; // comment
        // comment
        global.y = 456;
        // comment    
    }
}
",
                    "startIdx": 49,
                  },
                },
                "struct": {
                  "id": 4,
                  "kind": "expressionId",
                  "name": {
                    "id": 3,
                    "kind": "id",
                    "name": "global",
                    "source": {
                      "interval": Interval {
                        "_contents": "global",
                        "endIdx": 55,
                        "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        global.x = 123; // comment
        // comment
        global.y = 456;
        // comment    
    }
}
",
                        "startIdx": 49,
                      },
                    },
                  },
                  "source": {
                    "interval": Interval {
                      "endIdx": 55,
                      "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        global.x = 123; // comment
        // comment
        global.y = 456;
        // comment    
    }
}
",
                      "startIdx": 49,
                    },
                  },
                },
              },
              "source": {
                "interval": Interval {
                  "endIdx": 64,
                  "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        global.x = 123; // comment
        // comment
        global.y = 456;
        // comment    
    }
}
",
                  "startIdx": 49,
                },
              },
              "value": {
                "id": 7,
                "kind": "integerLiteral",
                "source": {
                  "interval": Interval {
                    "_contents": "123",
                    "endIdx": 63,
                    "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        global.x = 123; // comment
        // comment
        global.y = 456;
        // comment    
    }
}
",
                    "startIdx": 60,
                  },
                },
                "value": "123",
              },
            },
            {
              "id": 14,
              "kind": "statementAssign",
              "lvalue": {
                "field": {
                  "id": 11,
                  "kind": "id",
                  "name": "y",
                  "source": {
                    "interval": Interval {
                      "_contents": "y",
                      "endIdx": 111,
                      "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        global.x = 123; // comment
        // comment
        global.y = 456;
        // comment    
    }
}
",
                      "startIdx": 110,
                    },
                  },
                },
                "id": 12,
                "kind": "expressionField",
                "source": {
                  "interval": Interval {
                    "endIdx": 111,
                    "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        global.x = 123; // comment
        // comment
        global.y = 456;
        // comment    
    }
}
",
                    "startIdx": 103,
                  },
                },
                "struct": {
                  "id": 10,
                  "kind": "expressionId",
                  "name": {
                    "id": 9,
                    "kind": "id",
                    "name": "global",
                    "source": {
                      "interval": Interval {
                        "_contents": "global",
                        "endIdx": 109,
                        "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        global.x = 123; // comment
        // comment
        global.y = 456;
        // comment    
    }
}
",
                        "startIdx": 103,
                      },
                    },
                  },
                  "source": {
                    "interval": Interval {
                      "endIdx": 109,
                      "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        global.x = 123; // comment
        // comment
        global.y = 456;
        // comment    
    }
}
",
                      "startIdx": 103,
                    },
                  },
                },
              },
              "source": {
                "interval": Interval {
                  "endIdx": 118,
                  "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        global.x = 123; // comment
        // comment
        global.y = 456;
        // comment    
    }
}
",
                  "startIdx": 103,
                },
              },
              "value": {
                "id": 13,
                "kind": "integerLiteral",
                "source": {
                  "interval": Interval {
                    "_contents": "456",
                    "endIdx": 117,
                    "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        global.x = 123; // comment
        // comment
        global.y = 456;
        // comment    
    }
}
",
                    "startIdx": 114,
                  },
                },
                "value": "456",
              },
            },
          ],
        },
      ],
      "kind": "house",
      "name": {
        "id": 1,
        "kind": "id",
        "name": "MyHouse",
        "source": {
          "interval": Interval {
            "_contents": "MyHouse",
            "endIdx": 13,
            "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        global.x = 123; // comment
        // comment
        global.y = 456;
        // comment    
    }
}
",
            "startIdx": 6,
          },
        },
      },
      "source": {
        "interval": Interval {
          "endIdx": 149,
          "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        global.x = 123; // comment
        // comment
        global.y = 456;
        // comment    
    }
}
",
          "startIdx": 0,
        },
      },
    },
  ],
  "kind": "module",
  "source": {
    "interval": Interval {
      "endIdx": 150,
      "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        global.x = 123; // comment
        // comment
        global.y = 456;
        // comment    
    }
}
",
      "startIdx": 0,
    },
  },
}
`;

exports[`Grammar should parse statement-expression 1`] = `
{
  "id": 7,
  "items": [
    {
      "id": 6,
      "items": [
        {
          "event": {
            "id": 2,
            "kind": "id",
            "name": "BLOCK_BREAK",
            "source": {
              "interval": Interval {
                "_contents": "BLOCK_BREAK",
                "endIdx": 38,
                "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        5;
    }
}
",
                "startIdx": 27,
              },
            },
          },
          "id": 5,
          "kind": "handler",
          "source": {
            "interval": Interval {
              "endIdx": 57,
              "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        5;
    }
}
",
              "startIdx": 20,
            },
          },
          "statements": [
            {
              "expression": {
                "id": 3,
                "kind": "integerLiteral",
                "source": {
                  "interval": Interval {
                    "_contents": "5",
                    "endIdx": 50,
                    "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        5;
    }
}
",
                    "startIdx": 49,
                  },
                },
                "value": "5",
              },
              "id": 4,
              "kind": "statementExpression",
              "source": {
                "interval": Interval {
                  "endIdx": 51,
                  "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        5;
    }
}
",
                  "startIdx": 49,
                },
              },
            },
          ],
        },
      ],
      "kind": "house",
      "name": {
        "id": 1,
        "kind": "id",
        "name": "MyHouse",
        "source": {
          "interval": Interval {
            "_contents": "MyHouse",
            "endIdx": 13,
            "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        5;
    }
}
",
            "startIdx": 6,
          },
        },
      },
      "source": {
        "interval": Interval {
          "endIdx": 59,
          "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        5;
    }
}
",
          "startIdx": 0,
        },
      },
    },
  ],
  "kind": "module",
  "source": {
    "interval": Interval {
      "endIdx": 60,
      "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        5;
    }
}
",
      "startIdx": 0,
    },
  },
}
`;

exports[`Grammar should parse static-constants 1`] = `
{
  "id": 15,
  "items": [
    {
      "id": 4,
      "kind": "statementConst",
      "name": {
        "id": 1,
        "kind": "id",
        "name": "x",
        "source": {
          "interval": Interval {
            "_contents": "x",
            "endIdx": 7,
            "sourceString": "const x: int = 123;
const y: int = 456;

house MyHouse {

}

const z: int = 789;",
            "startIdx": 6,
          },
        },
      },
      "source": {
        "interval": Interval {
          "endIdx": 19,
          "sourceString": "const x: int = 123;
const y: int = 456;

house MyHouse {

}

const z: int = 789;",
          "startIdx": 0,
        },
      },
      "type": {
        "id": 2,
        "kind": "id",
        "name": "int",
        "source": {
          "interval": Interval {
            "_contents": "int",
            "endIdx": 12,
            "sourceString": "const x: int = 123;
const y: int = 456;

house MyHouse {

}

const z: int = 789;",
            "startIdx": 9,
          },
        },
      },
      "value": {
        "id": 3,
        "kind": "integerLiteral",
        "source": {
          "interval": Interval {
            "_contents": "123",
            "endIdx": 18,
            "sourceString": "const x: int = 123;
const y: int = 456;

house MyHouse {

}

const z: int = 789;",
            "startIdx": 15,
          },
        },
        "value": "123",
      },
    },
    {
      "id": 8,
      "kind": "statementConst",
      "name": {
        "id": 5,
        "kind": "id",
        "name": "y",
        "source": {
          "interval": Interval {
            "_contents": "y",
            "endIdx": 27,
            "sourceString": "const x: int = 123;
const y: int = 456;

house MyHouse {

}

const z: int = 789;",
            "startIdx": 26,
          },
        },
      },
      "source": {
        "interval": Interval {
          "endIdx": 39,
          "sourceString": "const x: int = 123;
const y: int = 456;

house MyHouse {

}

const z: int = 789;",
          "startIdx": 20,
        },
      },
      "type": {
        "id": 6,
        "kind": "id",
        "name": "int",
        "source": {
          "interval": Interval {
            "_contents": "int",
            "endIdx": 32,
            "sourceString": "const x: int = 123;
const y: int = 456;

house MyHouse {

}

const z: int = 789;",
            "startIdx": 29,
          },
        },
      },
      "value": {
        "id": 7,
        "kind": "integerLiteral",
        "source": {
          "interval": Interval {
            "_contents": "456",
            "endIdx": 38,
            "sourceString": "const x: int = 123;
const y: int = 456;

house MyHouse {

}

const z: int = 789;",
            "startIdx": 35,
          },
        },
        "value": "456",
      },
    },
    {
      "id": 10,
      "items": [],
      "kind": "house",
      "name": {
        "id": 9,
        "kind": "id",
        "name": "MyHouse",
        "source": {
          "interval": Interval {
            "_contents": "MyHouse",
            "endIdx": 54,
            "sourceString": "const x: int = 123;
const y: int = 456;

house MyHouse {

}

const z: int = 789;",
            "startIdx": 47,
          },
        },
      },
      "source": {
        "interval": Interval {
          "endIdx": 59,
          "sourceString": "const x: int = 123;
const y: int = 456;

house MyHouse {

}

const z: int = 789;",
          "startIdx": 41,
        },
      },
    },
    {
      "id": 14,
      "kind": "statementConst",
      "name": {
        "id": 11,
        "kind": "id",
        "name": "z",
        "source": {
          "interval": Interval {
            "_contents": "z",
            "endIdx": 68,
            "sourceString": "const x: int = 123;
const y: int = 456;

house MyHouse {

}

const z: int = 789;",
            "startIdx": 67,
          },
        },
      },
      "source": {
        "interval": Interval {
          "endIdx": 80,
          "sourceString": "const x: int = 123;
const y: int = 456;

house MyHouse {

}

const z: int = 789;",
          "startIdx": 61,
        },
      },
      "type": {
        "id": 12,
        "kind": "id",
        "name": "int",
        "source": {
          "interval": Interval {
            "_contents": "int",
            "endIdx": 73,
            "sourceString": "const x: int = 123;
const y: int = 456;

house MyHouse {

}

const z: int = 789;",
            "startIdx": 70,
          },
        },
      },
      "value": {
        "id": 13,
        "kind": "integerLiteral",
        "source": {
          "interval": Interval {
            "_contents": "789",
            "endIdx": 79,
            "sourceString": "const x: int = 123;
const y: int = 456;

house MyHouse {

}

const z: int = 789;",
            "startIdx": 76,
          },
        },
        "value": "789",
      },
    },
  ],
  "kind": "module",
  "source": {
    "interval": Interval {
      "endIdx": 80,
      "sourceString": "const x: int = 123;
const y: int = 456;

house MyHouse {

}

const z: int = 789;",
      "startIdx": 0,
    },
  },
}
`;

exports[`Grammar should parse stats 1`] = `
{
  "id": 17,
  "items": [
    {
      "id": 16,
      "items": [
        {
          "id": 4,
          "kind": "globalStat",
          "name": {
            "id": 2,
            "kind": "id",
            "name": "xg",
            "source": {
              "interval": Interval {
                "_contents": "xg",
                "endIdx": 29,
                "sourceString": "house MyHouse {
    global xg: int;
    global yg: int;
    player xp: int;
    player yp: int;

    handle BLOCK_BREAK {
        
    }
}",
                "startIdx": 27,
              },
            },
          },
          "source": {
            "interval": Interval {
              "endIdx": 35,
              "sourceString": "house MyHouse {
    global xg: int;
    global yg: int;
    player xp: int;
    player yp: int;

    handle BLOCK_BREAK {
        
    }
}",
              "startIdx": 20,
            },
          },
          "type": {
            "id": 3,
            "kind": "id",
            "name": "int",
            "source": {
              "interval": Interval {
                "_contents": "int",
                "endIdx": 34,
                "sourceString": "house MyHouse {
    global xg: int;
    global yg: int;
    player xp: int;
    player yp: int;

    handle BLOCK_BREAK {
        
    }
}",
                "startIdx": 31,
              },
            },
          },
        },
        {
          "id": 7,
          "kind": "globalStat",
          "name": {
            "id": 5,
            "kind": "id",
            "name": "yg",
            "source": {
              "interval": Interval {
                "_contents": "yg",
                "endIdx": 49,
                "sourceString": "house MyHouse {
    global xg: int;
    global yg: int;
    player xp: int;
    player yp: int;

    handle BLOCK_BREAK {
        
    }
}",
                "startIdx": 47,
              },
            },
          },
          "source": {
            "interval": Interval {
              "endIdx": 55,
              "sourceString": "house MyHouse {
    global xg: int;
    global yg: int;
    player xp: int;
    player yp: int;

    handle BLOCK_BREAK {
        
    }
}",
              "startIdx": 40,
            },
          },
          "type": {
            "id": 6,
            "kind": "id",
            "name": "int",
            "source": {
              "interval": Interval {
                "_contents": "int",
                "endIdx": 54,
                "sourceString": "house MyHouse {
    global xg: int;
    global yg: int;
    player xp: int;
    player yp: int;

    handle BLOCK_BREAK {
        
    }
}",
                "startIdx": 51,
              },
            },
          },
        },
        {
          "id": 10,
          "kind": "playerStat",
          "name": {
            "id": 8,
            "kind": "id",
            "name": "xp",
            "source": {
              "interval": Interval {
                "_contents": "xp",
                "endIdx": 69,
                "sourceString": "house MyHouse {
    global xg: int;
    global yg: int;
    player xp: int;
    player yp: int;

    handle BLOCK_BREAK {
        
    }
}",
                "startIdx": 67,
              },
            },
          },
          "source": {
            "interval": Interval {
              "endIdx": 75,
              "sourceString": "house MyHouse {
    global xg: int;
    global yg: int;
    player xp: int;
    player yp: int;

    handle BLOCK_BREAK {
        
    }
}",
              "startIdx": 60,
            },
          },
          "type": {
            "id": 9,
            "kind": "id",
            "name": "int",
            "source": {
              "interval": Interval {
                "_contents": "int",
                "endIdx": 74,
                "sourceString": "house MyHouse {
    global xg: int;
    global yg: int;
    player xp: int;
    player yp: int;

    handle BLOCK_BREAK {
        
    }
}",
                "startIdx": 71,
              },
            },
          },
        },
        {
          "id": 13,
          "kind": "playerStat",
          "name": {
            "id": 11,
            "kind": "id",
            "name": "yp",
            "source": {
              "interval": Interval {
                "_contents": "yp",
                "endIdx": 89,
                "sourceString": "house MyHouse {
    global xg: int;
    global yg: int;
    player xp: int;
    player yp: int;

    handle BLOCK_BREAK {
        
    }
}",
                "startIdx": 87,
              },
            },
          },
          "source": {
            "interval": Interval {
              "endIdx": 95,
              "sourceString": "house MyHouse {
    global xg: int;
    global yg: int;
    player xp: int;
    player yp: int;

    handle BLOCK_BREAK {
        
    }
}",
              "startIdx": 80,
            },
          },
          "type": {
            "id": 12,
            "kind": "id",
            "name": "int",
            "source": {
              "interval": Interval {
                "_contents": "int",
                "endIdx": 94,
                "sourceString": "house MyHouse {
    global xg: int;
    global yg: int;
    player xp: int;
    player yp: int;

    handle BLOCK_BREAK {
        
    }
}",
                "startIdx": 91,
              },
            },
          },
        },
        {
          "event": {
            "id": 14,
            "kind": "id",
            "name": "BLOCK_BREAK",
            "source": {
              "interval": Interval {
                "_contents": "BLOCK_BREAK",
                "endIdx": 119,
                "sourceString": "house MyHouse {
    global xg: int;
    global yg: int;
    player xp: int;
    player yp: int;

    handle BLOCK_BREAK {
        
    }
}",
                "startIdx": 108,
              },
            },
          },
          "id": 15,
          "kind": "handler",
          "source": {
            "interval": Interval {
              "endIdx": 136,
              "sourceString": "house MyHouse {
    global xg: int;
    global yg: int;
    player xp: int;
    player yp: int;

    handle BLOCK_BREAK {
        
    }
}",
              "startIdx": 101,
            },
          },
          "statements": [],
        },
      ],
      "kind": "house",
      "name": {
        "id": 1,
        "kind": "id",
        "name": "MyHouse",
        "source": {
          "interval": Interval {
            "_contents": "MyHouse",
            "endIdx": 13,
            "sourceString": "house MyHouse {
    global xg: int;
    global yg: int;
    player xp: int;
    player yp: int;

    handle BLOCK_BREAK {
        
    }
}",
            "startIdx": 6,
          },
        },
      },
      "source": {
        "interval": Interval {
          "endIdx": 138,
          "sourceString": "house MyHouse {
    global xg: int;
    global yg: int;
    player xp: int;
    player yp: int;

    handle BLOCK_BREAK {
        
    }
}",
          "startIdx": 0,
        },
      },
    },
  ],
  "kind": "module",
  "source": {
    "interval": Interval {
      "endIdx": 138,
      "sourceString": "house MyHouse {
    global xg: int;
    global yg: int;
    player xp: int;
    player yp: int;

    handle BLOCK_BREAK {
        
    }
}",
      "startIdx": 0,
    },
  },
}
`;

exports[`Grammar should parse unary-operator 1`] = `
{
  "id": 10,
  "items": [
    {
      "id": 9,
      "items": [
        {
          "event": {
            "id": 2,
            "kind": "id",
            "name": "BLOCK_BREAK",
            "source": {
              "interval": Interval {
                "_contents": "BLOCK_BREAK",
                "endIdx": 38,
                "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        x = -5;
    }
}
",
                "startIdx": 27,
              },
            },
          },
          "id": 8,
          "kind": "handler",
          "source": {
            "interval": Interval {
              "endIdx": 62,
              "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        x = -5;
    }
}
",
              "startIdx": 20,
            },
          },
          "statements": [
            {
              "id": 7,
              "kind": "statementAssign",
              "lvalue": {
                "id": 4,
                "kind": "expressionId",
                "name": {
                  "id": 3,
                  "kind": "id",
                  "name": "x",
                  "source": {
                    "interval": Interval {
                      "_contents": "x",
                      "endIdx": 50,
                      "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        x = -5;
    }
}
",
                      "startIdx": 49,
                    },
                  },
                },
                "source": {
                  "interval": Interval {
                    "endIdx": 50,
                    "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        x = -5;
    }
}
",
                    "startIdx": 49,
                  },
                },
              },
              "source": {
                "interval": Interval {
                  "endIdx": 56,
                  "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        x = -5;
    }
}
",
                  "startIdx": 49,
                },
              },
              "value": {
                "id": 6,
                "kind": "expressionUnary",
                "op": "-",
                "operand": {
                  "id": 5,
                  "kind": "integerLiteral",
                  "source": {
                    "interval": Interval {
                      "_contents": "5",
                      "endIdx": 55,
                      "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        x = -5;
    }
}
",
                      "startIdx": 54,
                    },
                  },
                  "value": "5",
                },
                "source": {
                  "interval": Interval {
                    "endIdx": 55,
                    "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        x = -5;
    }
}
",
                    "startIdx": 53,
                  },
                },
              },
            },
          ],
        },
      ],
      "kind": "house",
      "name": {
        "id": 1,
        "kind": "id",
        "name": "MyHouse",
        "source": {
          "interval": Interval {
            "_contents": "MyHouse",
            "endIdx": 13,
            "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        x = -5;
    }
}
",
            "startIdx": 6,
          },
        },
      },
      "source": {
        "interval": Interval {
          "endIdx": 64,
          "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        x = -5;
    }
}
",
          "startIdx": 0,
        },
      },
    },
  ],
  "kind": "module",
  "source": {
    "interval": Interval {
      "endIdx": 65,
      "sourceString": "house MyHouse {
    handle BLOCK_BREAK {
        x = -5;
    }
}
",
      "startIdx": 0,
    },
  },
}
`;

exports[`Grammar should parse unary-with-literals 1`] = `
{
  "id": 20,
  "items": [
    {
      "id": 19,
      "items": [
        {
          "event": {
            "id": 2,
            "kind": "id",
            "name": "JOIN",
            "source": {
              "interval": Interval {
                "_contents": "JOIN",
                "endIdx": 31,
                "sourceString": "house MyHouse {
    handle JOIN {
        let x: int = -123 - 123;
        let y: bool = !true || !false;
    }
}",
                "startIdx": 27,
              },
            },
          },
          "id": 18,
          "kind": "handler",
          "source": {
            "interval": Interval {
              "endIdx": 111,
              "sourceString": "house MyHouse {
    handle JOIN {
        let x: int = -123 - 123;
        let y: bool = !true || !false;
    }
}",
              "startIdx": 20,
            },
          },
          "statements": [
            {
              "id": 9,
              "kind": "statementLet",
              "name": {
                "id": 3,
                "kind": "id",
                "name": "x",
                "source": {
                  "interval": Interval {
                    "_contents": "x",
                    "endIdx": 47,
                    "sourceString": "house MyHouse {
    handle JOIN {
        let x: int = -123 - 123;
        let y: bool = !true || !false;
    }
}",
                    "startIdx": 46,
                  },
                },
              },
              "source": {
                "interval": Interval {
                  "endIdx": 66,
                  "sourceString": "house MyHouse {
    handle JOIN {
        let x: int = -123 - 123;
        let y: bool = !true || !false;
    }
}",
                  "startIdx": 42,
                },
              },
              "type": {
                "id": 4,
                "kind": "id",
                "name": "int",
                "source": {
                  "interval": Interval {
                    "_contents": "int",
                    "endIdx": 52,
                    "sourceString": "house MyHouse {
    handle JOIN {
        let x: int = -123 - 123;
        let y: bool = !true || !false;
    }
}",
                    "startIdx": 49,
                  },
                },
              },
              "value": {
                "id": 8,
                "kind": "expressionBinary",
                "left": {
                  "id": 6,
                  "kind": "expressionUnary",
                  "op": "-",
                  "operand": {
                    "id": 5,
                    "kind": "integerLiteral",
                    "source": {
                      "interval": Interval {
                        "_contents": "123",
                        "endIdx": 59,
                        "sourceString": "house MyHouse {
    handle JOIN {
        let x: int = -123 - 123;
        let y: bool = !true || !false;
    }
}",
                        "startIdx": 56,
                      },
                    },
                    "value": "123",
                  },
                  "source": {
                    "interval": Interval {
                      "endIdx": 59,
                      "sourceString": "house MyHouse {
    handle JOIN {
        let x: int = -123 - 123;
        let y: bool = !true || !false;
    }
}",
                      "startIdx": 55,
                    },
                  },
                },
                "op": "-",
                "right": {
                  "id": 7,
                  "kind": "integerLiteral",
                  "source": {
                    "interval": Interval {
                      "_contents": "123",
                      "endIdx": 65,
                      "sourceString": "house MyHouse {
    handle JOIN {
        let x: int = -123 - 123;
        let y: bool = !true || !false;
    }
}",
                      "startIdx": 62,
                    },
                  },
                  "value": "123",
                },
                "source": {
                  "interval": Interval {
                    "endIdx": 65,
                    "sourceString": "house MyHouse {
    handle JOIN {
        let x: int = -123 - 123;
        let y: bool = !true || !false;
    }
}",
                    "startIdx": 55,
                  },
                },
              },
            },
            {
              "id": 17,
              "kind": "statementLet",
              "name": {
                "id": 10,
                "kind": "id",
                "name": "y",
                "source": {
                  "interval": Interval {
                    "_contents": "y",
                    "endIdx": 80,
                    "sourceString": "house MyHouse {
    handle JOIN {
        let x: int = -123 - 123;
        let y: bool = !true || !false;
    }
}",
                    "startIdx": 79,
                  },
                },
              },
              "source": {
                "interval": Interval {
                  "endIdx": 105,
                  "sourceString": "house MyHouse {
    handle JOIN {
        let x: int = -123 - 123;
        let y: bool = !true || !false;
    }
}",
                  "startIdx": 75,
                },
              },
              "type": {
                "id": 11,
                "kind": "id",
                "name": "bool",
                "source": {
                  "interval": Interval {
                    "_contents": "bool",
                    "endIdx": 86,
                    "sourceString": "house MyHouse {
    handle JOIN {
        let x: int = -123 - 123;
        let y: bool = !true || !false;
    }
}",
                    "startIdx": 82,
                  },
                },
              },
              "value": {
                "id": 16,
                "kind": "expressionBinary",
                "left": {
                  "id": 13,
                  "kind": "expressionUnary",
                  "op": "!",
                  "operand": {
                    "id": 12,
                    "kind": "booleanLiteral",
                    "source": {
                      "interval": Interval {
                        "_contents": "true",
                        "endIdx": 94,
                        "sourceString": "house MyHouse {
    handle JOIN {
        let x: int = -123 - 123;
        let y: bool = !true || !false;
    }
}",
                        "startIdx": 90,
                      },
                    },
                    "value": true,
                  },
                  "source": {
                    "interval": Interval {
                      "endIdx": 94,
                      "sourceString": "house MyHouse {
    handle JOIN {
        let x: int = -123 - 123;
        let y: bool = !true || !false;
    }
}",
                      "startIdx": 89,
                    },
                  },
                },
                "op": "||",
                "right": {
                  "id": 15,
                  "kind": "expressionUnary",
                  "op": "!",
                  "operand": {
                    "id": 14,
                    "kind": "booleanLiteral",
                    "source": {
                      "interval": Interval {
                        "_contents": "false",
                        "endIdx": 104,
                        "sourceString": "house MyHouse {
    handle JOIN {
        let x: int = -123 - 123;
        let y: bool = !true || !false;
    }
}",
                        "startIdx": 99,
                      },
                    },
                    "value": false,
                  },
                  "source": {
                    "interval": Interval {
                      "endIdx": 104,
                      "sourceString": "house MyHouse {
    handle JOIN {
        let x: int = -123 - 123;
        let y: bool = !true || !false;
    }
}",
                      "startIdx": 98,
                    },
                  },
                },
                "source": {
                  "interval": Interval {
                    "endIdx": 104,
                    "sourceString": "house MyHouse {
    handle JOIN {
        let x: int = -123 - 123;
        let y: bool = !true || !false;
    }
}",
                    "startIdx": 89,
                  },
                },
              },
            },
          ],
        },
      ],
      "kind": "house",
      "name": {
        "id": 1,
        "kind": "id",
        "name": "MyHouse",
        "source": {
          "interval": Interval {
            "_contents": "MyHouse",
            "endIdx": 13,
            "sourceString": "house MyHouse {
    handle JOIN {
        let x: int = -123 - 123;
        let y: bool = !true || !false;
    }
}",
            "startIdx": 6,
          },
        },
      },
      "source": {
        "interval": Interval {
          "endIdx": 113,
          "sourceString": "house MyHouse {
    handle JOIN {
        let x: int = -123 - 123;
        let y: bool = !true || !false;
    }
}",
          "startIdx": 0,
        },
      },
    },
  ],
  "kind": "module",
  "source": {
    "interval": Interval {
      "endIdx": 113,
      "sourceString": "house MyHouse {
    handle JOIN {
        let x: int = -123 - 123;
        let y: bool = !true || !false;
    }
}",
      "startIdx": 0,
    },
  },
}
`;
