Housify {
    Module = ModuleItem*

    ModuleItem = House
    
    House = house id "{" HouseItemTop* HouseItem* "}"

    HouseItemTop = GlobalStat | PlayerStat
    HouseItem = Handler

    GlobalStat = global id ":" Type ";"
    PlayerStat = player id ":" Type ";"

    Handler = handle id "{" Statement* "}"

    Parameter = id ":" Type

    Statement = StatementAssign
              | StatementLet
              | StatementExpression
              | StatementIf
    
    StatementAssign = Expression "=" Expression ";"

    StatementLet = let id ":" Type "=" Expression ";"

    StatementExpression = Expression ";"

    StatementIf = if Expression "{" Statement* "}" ~else --noElse
                | if Expression "{" Statement* "}" else "{" Statement* "}" --withElse
                | if Expression "{" Statement* "}" else StatementIf --withElseIf
    
    // Expressions are ordered by precedence
    
    Expression = ExpressionOr

    ExpressionOr = ExpressionOr "||" ExpressionAnd --or
                 | ExpressionAnd

    ExpressionAnd = ExpressionAnd "&&" ExpressionEquality --and
                  | ExpressionEquality

    ExpressionEquality = ExpressionEquality "!=" ExpressionCompare --not
                       | ExpressionEquality "==" ExpressionCompare --eq
                       | ExpressionCompare

    ExpressionCompare = ExpressionCompare ">" ExpressionAdd --gt
                      | ExpressionCompare ">=" ExpressionAdd --gte
                      | ExpressionCompare "<" ExpressionAdd --lt
                      | ExpressionCompare "<=" ExpressionAdd --lte
                      | ExpressionAdd

    ExpressionAdd = ExpressionAdd "+" ~"+" ExpressionMul --add
                  | ExpressionAdd "-" ~"-" ExpressionMul --sub
                  | ExpressionMul

    ExpressionMul = ExpressionMul "*" ExpressionUnary --mul
                  | ExpressionMul "/" ExpressionUnary --div
                  | ExpressionUnary

    ExpressionUnary = "-" ExpressionUnary --minus
                    | "!" ExpressionUnary --not
                    | ExpressionPrimary

    // Order is important
    ExpressionPrimary = ExpressionField
                      | ExpressionParens
                      | ExpressionLiteral
                      | ExpressionId
    
    ExpressionLiteral = integerLiteral | booleanLiteral
    ExpressionId = id
    ExpressionField = ExpressionPrimary "." id
    ExpressionParens = "(" Expression ")"

    binaryOp = "+" | "-" | "*" | "/" | "==" | "!=" | "<" | "<=" | ">" | ">=" | "&&" | "||"
    unaryOp = "-" | "!"

    Type = id --regular

    integerLiteral = digit+

    booleanLiteral = "true" | "false"

    letterAsciiLC = "a".."z"
    letterAsciiUC = "A".."Z"
    letterAscii = letterAsciiLC | letterAsciiUC
    letterComment = letterAsciiLC | letterAsciiUC | digit | "_"

    id = ~keyword #idStart #(idPart*)

    idStart = letterAscii | "_"
    idPart = letterAscii | digit | "_"

    house = "house" ~idPart
    global = "global" ~idPart
    player = "player" ~idPart
    handle = "handle" ~idPart
    let = "let" ~idPart
    if = "if" ~idPart
    else = "else" ~idPart

    keyword = house | handle | let | if | else

    // Comments
    space += comment | lineTerminator

    comment = multiLineComment | singleLineComment

    lineTerminator = "\n" | "\r" | "\u2028" | "\u2029"

    multiLineComment = "/*" (~"*/" any)* "*/"

    singleLineComment = "//" (~lineTerminator any)*
}