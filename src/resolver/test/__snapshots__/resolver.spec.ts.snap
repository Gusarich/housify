// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Resolver should fail assignment-type-mismatch-in-else 1`] = `"Cannot assign 'bool' to 'int'"`;

exports[`Resolver should fail assignment-type-mismatch-in-elseif 1`] = `"Cannot assign 'bool' to 'int'"`;

exports[`Resolver should fail assignment-type-mismatch-in-if 1`] = `"Cannot assign 'bool' to 'int'"`;

exports[`Resolver should fail assignment-type-mismatch-in-nested-if 1`] = `"Cannot assign 'bool' to 'int'"`;

exports[`Resolver should fail binary-operation-between-boolean-and-integer 1`] = `"Operands must be integers"`;

exports[`Resolver should fail condition-not-boolean 1`] = `"Condition must be a boolean"`;

exports[`Resolver should fail default-value-type-mismatch 1`] = `"Cannot assign 'int' to 'bool'"`;

exports[`Resolver should fail double-stat-definition 1`] = `"Global stat 'x' already exists"`;

exports[`Resolver should fail field-access-not-struct 1`] = `"Expression must be a struct"`;

exports[`Resolver should fail global-stats-limit 1`] = `"Cannot have more than 20 persistent global stats"`;

exports[`Resolver should fail let-statement-value-type-mismatch 1`] = `"Cannot assign 'bool' to 'int'"`;

exports[`Resolver should fail let-statement-value-type-mismatch2 1`] = `"Cannot assign 'bool' to 'int'"`;

exports[`Resolver should fail non-existing-field 1`] = `"Field 'nonExistentField' not found"`;

exports[`Resolver should fail player-stats-limit 1`] = `"Cannot have more than 20 persistent player stats"`;

exports[`Resolver should fail stat-assignment-type-mismatch 1`] = `"Cannot assign 'int' to 'bool'"`;

exports[`Resolver should fail stat-assignment-type-mismatch2 1`] = `"Cannot assign 'bool' to 'int'"`;

exports[`Resolver should fail unary-negation-of-bool 1`] = `"Operand must be an integer"`;

exports[`Resolver should fail unary-not-of-integer 1`] = `"Operand must be a boolean"`;

exports[`Resolver should fail unassignable-lvalue 1`] = `"'expressionBinary' cannot be assigned"`;

exports[`Resolver should fail unknown-event 1`] = `"Event 'SOMETHING_ELSE' not found"`;

exports[`Resolver should fail unknown-type 1`] = `"Type 'qwerty' not found"`;

exports[`Resolver should fail unused-statement-expression 1`] = `"Expression of type int cannot be used as a statement"`;

exports[`Resolver should fail variable-double-definition 1`] = `"Variable 'x' already exists"`;

exports[`Resolver should fail variable-usage-before-definition 1`] = `"Variable 'x' not found"`;

exports[`Resolver should fail void-stat 1`] = `"Cannot declare a stat of type 'void'"`;

exports[`Resolver should fail void-variable 1`] = `"Cannot declare a variable of type 'void'"`;

exports[`Resolver should resolve arithmetics 1`] = `
CompilerContext {
  "expressions": Map {
    4 => {
      "type": "int",
    },
    8 => {
      "type": "int",
    },
    12 => {
      "type": "int",
    },
    18 => {
      "fields": [
        {
          "defaultValue": {
            "id": 4,
            "kind": "integerLiteral",
            "value": "10",
          },
          "name": "x",
          "type": {
            "type": "int",
          },
        },
        {
          "defaultValue": {
            "id": 8,
            "kind": "integerLiteral",
            "value": "20",
          },
          "name": "y",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    20 => {
      "type": "int",
    },
    22 => {
      "fields": [
        {
          "defaultValue": {
            "id": 4,
            "kind": "integerLiteral",
            "value": "10",
          },
          "name": "x",
          "type": {
            "type": "int",
          },
        },
        {
          "defaultValue": {
            "id": 8,
            "kind": "integerLiteral",
            "value": "20",
          },
          "name": "y",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    24 => {
      "type": "int",
    },
    25 => {
      "type": "int",
    },
    30 => {
      "type": "int",
    },
    32 => {
      "fields": [
        {
          "defaultValue": {
            "id": 12,
            "kind": "integerLiteral",
            "value": "30",
          },
          "name": "z",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "player",
      "type": "struct",
    },
    34 => {
      "type": "int",
    },
    35 => {
      "type": "int",
    },
    40 => {
      "type": "int",
    },
    41 => {
      "type": "int",
    },
    42 => {
      "type": "int",
    },
    47 => {
      "type": "int",
    },
    48 => {
      "type": "int",
    },
    49 => {
      "type": "int",
    },
    54 => {
      "type": "int",
    },
    55 => {
      "type": "int",
    },
    56 => {
      "type": "int",
    },
    61 => {
      "type": "int",
    },
    62 => {
      "type": "int",
    },
    63 => {
      "type": "bool",
    },
    68 => {
      "type": "bool",
    },
    69 => {
      "type": "bool",
    },
    70 => {
      "type": "bool",
    },
    75 => {
      "type": "bool",
    },
    76 => {
      "type": "bool",
    },
    81 => {
      "type": "int",
    },
    82 => {
      "type": "int",
    },
    87 => {
      "type": "int",
    },
    92 => {
      "type": "int",
    },
    93 => {
      "type": "int",
    },
    94 => {
      "type": "int",
    },
    96 => {
      "type": "int",
    },
    97 => {
      "type": "int",
    },
    98 => {
      "type": "int",
    },
    99 => {
      "type": "int",
    },
    104 => {
      "type": "int",
    },
    106 => {
      "type": "int",
    },
    107 => {
      "type": "int",
    },
    108 => {
      "type": "int",
    },
    109 => {
      "type": "int",
    },
    114 => {
      "type": "int",
    },
    116 => {
      "type": "int",
    },
    117 => {
      "type": "int",
    },
    118 => {
      "type": "int",
    },
    119 => {
      "type": "int",
    },
    124 => {
      "type": "int",
    },
    125 => {
      "type": "int",
    },
    126 => {
      "type": "bool",
    },
    131 => {
      "type": "bool",
    },
    132 => {
      "type": "bool",
    },
    133 => {
      "type": "bool",
    },
    138 => {
      "type": "bool",
    },
    139 => {
      "type": "bool",
    },
    144 => {
      "type": "int",
    },
    145 => {
      "type": "int",
    },
    150 => {
      "type": "int",
    },
    155 => {
      "type": "int",
    },
    156 => {
      "type": "int",
    },
    157 => {
      "type": "int",
    },
    159 => {
      "type": "int",
    },
    160 => {
      "type": "int",
    },
    161 => {
      "type": "int",
    },
    162 => {
      "type": "int",
    },
    167 => {
      "type": "int",
    },
    169 => {
      "type": "int",
    },
    170 => {
      "type": "int",
    },
    171 => {
      "type": "int",
    },
    172 => {
      "type": "int",
    },
    177 => {
      "type": "int",
    },
    178 => {
      "type": "int",
    },
    179 => {
      "type": "int",
    },
    184 => {
      "type": "int",
    },
    185 => {
      "type": "int",
    },
    186 => {
      "type": "bool",
    },
    191 => {
      "type": "bool",
    },
    192 => {
      "type": "bool",
    },
    193 => {
      "type": "bool",
    },
    198 => {
      "type": "bool",
    },
    199 => {
      "type": "bool",
    },
    204 => {
      "type": "int",
    },
    205 => {
      "type": "int",
    },
  },
  "houses": Map {
    "MyHouse" => {
      "globalStats": [
        {
          "defaultValue": {
            "id": 4,
            "kind": "integerLiteral",
            "value": "10",
          },
          "name": "x",
          "type": {
            "type": "int",
          },
        },
        {
          "defaultValue": {
            "id": 8,
            "kind": "integerLiteral",
            "value": "20",
          },
          "name": "y",
          "type": {
            "type": "int",
          },
        },
      ],
      "handlers": [
        "BLOCK_BREAK",
      ],
      "playerStats": [
        {
          "defaultValue": {
            "id": 12,
            "kind": "integerLiteral",
            "value": "30",
          },
          "name": "z",
          "type": {
            "type": "int",
          },
        },
      ],
    },
  },
}
`;

exports[`Resolver should resolve boolean-conditions 1`] = `
CompilerContext {
  "expressions": Map {
    4 => {
      "type": "bool",
    },
    8 => {
      "fields": [
        {
          "defaultValue": {
            "id": 4,
            "kind": "booleanLiteral",
            "value": true,
          },
          "name": "isActive",
          "type": {
            "type": "bool",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    10 => {
      "type": "bool",
    },
    12 => {
      "fields": [
        {
          "defaultValue": {
            "id": 4,
            "kind": "booleanLiteral",
            "value": true,
          },
          "name": "isActive",
          "type": {
            "type": "bool",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    14 => {
      "type": "bool",
    },
    15 => {
      "type": "bool",
    },
  },
  "houses": Map {
    "MyHouse" => {
      "globalStats": [
        {
          "defaultValue": {
            "id": 4,
            "kind": "booleanLiteral",
            "value": true,
          },
          "name": "isActive",
          "type": {
            "type": "bool",
          },
        },
      ],
      "handlers": [
        "BLOCK_BREAK",
      ],
      "playerStats": [],
    },
  },
}
`;

exports[`Resolver should resolve boolean-equality-comparison 1`] = `
CompilerContext {
  "expressions": Map {
    4 => {
      "type": "bool",
    },
    5 => {
      "type": "bool",
    },
    6 => {
      "type": "bool",
    },
  },
  "houses": Map {
    "MyHouse" => {
      "globalStats": [
        {
          "defaultValue": {
            "id": 6,
            "kind": "expressionBinary",
            "left": {
              "id": 4,
              "kind": "booleanLiteral",
              "value": true,
            },
            "op": "==",
            "right": {
              "id": 5,
              "kind": "booleanLiteral",
              "value": true,
            },
          },
          "name": "x",
          "type": {
            "type": "bool",
          },
        },
      ],
      "handlers": [],
      "playerStats": [],
    },
  },
}
`;

exports[`Resolver should resolve booleans-and-stats 1`] = `
CompilerContext {
  "expressions": Map {
    4 => {
      "type": "bool",
    },
    8 => {
      "fields": [
        {
          "defaultValue": {
            "id": 4,
            "kind": "booleanLiteral",
            "value": true,
          },
          "name": "isActive",
          "type": {
            "type": "bool",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    10 => {
      "type": "bool",
    },
    12 => {
      "fields": [
        {
          "defaultValue": {
            "id": 4,
            "kind": "booleanLiteral",
            "value": true,
          },
          "name": "isActive",
          "type": {
            "type": "bool",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    14 => {
      "type": "bool",
    },
    15 => {
      "type": "bool",
    },
  },
  "houses": Map {
    "MyHouse" => {
      "globalStats": [
        {
          "defaultValue": {
            "id": 4,
            "kind": "booleanLiteral",
            "value": true,
          },
          "name": "isActive",
          "type": {
            "type": "bool",
          },
        },
      ],
      "handlers": [
        "BLOCK_BREAK",
      ],
      "playerStats": [],
    },
  },
}
`;

exports[`Resolver should resolve default-stat-value 1`] = `
CompilerContext {
  "expressions": Map {
    4 => {
      "type": "int",
    },
    8 => {
      "fields": [
        {
          "defaultValue": {
            "id": 4,
            "kind": "integerLiteral",
            "value": "10",
          },
          "name": "x",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    10 => {
      "type": "int",
    },
    11 => {
      "type": "int",
    },
  },
  "houses": Map {
    "MyHouse" => {
      "globalStats": [
        {
          "defaultValue": {
            "id": 4,
            "kind": "integerLiteral",
            "value": "10",
          },
          "name": "x",
          "type": {
            "type": "int",
          },
        },
      ],
      "handlers": [
        "BLOCK_BREAK",
      ],
      "playerStats": [],
    },
  },
}
`;

exports[`Resolver should resolve integer-arithmetics 1`] = `
CompilerContext {
  "expressions": Map {
    4 => {
      "type": "int",
    },
    8 => {
      "fields": [
        {
          "defaultValue": {
            "id": 4,
            "kind": "integerLiteral",
            "value": "100",
          },
          "name": "score",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "player",
      "type": "struct",
    },
    10 => {
      "type": "int",
    },
    12 => {
      "fields": [
        {
          "defaultValue": {
            "id": 4,
            "kind": "integerLiteral",
            "value": "100",
          },
          "name": "score",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "player",
      "type": "struct",
    },
    14 => {
      "type": "int",
    },
    15 => {
      "type": "int",
    },
    16 => {
      "type": "int",
    },
  },
  "houses": Map {
    "MyHouse" => {
      "globalStats": [],
      "handlers": [
        "BLOCK_BREAK",
      ],
      "playerStats": [
        {
          "defaultValue": {
            "id": 4,
            "kind": "integerLiteral",
            "value": "100",
          },
          "name": "score",
          "type": {
            "type": "int",
          },
        },
      ],
    },
  },
}
`;

exports[`Resolver should resolve integer-comparison-if-else 1`] = `
CompilerContext {
  "expressions": Map {
    5 => {
      "type": "int",
    },
    8 => {
      "type": "int",
    },
    9 => {
      "type": "int",
    },
    10 => {
      "type": "bool",
    },
    13 => {
      "type": "int",
    },
    17 => {
      "type": "int",
    },
  },
  "houses": Map {
    "MyHouse" => {
      "globalStats": [],
      "handlers": [
        "BLOCK_BREAK",
      ],
      "playerStats": [],
    },
  },
}
`;

exports[`Resolver should resolve integer-comparison-if-elseif-else 1`] = `
CompilerContext {
  "expressions": Map {
    5 => {
      "type": "int",
    },
    8 => {
      "type": "int",
    },
    9 => {
      "type": "int",
    },
    10 => {
      "type": "bool",
    },
    13 => {
      "type": "int",
    },
    16 => {
      "type": "int",
    },
    17 => {
      "type": "int",
    },
    18 => {
      "type": "bool",
    },
    21 => {
      "type": "int",
    },
    25 => {
      "type": "int",
    },
  },
  "houses": Map {
    "MyHouse" => {
      "globalStats": [],
      "handlers": [
        "BLOCK_BREAK",
      ],
      "playerStats": [],
    },
  },
}
`;

exports[`Resolver should resolve integer-variables-arithmetics 1`] = `
CompilerContext {
  "expressions": Map {
    5 => {
      "type": "int",
    },
    10 => {
      "type": "int",
    },
    11 => {
      "type": "int",
    },
    12 => {
      "type": "int",
    },
    17 => {
      "type": "int",
    },
    19 => {
      "type": "int",
    },
    20 => {
      "type": "int",
    },
  },
  "houses": Map {
    "MyHouse" => {
      "globalStats": [],
      "handlers": [
        "BLOCK_BREAK",
      ],
      "playerStats": [],
    },
  },
}
`;

exports[`Resolver should resolve integers-and-stats 1`] = `
CompilerContext {
  "expressions": Map {
    4 => {
      "type": "int",
    },
    8 => {
      "fields": [
        {
          "defaultValue": {
            "id": 4,
            "kind": "integerLiteral",
            "value": "10",
          },
          "name": "x",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    10 => {
      "type": "int",
    },
    11 => {
      "type": "int",
    },
    16 => {
      "fields": [
        {
          "defaultValue": {
            "id": 4,
            "kind": "integerLiteral",
            "value": "10",
          },
          "name": "x",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    18 => {
      "type": "int",
    },
    19 => {
      "type": "int",
    },
    20 => {
      "type": "int",
    },
  },
  "houses": Map {
    "MyHouse" => {
      "globalStats": [
        {
          "defaultValue": {
            "id": 4,
            "kind": "integerLiteral",
            "value": "10",
          },
          "name": "x",
          "type": {
            "type": "int",
          },
        },
      ],
      "handlers": [
        "BLOCK_BREAK",
      ],
      "playerStats": [],
    },
  },
}
`;

exports[`Resolver should resolve let-statement-int 1`] = `
CompilerContext {
  "expressions": Map {
    5 => {
      "type": "int",
    },
  },
  "houses": Map {
    "MyHouse" => {
      "globalStats": [],
      "handlers": [
        "BLOCK_BREAK",
      ],
      "playerStats": [],
    },
  },
}
`;

exports[`Resolver should resolve multiple-houses 1`] = `
CompilerContext {
  "expressions": Map {
    4 => {
      "type": "int",
    },
    9 => {
      "type": "int",
    },
    12 => {
      "fields": [
        {
          "defaultValue": {
            "id": 4,
            "kind": "integerLiteral",
            "value": "1",
          },
          "name": "x",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    14 => {
      "type": "int",
    },
    16 => {
      "fields": [
        {
          "defaultValue": {
            "id": 4,
            "kind": "integerLiteral",
            "value": "1",
          },
          "name": "x",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    18 => {
      "type": "int",
    },
    20 => {
      "type": "int",
    },
    21 => {
      "type": "int",
    },
    28 => {
      "type": "int",
    },
    32 => {
      "type": "int",
    },
    37 => {
      "type": "int",
    },
    40 => {
      "fields": [
        {
          "defaultValue": {
            "id": 28,
            "kind": "integerLiteral",
            "value": "1",
          },
          "name": "x",
          "type": {
            "type": "int",
          },
        },
        {
          "defaultValue": {
            "id": 32,
            "kind": "integerLiteral",
            "value": "0",
          },
          "name": "y",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    42 => {
      "type": "int",
    },
    44 => {
      "fields": [
        {
          "defaultValue": {
            "id": 28,
            "kind": "integerLiteral",
            "value": "1",
          },
          "name": "x",
          "type": {
            "type": "int",
          },
        },
        {
          "defaultValue": {
            "id": 32,
            "kind": "integerLiteral",
            "value": "0",
          },
          "name": "y",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    46 => {
      "type": "int",
    },
    48 => {
      "type": "int",
    },
    49 => {
      "type": "int",
    },
    52 => {
      "fields": [
        {
          "defaultValue": {
            "id": 28,
            "kind": "integerLiteral",
            "value": "1",
          },
          "name": "x",
          "type": {
            "type": "int",
          },
        },
        {
          "defaultValue": {
            "id": 32,
            "kind": "integerLiteral",
            "value": "0",
          },
          "name": "y",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    54 => {
      "type": "int",
    },
    56 => {
      "fields": [
        {
          "defaultValue": {
            "id": 28,
            "kind": "integerLiteral",
            "value": "1",
          },
          "name": "x",
          "type": {
            "type": "int",
          },
        },
        {
          "defaultValue": {
            "id": 32,
            "kind": "integerLiteral",
            "value": "0",
          },
          "name": "y",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    58 => {
      "type": "int",
    },
    59 => {
      "type": "int",
    },
    60 => {
      "type": "int",
    },
  },
  "houses": Map {
    "House1" => {
      "globalStats": [
        {
          "defaultValue": {
            "id": 4,
            "kind": "integerLiteral",
            "value": "1",
          },
          "name": "x",
          "type": {
            "type": "int",
          },
        },
      ],
      "handlers": [
        "JOIN",
      ],
      "playerStats": [],
    },
    "House2" => {
      "globalStats": [
        {
          "defaultValue": {
            "id": 28,
            "kind": "integerLiteral",
            "value": "1",
          },
          "name": "x",
          "type": {
            "type": "int",
          },
        },
        {
          "defaultValue": {
            "id": 32,
            "kind": "integerLiteral",
            "value": "0",
          },
          "name": "y",
          "type": {
            "type": "int",
          },
        },
      ],
      "handlers": [
        "JOIN",
      ],
      "playerStats": [],
    },
  },
}
`;

exports[`Resolver should resolve player-stat 1`] = `
CompilerContext {
  "expressions": Map {
    4 => {
      "type": "int",
    },
    8 => {
      "fields": [
        {
          "defaultValue": {
            "id": 4,
            "kind": "integerLiteral",
            "value": "100",
          },
          "name": "score",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "player",
      "type": "struct",
    },
    10 => {
      "type": "int",
    },
    12 => {
      "fields": [
        {
          "defaultValue": {
            "id": 4,
            "kind": "integerLiteral",
            "value": "100",
          },
          "name": "score",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "player",
      "type": "struct",
    },
    14 => {
      "type": "int",
    },
    15 => {
      "type": "int",
    },
    16 => {
      "type": "int",
    },
  },
  "houses": Map {
    "MyHouse" => {
      "globalStats": [],
      "handlers": [
        "BLOCK_BREAK",
      ],
      "playerStats": [
        {
          "defaultValue": {
            "id": 4,
            "kind": "integerLiteral",
            "value": "100",
          },
          "name": "score",
          "type": {
            "type": "int",
          },
        },
      ],
    },
  },
}
`;

exports[`Resolver should resolve stat-assignment 1`] = `
CompilerContext {
  "expressions": Map {
    4 => {
      "type": "int",
    },
    8 => {
      "fields": [
        {
          "defaultValue": {
            "id": 4,
            "kind": "integerLiteral",
            "value": "10",
          },
          "name": "x",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    10 => {
      "type": "int",
    },
    11 => {
      "type": "int",
    },
  },
  "houses": Map {
    "MyHouse" => {
      "globalStats": [
        {
          "defaultValue": {
            "id": 4,
            "kind": "integerLiteral",
            "value": "10",
          },
          "name": "x",
          "type": {
            "type": "int",
          },
        },
      ],
      "handlers": [
        "BLOCK_BREAK",
      ],
      "playerStats": [],
    },
  },
}
`;

exports[`Resolver should resolve sum-of-integer-stats 1`] = `
CompilerContext {
  "expressions": Map {
    4 => {
      "type": "int",
    },
    8 => {
      "type": "int",
    },
    14 => {
      "fields": [
        {
          "defaultValue": {
            "id": 4,
            "kind": "integerLiteral",
            "value": "10",
          },
          "name": "x",
          "type": {
            "type": "int",
          },
        },
        {
          "defaultValue": {
            "id": 8,
            "kind": "integerLiteral",
            "value": "20",
          },
          "name": "y",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    16 => {
      "type": "int",
    },
    18 => {
      "fields": [
        {
          "defaultValue": {
            "id": 4,
            "kind": "integerLiteral",
            "value": "10",
          },
          "name": "x",
          "type": {
            "type": "int",
          },
        },
        {
          "defaultValue": {
            "id": 8,
            "kind": "integerLiteral",
            "value": "20",
          },
          "name": "y",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    20 => {
      "type": "int",
    },
    21 => {
      "type": "int",
    },
  },
  "houses": Map {
    "MyHouse" => {
      "globalStats": [
        {
          "defaultValue": {
            "id": 4,
            "kind": "integerLiteral",
            "value": "10",
          },
          "name": "x",
          "type": {
            "type": "int",
          },
        },
        {
          "defaultValue": {
            "id": 8,
            "kind": "integerLiteral",
            "value": "20",
          },
          "name": "y",
          "type": {
            "type": "int",
          },
        },
      ],
      "handlers": [
        "BLOCK_BREAK",
      ],
      "playerStats": [],
    },
  },
}
`;

exports[`Resolver should resolve unary-operation 1`] = `
CompilerContext {
  "expressions": Map {
    5 => {
      "type": "int",
    },
    10 => {
      "type": "int",
    },
    11 => {
      "type": "int",
    },
  },
  "houses": Map {
    "MyHouse" => {
      "globalStats": [],
      "handlers": [
        "BLOCK_BREAK",
      ],
      "playerStats": [],
    },
  },
}
`;
