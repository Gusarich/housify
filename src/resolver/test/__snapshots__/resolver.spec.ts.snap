// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Resolver should fail assign-constant 1`] = `
"Line 6, col 9:
  5 |         x = 10;
> 6 |         y = 20;
              ^~~~~~~
  7 |     }

ResolveError: Cannot assign to constant 'y'"
`;

exports[`Resolver should fail assignment-type-mismatch-in-else 1`] = `
"Line 7, col 13:
  6 |         } else {
> 7 |             x = true;
                  ^~~~~~~~~
  8 |         }

ResolveError: Cannot assign 'bool' to 'int'"
`;

exports[`Resolver should fail assignment-type-mismatch-in-elseif 1`] = `
"Line 7, col 13:
  6 |         } else if (x == 20) {
> 7 |             x = true;
                  ^~~~~~~~~
  8 |         }

ResolveError: Cannot assign 'bool' to 'int'"
`;

exports[`Resolver should fail assignment-type-mismatch-in-if 1`] = `
"Line 5, col 13:
  4 |         if (x == 10) {
> 5 |             x = true;
                  ^~~~~~~~~
  6 |         }

ResolveError: Cannot assign 'bool' to 'int'"
`;

exports[`Resolver should fail assignment-type-mismatch-in-nested-if 1`] = `
"Line 6, col 17:
  5 |             if (x == 20) {
> 6 |                 x = true;
                      ^~~~~~~~~
  7 |             }

ResolveError: Cannot assign 'bool' to 'int'"
`;

exports[`Resolver should fail augmented-assignment-between-int-and-bool 1`] = `
"Line 5, col 9:
  4 |         x += 1;
> 5 |         x -= true;
              ^~~~~~~~~~
  6 |     }

ResolveError: Operands must be integers, got 'bool'"
`;

exports[`Resolver should fail augmented-assignment-on-bool 1`] = `
"Line 4, col 9:
  3 |         let x: bool = false;
> 4 |         x += true;
              ^~~~~~~~~~
  5 |     }

ResolveError: Operands must be integers, got 'bool'"
`;

exports[`Resolver should fail binary-operation-between-boolean-and-integer 1`] = `
"Line 4, col 22:
  3 |         let x: bool = true;
> 4 |         let y: int = x + 1;
                           ^
  5 |     }

ResolveError: Operands must be integers, got 'bool'"
`;

exports[`Resolver should fail condition-not-boolean 1`] = `
"Line 3, col 13:
  2 |     handle JOIN {
> 3 |         if (123) {
                  ^~~
  4 |             let x: int = 123;

ResolveError: Condition must be a boolean expression, got 'int'"
`;

exports[`Resolver should fail default-value-type-mismatch 1`] = `
"Line 5, col 9:
  4 |     handle BLOCK_BREAK {
> 5 |         global.x = 123;
              ^~~~~~~~~~~~~~~
  6 |         let y: int = global.x + 1;

ResolveError: Cannot assign 'int' to 'bool'"
`;

exports[`Resolver should fail double-stat-definition 1`] = `
"Line 4, col 5:
  3 |     player x: int;
> 4 |     global x: int;
          ^~~~~~~~~~~~~~
  5 | }

ResolveError: Global stat 'x' already exists"
`;

exports[`Resolver should fail field-access-not-struct 1`] = `
"Line 4, col 22:
  3 |         let x: int = 123;
> 4 |         let y: int = x.field;
                           ^
  5 |     }

ResolveError: Expected a struct, got 'int'"
`;

exports[`Resolver should fail global-stats-limit 1`] = `
"Line 22, col 5:
  21 |     global x20: int;
> 22 |     global x21: int;
           ^~~~~~~~~~~~~~~~
  23 | }

ResolveError: Cannot have more than 20 persistent global stats"
`;

exports[`Resolver should fail inline-functions-not-always-returns 1`] = `
"Line 1, col 1:
> 1 | fun testFunction(x: bool): int {
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  2 |     if (x) {

ResolveError: Function 'testFunction' does not always return a value"
`;

exports[`Resolver should fail inline-functions-not-always-returns2 1`] = `
"Line 1, col 1:
> 1 | fun testFunction(x: bool): int {
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  2 |     if (x) {

ResolveError: Function 'testFunction' does not always return a value"
`;

exports[`Resolver should fail inline-functions-not-always-returns3 1`] = `
"Line 1, col 1:
> 1 | fun testFunction(x: bool): int {
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  2 |     if (x) {

ResolveError: Function 'testFunction' does not always return a value"
`;

exports[`Resolver should fail let-statement-value-type-mismatch 1`] = `
"Line 3, col 9:
  2 |     handle BLOCK_BREAK {
> 3 |         let x: int = true;
              ^~~~~~~~~~~~~~~~~~
  4 |     }

ResolveError: Cannot assign 'bool' to 'int'"
`;

exports[`Resolver should fail let-statement-value-type-mismatch2 1`] = `
"Line 3, col 9:
  2 |     handle BLOCK_BREAK {
> 3 |         let x: int = 10 < 5;
              ^~~~~~~~~~~~~~~~~~~~
  4 |     }

ResolveError: Cannot assign 'bool' to 'int'"
`;

exports[`Resolver should fail non-existing-field 1`] = `
"Line 5, col 29:
  4 |     handle BLOCK_BREAK {
> 5 |         let y: int = global.nonExistentField;
                                  ^~~~~~~~~~~~~~~~
  6 |     }

ResolveError: Field 'nonExistentField' not found in struct 'global'"
`;

exports[`Resolver should fail player-stats-limit 1`] = `
"Line 22, col 5:
  21 |     player x20: int;
> 22 |     player x21: int;
           ^~~~~~~~~~~~~~~~
  23 | }

ResolveError: Cannot have more than 20 persistent player stats"
`;

exports[`Resolver should fail stat-assignment-type-mismatch 1`] = `
"Line 5, col 9:
  4 |     handle BLOCK_BREAK {
> 5 |         global.x = 10;
              ^~~~~~~~~~~~~~
  6 |     }

ResolveError: Cannot assign 'int' to 'bool'"
`;

exports[`Resolver should fail stat-assignment-type-mismatch2 1`] = `
"Line 5, col 9:
  4 |     handle BLOCK_BREAK {
> 5 |         global.x = true;
              ^~~~~~~~~~~~~~~~
  6 |     }

ResolveError: Cannot assign 'bool' to 'int'"
`;

exports[`Resolver should fail static-constants-cannot-evaluate 1`] = `
"Line 2, col 17:
  1 | const x: int = 123 + 456;
> 2 | const y: bool = 3 / 0;
                      ^~~~~
  3 | 

ConstantEvaluationError: Division by zero"
`;

exports[`Resolver should fail static-constants-cannot-evaluate2 1`] = `
"Line 2, col 17:
  1 | const x: int = 123 + 456;
> 2 | const y: bool = a + 1;
                      ^
  3 | 

ConstantEvaluationError: No static constant 'a' found"
`;

exports[`Resolver should fail unary-negation-of-bool 1`] = `
"Line 3, col 24:
  2 |     handle JOIN {
> 3 |         let x: bool = -true;
                             ^~~~
  4 |     }

ResolveError: Operand must be an integer, got 'bool'"
`;

exports[`Resolver should fail unary-not-of-integer 1`] = `
"Line 3, col 23:
  2 |     handle JOIN {
> 3 |         let x: int = !123;
                            ^~~
  4 |     }

ResolveError: Operand must be a boolean, got 'int'"
`;

exports[`Resolver should fail unassignable-lvalue 1`] = `
"Line 3, col 9:
  2 |     handle JOIN {
> 3 |         1 + 2 = 3;
              ^~~~~~~~~~
  4 |     }

ResolveError: 'expressionBinary' cannot be assigned"
`;

exports[`Resolver should fail unknown-event 1`] = `
"Line 6, col 12:
  5 | 
> 6 |     handle SOMETHING_ELSE {
                 ^~~~~~~~~~~~~~
  7 |         

ResolveError: Event 'SOMETHING_ELSE' not found"
`;

exports[`Resolver should fail unknown-type 1`] = `
"Line 2, col 18:
  1 | house MyHouse {
> 2 |     global test: qwerty;
                       ^~~~~~
  3 | }

ResolveError: Type 'qwerty' not found"
`;

exports[`Resolver should fail unused-statement-expression 1`] = `
"Line 3, col 9:
  2 |     handle BLOCK_BREAK {
> 3 |         1 + 2 + 3;
              ^~~~~~~~~~
  4 |     }

ResolveError: Expression of type 'int' cannot be used as a statement"
`;

exports[`Resolver should fail variable-double-definition 1`] = `
"Line 4, col 13:
  3 |         let x: int = 5;
> 4 |         let x: int = 10;
                  ^
  5 |     }

ResolveError: Variable 'x' already exists"
`;

exports[`Resolver should fail variable-usage-before-definition 1`] = `
"Line 3, col 9:
  2 |     handle BLOCK_BREAK {
> 3 |         x = 10;
              ^
  4 |         let x: int = 5;

ResolveError: Variable 'x' not found"
`;

exports[`Resolver should fail void-stat 1`] = `
"Line 2, col 15:
  1 | house MyHouse {
> 2 |     global x: void;
                    ^~~~
  3 | }

ResolveError: Cannot declare a stat of type 'void'"
`;

exports[`Resolver should fail void-variable 1`] = `
"Line 4, col 16:
  3 |         let x: int = 123;
> 4 |         let y: void = x;
                     ^~~~
  5 |     }

ResolveError: Cannot declare a variable of type 'void'"
`;

exports[`Resolver should resolve arithmetics 1`] = `
CompilerContext {
  "expressions": Map {
    15 => {
      "fields": [
        {
          "name": "x",
          "type": {
            "type": "int",
          },
        },
        {
          "name": "y",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    17 => {
      "type": "int",
    },
    19 => {
      "fields": [
        {
          "name": "x",
          "type": {
            "type": "int",
          },
        },
        {
          "name": "y",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    21 => {
      "type": "int",
    },
    22 => {
      "type": "int",
    },
    27 => {
      "type": "int",
    },
    29 => {
      "fields": [
        {
          "name": "z",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "player",
      "type": "struct",
    },
    31 => {
      "type": "int",
    },
    32 => {
      "type": "int",
    },
    37 => {
      "type": "int",
    },
    38 => {
      "type": "int",
    },
    39 => {
      "type": "int",
    },
    44 => {
      "type": "int",
    },
    45 => {
      "type": "int",
    },
    46 => {
      "type": "int",
    },
    51 => {
      "type": "int",
    },
    52 => {
      "type": "int",
    },
    53 => {
      "type": "int",
    },
    58 => {
      "type": "int",
    },
    59 => {
      "type": "int",
    },
    60 => {
      "type": "bool",
    },
    65 => {
      "type": "bool",
    },
    66 => {
      "type": "bool",
    },
    67 => {
      "type": "bool",
    },
    72 => {
      "type": "bool",
    },
    73 => {
      "type": "bool",
    },
    78 => {
      "type": "int",
    },
    79 => {
      "type": "int",
    },
    84 => {
      "type": "int",
    },
    89 => {
      "type": "int",
    },
    90 => {
      "type": "int",
    },
    91 => {
      "type": "int",
    },
    93 => {
      "type": "int",
    },
    94 => {
      "type": "int",
    },
    95 => {
      "type": "int",
    },
    96 => {
      "type": "int",
    },
    101 => {
      "type": "int",
    },
    103 => {
      "type": "int",
    },
    104 => {
      "type": "int",
    },
    105 => {
      "type": "int",
    },
    106 => {
      "type": "int",
    },
    111 => {
      "type": "int",
    },
    113 => {
      "type": "int",
    },
    114 => {
      "type": "int",
    },
    115 => {
      "type": "int",
    },
    116 => {
      "type": "int",
    },
    121 => {
      "type": "int",
    },
    122 => {
      "type": "int",
    },
    123 => {
      "type": "bool",
    },
    128 => {
      "type": "bool",
    },
    129 => {
      "type": "bool",
    },
    130 => {
      "type": "bool",
    },
    135 => {
      "type": "bool",
    },
    136 => {
      "type": "bool",
    },
    141 => {
      "type": "int",
    },
    142 => {
      "type": "int",
    },
    147 => {
      "type": "int",
    },
    152 => {
      "type": "int",
    },
    153 => {
      "type": "int",
    },
    154 => {
      "type": "int",
    },
    156 => {
      "type": "int",
    },
    157 => {
      "type": "int",
    },
    158 => {
      "type": "int",
    },
    159 => {
      "type": "int",
    },
    164 => {
      "type": "int",
    },
    166 => {
      "type": "int",
    },
    167 => {
      "type": "int",
    },
    168 => {
      "type": "int",
    },
    169 => {
      "type": "int",
    },
    174 => {
      "type": "int",
    },
    175 => {
      "type": "int",
    },
    176 => {
      "type": "int",
    },
    181 => {
      "type": "int",
    },
    182 => {
      "type": "int",
    },
    183 => {
      "type": "bool",
    },
    188 => {
      "type": "bool",
    },
    189 => {
      "type": "bool",
    },
    190 => {
      "type": "bool",
    },
    195 => {
      "type": "bool",
    },
    196 => {
      "type": "bool",
    },
    201 => {
      "type": "int",
    },
    202 => {
      "type": "int",
    },
  },
  "houses": Map {
    "MyHouse" => {
      "globalStats": [
        {
          "name": "x",
          "type": {
            "type": "int",
          },
        },
        {
          "name": "y",
          "type": {
            "type": "int",
          },
        },
      ],
      "handlers": [
        "BLOCK_BREAK",
      ],
      "playerStats": [
        {
          "name": "z",
          "type": {
            "type": "int",
          },
        },
      ],
    },
  },
  "inlineFunctions": Map {},
  "staticConstants": Map {},
  "types": Map {},
}
`;

exports[`Resolver should resolve augmented-assignment 1`] = `
CompilerContext {
  "expressions": Map {
    8 => {
      "type": "int",
    },
    11 => {
      "type": "int",
    },
    12 => {
      "type": "int",
    },
    15 => {
      "type": "int",
    },
    16 => {
      "type": "int",
    },
    19 => {
      "type": "int",
    },
    20 => {
      "type": "int",
    },
    23 => {
      "type": "int",
    },
    24 => {
      "type": "int",
    },
    27 => {
      "fields": [
        {
          "name": "x",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    29 => {
      "type": "int",
    },
    30 => {
      "type": "int",
    },
    33 => {
      "fields": [
        {
          "name": "x",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    35 => {
      "type": "int",
    },
    36 => {
      "type": "int",
    },
    39 => {
      "fields": [
        {
          "name": "x",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    41 => {
      "type": "int",
    },
    42 => {
      "type": "int",
    },
    45 => {
      "fields": [
        {
          "name": "x",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    47 => {
      "type": "int",
    },
    48 => {
      "type": "int",
    },
  },
  "houses": Map {
    "MyHouse" => {
      "globalStats": [
        {
          "name": "x",
          "type": {
            "type": "int",
          },
        },
      ],
      "handlers": [
        "JOIN",
      ],
      "playerStats": [],
    },
  },
  "inlineFunctions": Map {},
  "staticConstants": Map {},
  "types": Map {},
}
`;

exports[`Resolver should resolve boolean-conditions 1`] = `
CompilerContext {
  "expressions": Map {
    7 => {
      "fields": [
        {
          "name": "isActive",
          "type": {
            "type": "bool",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    9 => {
      "type": "bool",
    },
    11 => {
      "fields": [
        {
          "name": "isActive",
          "type": {
            "type": "bool",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    13 => {
      "type": "bool",
    },
    14 => {
      "type": "bool",
    },
  },
  "houses": Map {
    "MyHouse" => {
      "globalStats": [
        {
          "name": "isActive",
          "type": {
            "type": "bool",
          },
        },
      ],
      "handlers": [
        "BLOCK_BREAK",
      ],
      "playerStats": [],
    },
  },
  "inlineFunctions": Map {},
  "staticConstants": Map {},
  "types": Map {},
}
`;

exports[`Resolver should resolve boolean-equality-comparison 1`] = `
CompilerContext {
  "expressions": Map {
    5 => {
      "type": "bool",
    },
    6 => {
      "type": "bool",
    },
    7 => {
      "type": "bool",
    },
  },
  "houses": Map {
    "MyHouse" => {
      "globalStats": [],
      "handlers": [
        "JOIN",
      ],
      "playerStats": [],
    },
  },
  "inlineFunctions": Map {},
  "staticConstants": Map {},
  "types": Map {},
}
`;

exports[`Resolver should resolve booleans-and-stats 1`] = `
CompilerContext {
  "expressions": Map {
    7 => {
      "fields": [
        {
          "name": "isActive",
          "type": {
            "type": "bool",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    9 => {
      "type": "bool",
    },
    11 => {
      "fields": [
        {
          "name": "isActive",
          "type": {
            "type": "bool",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    13 => {
      "type": "bool",
    },
    14 => {
      "type": "bool",
    },
  },
  "houses": Map {
    "MyHouse" => {
      "globalStats": [
        {
          "name": "isActive",
          "type": {
            "type": "bool",
          },
        },
      ],
      "handlers": [
        "BLOCK_BREAK",
      ],
      "playerStats": [],
    },
  },
  "inlineFunctions": Map {},
  "staticConstants": Map {},
  "types": Map {},
}
`;

exports[`Resolver should resolve default-stat-value 1`] = `
CompilerContext {
  "expressions": Map {
    7 => {
      "fields": [
        {
          "name": "x",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    9 => {
      "type": "int",
    },
    10 => {
      "type": "int",
    },
  },
  "houses": Map {
    "MyHouse" => {
      "globalStats": [
        {
          "name": "x",
          "type": {
            "type": "int",
          },
        },
      ],
      "handlers": [
        "BLOCK_BREAK",
      ],
      "playerStats": [],
    },
  },
  "inlineFunctions": Map {},
  "staticConstants": Map {},
  "types": Map {},
}
`;

exports[`Resolver should resolve inline-function-unordered-calls 1`] = `
CompilerContext {
  "expressions": Map {
    19 => {
      "type": "int",
    },
    21 => {
      "type": "bool",
    },
    22 => {
      "type": "int",
    },
    25 => {
      "type": "int",
    },
    27 => {
      "type": "bool",
    },
    28 => {
      "type": "int",
    },
    29 => {
      "type": "bool",
    },
    30 => {
      "type": "int",
    },
    32 => {
      "type": "int",
    },
    33 => {
      "type": "int",
    },
    48 => {
      "type": "int",
    },
    49 => {
      "type": "int",
    },
    50 => {
      "type": "int",
    },
    53 => {
      "type": "bool",
    },
    55 => {
      "type": "int",
    },
    56 => {
      "type": "int",
    },
    57 => {
      "type": "bool",
    },
    58 => {
      "type": "bool",
    },
    60 => {
      "type": "int",
    },
    62 => {
      "type": "int",
    },
    63 => {
      "type": "int",
    },
    77 => {
      "type": "int",
    },
    81 => {
      "type": "bool",
    },
    87 => {
      "type": "int",
    },
    89 => {
      "type": "bool",
    },
    90 => {
      "type": "int",
    },
    96 => {
      "type": "int",
    },
    98 => {
      "type": "bool",
    },
    99 => {
      "type": "int",
    },
  },
  "houses": Map {
    "MyHouse" => {
      "globalStats": [
        {
          "name": "x",
          "type": {
            "type": "int",
          },
        },
      ],
      "handlers": [
        "JOIN",
      ],
      "playerStats": [
        {
          "name": "y",
          "type": {
            "type": "bool",
          },
        },
      ],
    },
  },
  "inlineFunctions": Map {
    "testFunction2" => {
      "parameters": [
        {
          "name": "x",
          "type": {
            "type": "int",
          },
        },
        {
          "name": "y",
          "type": {
            "type": "bool",
          },
        },
      ],
      "type": {
        "type": "int",
      },
    },
    "testFunction" => {
      "parameters": [
        {
          "name": "x",
          "type": {
            "type": "int",
          },
        },
        {
          "name": "y",
          "type": {
            "type": "bool",
          },
        },
      ],
      "type": {
        "type": "int",
      },
    },
  },
  "staticConstants": Map {
    "xx" => {
      "type": {
        "type": "int",
      },
      "value": "1",
    },
    "yy" => {
      "type": {
        "type": "bool",
      },
      "value": "1",
    },
  },
  "types": Map {},
}
`;

exports[`Resolver should resolve inline-functions 1`] = `
CompilerContext {
  "expressions": Map {
    20 => {
      "type": "int",
    },
    21 => {
      "type": "int",
    },
    22 => {
      "type": "int",
    },
    25 => {
      "type": "bool",
    },
    27 => {
      "type": "int",
    },
    28 => {
      "type": "int",
    },
    29 => {
      "type": "bool",
    },
    30 => {
      "type": "bool",
    },
    32 => {
      "type": "int",
    },
    34 => {
      "type": "int",
    },
    35 => {
      "type": "int",
    },
    49 => {
      "type": "int",
    },
    51 => {
      "type": "bool",
    },
    52 => {
      "type": "int",
    },
    55 => {
      "type": "int",
    },
    57 => {
      "type": "bool",
    },
    58 => {
      "type": "int",
    },
    59 => {
      "type": "bool",
    },
    60 => {
      "type": "int",
    },
    62 => {
      "type": "int",
    },
    63 => {
      "type": "int",
    },
    77 => {
      "type": "int",
    },
    81 => {
      "type": "bool",
    },
    87 => {
      "type": "int",
    },
    89 => {
      "type": "bool",
    },
    90 => {
      "type": "int",
    },
    96 => {
      "type": "int",
    },
    98 => {
      "type": "bool",
    },
    99 => {
      "type": "int",
    },
  },
  "houses": Map {
    "MyHouse" => {
      "globalStats": [
        {
          "name": "x",
          "type": {
            "type": "int",
          },
        },
      ],
      "handlers": [
        "JOIN",
      ],
      "playerStats": [
        {
          "name": "y",
          "type": {
            "type": "bool",
          },
        },
      ],
    },
  },
  "inlineFunctions": Map {
    "testFunction" => {
      "parameters": [
        {
          "name": "x",
          "type": {
            "type": "int",
          },
        },
        {
          "name": "y",
          "type": {
            "type": "bool",
          },
        },
      ],
      "type": {
        "type": "int",
      },
    },
    "testFunction2" => {
      "parameters": [
        {
          "name": "x",
          "type": {
            "type": "int",
          },
        },
        {
          "name": "y",
          "type": {
            "type": "bool",
          },
        },
      ],
      "type": {
        "type": "int",
      },
    },
  },
  "staticConstants": Map {
    "xx" => {
      "type": {
        "type": "int",
      },
      "value": "1",
    },
    "yy" => {
      "type": {
        "type": "bool",
      },
      "value": "1",
    },
  },
  "types": Map {},
}
`;

exports[`Resolver should resolve inline-functions-always-returns 1`] = `
CompilerContext {
  "expressions": Map {
    7 => {
      "type": "bool",
    },
    8 => {
      "type": "int",
    },
    10 => {
      "type": "int",
    },
  },
  "houses": Map {},
  "inlineFunctions": Map {
    "testFunction" => {
      "parameters": [
        {
          "name": "x",
          "type": {
            "type": "bool",
          },
        },
      ],
      "type": {
        "type": "int",
      },
    },
  },
  "staticConstants": Map {},
  "types": Map {},
}
`;

exports[`Resolver should resolve inline-functions-always-returns2 1`] = `
CompilerContext {
  "expressions": Map {
    7 => {
      "type": "bool",
    },
    8 => {
      "type": "int",
    },
    11 => {
      "type": "int",
    },
  },
  "houses": Map {},
  "inlineFunctions": Map {
    "testFunction" => {
      "parameters": [
        {
          "name": "x",
          "type": {
            "type": "bool",
          },
        },
      ],
      "type": {
        "type": "int",
      },
    },
  },
  "staticConstants": Map {},
  "types": Map {},
}
`;

exports[`Resolver should resolve inline-functions-always-returns3 1`] = `
CompilerContext {
  "expressions": Map {
    7 => {
      "type": "bool",
    },
    8 => {
      "type": "int",
    },
    11 => {
      "type": "bool",
    },
    12 => {
      "type": "int",
    },
    14 => {
      "type": "int",
    },
  },
  "houses": Map {},
  "inlineFunctions": Map {
    "testFunction" => {
      "parameters": [
        {
          "name": "x",
          "type": {
            "type": "bool",
          },
        },
      ],
      "type": {
        "type": "int",
      },
    },
  },
  "staticConstants": Map {},
  "types": Map {},
}
`;

exports[`Resolver should resolve integer-arithmetics 1`] = `
CompilerContext {
  "expressions": Map {
    7 => {
      "fields": [
        {
          "name": "score",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "player",
      "type": "struct",
    },
    9 => {
      "type": "int",
    },
    11 => {
      "fields": [
        {
          "name": "score",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "player",
      "type": "struct",
    },
    13 => {
      "type": "int",
    },
    14 => {
      "type": "int",
    },
    15 => {
      "type": "int",
    },
  },
  "houses": Map {
    "MyHouse" => {
      "globalStats": [],
      "handlers": [
        "BLOCK_BREAK",
      ],
      "playerStats": [
        {
          "name": "score",
          "type": {
            "type": "int",
          },
        },
      ],
    },
  },
  "inlineFunctions": Map {},
  "staticConstants": Map {},
  "types": Map {},
}
`;

exports[`Resolver should resolve integer-comparison-if-else 1`] = `
CompilerContext {
  "expressions": Map {
    5 => {
      "type": "int",
    },
    8 => {
      "type": "int",
    },
    9 => {
      "type": "int",
    },
    10 => {
      "type": "bool",
    },
    13 => {
      "type": "int",
    },
    17 => {
      "type": "int",
    },
  },
  "houses": Map {
    "MyHouse" => {
      "globalStats": [],
      "handlers": [
        "BLOCK_BREAK",
      ],
      "playerStats": [],
    },
  },
  "inlineFunctions": Map {},
  "staticConstants": Map {},
  "types": Map {},
}
`;

exports[`Resolver should resolve integer-comparison-if-elseif-else 1`] = `
CompilerContext {
  "expressions": Map {
    5 => {
      "type": "int",
    },
    8 => {
      "type": "int",
    },
    9 => {
      "type": "int",
    },
    10 => {
      "type": "bool",
    },
    13 => {
      "type": "int",
    },
    16 => {
      "type": "int",
    },
    17 => {
      "type": "int",
    },
    18 => {
      "type": "bool",
    },
    21 => {
      "type": "int",
    },
    25 => {
      "type": "int",
    },
  },
  "houses": Map {
    "MyHouse" => {
      "globalStats": [],
      "handlers": [
        "BLOCK_BREAK",
      ],
      "playerStats": [],
    },
  },
  "inlineFunctions": Map {},
  "staticConstants": Map {},
  "types": Map {},
}
`;

exports[`Resolver should resolve integer-variables-arithmetics 1`] = `
CompilerContext {
  "expressions": Map {
    5 => {
      "type": "int",
    },
    10 => {
      "type": "int",
    },
    11 => {
      "type": "int",
    },
    12 => {
      "type": "int",
    },
    17 => {
      "type": "int",
    },
    19 => {
      "type": "int",
    },
    20 => {
      "type": "int",
    },
  },
  "houses": Map {
    "MyHouse" => {
      "globalStats": [],
      "handlers": [
        "BLOCK_BREAK",
      ],
      "playerStats": [],
    },
  },
  "inlineFunctions": Map {},
  "staticConstants": Map {},
  "types": Map {},
}
`;

exports[`Resolver should resolve integers-and-stats 1`] = `
CompilerContext {
  "expressions": Map {
    7 => {
      "fields": [
        {
          "name": "x",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    9 => {
      "type": "int",
    },
    10 => {
      "type": "int",
    },
    15 => {
      "fields": [
        {
          "name": "x",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    17 => {
      "type": "int",
    },
    18 => {
      "type": "int",
    },
    19 => {
      "type": "int",
    },
  },
  "houses": Map {
    "MyHouse" => {
      "globalStats": [
        {
          "name": "x",
          "type": {
            "type": "int",
          },
        },
      ],
      "handlers": [
        "BLOCK_BREAK",
      ],
      "playerStats": [],
    },
  },
  "inlineFunctions": Map {},
  "staticConstants": Map {},
  "types": Map {},
}
`;

exports[`Resolver should resolve let-statement-int 1`] = `
CompilerContext {
  "expressions": Map {
    5 => {
      "type": "int",
    },
  },
  "houses": Map {
    "MyHouse" => {
      "globalStats": [],
      "handlers": [
        "BLOCK_BREAK",
      ],
      "playerStats": [],
    },
  },
  "inlineFunctions": Map {},
  "staticConstants": Map {},
  "types": Map {},
}
`;

exports[`Resolver should resolve multiple-houses 1`] = `
CompilerContext {
  "expressions": Map {
    8 => {
      "type": "int",
    },
    11 => {
      "fields": [
        {
          "name": "x",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    13 => {
      "type": "int",
    },
    15 => {
      "fields": [
        {
          "name": "x",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    17 => {
      "type": "int",
    },
    19 => {
      "type": "int",
    },
    20 => {
      "type": "int",
    },
    34 => {
      "type": "int",
    },
    37 => {
      "fields": [
        {
          "name": "x",
          "type": {
            "type": "int",
          },
        },
        {
          "name": "y",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    39 => {
      "type": "int",
    },
    41 => {
      "fields": [
        {
          "name": "x",
          "type": {
            "type": "int",
          },
        },
        {
          "name": "y",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    43 => {
      "type": "int",
    },
    45 => {
      "type": "int",
    },
    46 => {
      "type": "int",
    },
    49 => {
      "fields": [
        {
          "name": "x",
          "type": {
            "type": "int",
          },
        },
        {
          "name": "y",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    51 => {
      "type": "int",
    },
    53 => {
      "fields": [
        {
          "name": "x",
          "type": {
            "type": "int",
          },
        },
        {
          "name": "y",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    55 => {
      "type": "int",
    },
    56 => {
      "type": "int",
    },
    57 => {
      "type": "int",
    },
  },
  "houses": Map {
    "House1" => {
      "globalStats": [
        {
          "name": "x",
          "type": {
            "type": "int",
          },
        },
      ],
      "handlers": [
        "JOIN",
      ],
      "playerStats": [],
    },
    "House2" => {
      "globalStats": [
        {
          "name": "x",
          "type": {
            "type": "int",
          },
        },
        {
          "name": "y",
          "type": {
            "type": "int",
          },
        },
      ],
      "handlers": [
        "JOIN",
      ],
      "playerStats": [],
    },
  },
  "inlineFunctions": Map {},
  "staticConstants": Map {},
  "types": Map {},
}
`;

exports[`Resolver should resolve player-stat 1`] = `
CompilerContext {
  "expressions": Map {
    7 => {
      "fields": [
        {
          "name": "score",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "player",
      "type": "struct",
    },
    9 => {
      "type": "int",
    },
    11 => {
      "fields": [
        {
          "name": "score",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "player",
      "type": "struct",
    },
    13 => {
      "type": "int",
    },
    14 => {
      "type": "int",
    },
    15 => {
      "type": "int",
    },
  },
  "houses": Map {
    "MyHouse" => {
      "globalStats": [],
      "handlers": [
        "BLOCK_BREAK",
      ],
      "playerStats": [
        {
          "name": "score",
          "type": {
            "type": "int",
          },
        },
      ],
    },
  },
  "inlineFunctions": Map {},
  "staticConstants": Map {},
  "types": Map {},
}
`;

exports[`Resolver should resolve stat-assignment 1`] = `
CompilerContext {
  "expressions": Map {
    7 => {
      "fields": [
        {
          "name": "x",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    9 => {
      "type": "int",
    },
    10 => {
      "type": "int",
    },
  },
  "houses": Map {
    "MyHouse" => {
      "globalStats": [
        {
          "name": "x",
          "type": {
            "type": "int",
          },
        },
      ],
      "handlers": [
        "BLOCK_BREAK",
      ],
      "playerStats": [],
    },
  },
  "inlineFunctions": Map {},
  "staticConstants": Map {},
  "types": Map {},
}
`;

exports[`Resolver should resolve static-constants 1`] = `
CompilerContext {
  "expressions": Map {},
  "houses": Map {
    "MyHouse" => {
      "globalStats": [],
      "handlers": [],
      "playerStats": [],
    },
  },
  "inlineFunctions": Map {},
  "staticConstants": Map {
    "x" => {
      "type": {
        "type": "int",
      },
      "value": "579",
    },
    "y" => {
      "type": {
        "type": "bool",
      },
      "value": "1",
    },
    "z" => {
      "type": {
        "type": "int",
      },
      "value": "37",
    },
  },
  "types": Map {},
}
`;

exports[`Resolver should resolve static-constants-dependencies 1`] = `
CompilerContext {
  "expressions": Map {},
  "houses": Map {},
  "inlineFunctions": Map {},
  "staticConstants": Map {
    "x" => {
      "type": {
        "type": "int",
      },
      "value": "579",
    },
    "y" => {
      "type": {
        "type": "int",
      },
      "value": "6949",
    },
    "z" => {
      "type": {
        "type": "bool",
      },
      "value": "0",
    },
  },
  "types": Map {},
}
`;

exports[`Resolver should resolve static-constants-usage 1`] = `
CompilerContext {
  "expressions": Map {
    12 => {
      "type": "int",
    },
    13 => {
      "type": "int",
    },
    14 => {
      "type": "int",
    },
    19 => {
      "type": "int",
    },
    21 => {
      "type": "int",
    },
    22 => {
      "type": "int",
    },
    23 => {
      "type": "int",
    },
    24 => {
      "type": "int",
    },
    29 => {
      "type": "int",
    },
    31 => {
      "type": "int",
    },
    32 => {
      "type": "int",
    },
    34 => {
      "type": "int",
    },
    35 => {
      "type": "int",
    },
  },
  "houses": Map {
    "MyHouse" => {
      "globalStats": [],
      "handlers": [
        "JOIN",
      ],
      "playerStats": [],
    },
  },
  "inlineFunctions": Map {},
  "staticConstants": Map {
    "x" => {
      "type": {
        "type": "int",
      },
      "value": "1000",
    },
  },
  "types": Map {},
}
`;

exports[`Resolver should resolve sum-of-integer-stats 1`] = `
CompilerContext {
  "expressions": Map {
    12 => {
      "fields": [
        {
          "name": "x",
          "type": {
            "type": "int",
          },
        },
        {
          "name": "y",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    14 => {
      "type": "int",
    },
    16 => {
      "fields": [
        {
          "name": "x",
          "type": {
            "type": "int",
          },
        },
        {
          "name": "y",
          "type": {
            "type": "int",
          },
        },
      ],
      "name": "global",
      "type": "struct",
    },
    18 => {
      "type": "int",
    },
    19 => {
      "type": "int",
    },
  },
  "houses": Map {
    "MyHouse" => {
      "globalStats": [
        {
          "name": "x",
          "type": {
            "type": "int",
          },
        },
        {
          "name": "y",
          "type": {
            "type": "int",
          },
        },
      ],
      "handlers": [
        "BLOCK_BREAK",
      ],
      "playerStats": [],
    },
  },
  "inlineFunctions": Map {},
  "staticConstants": Map {},
  "types": Map {},
}
`;

exports[`Resolver should resolve unary-operation 1`] = `
CompilerContext {
  "expressions": Map {
    5 => {
      "type": "int",
    },
    10 => {
      "type": "int",
    },
    11 => {
      "type": "int",
    },
  },
  "houses": Map {
    "MyHouse" => {
      "globalStats": [],
      "handlers": [
        "BLOCK_BREAK",
      ],
      "playerStats": [],
    },
  },
  "inlineFunctions": Map {},
  "staticConstants": Map {},
  "types": Map {},
}
`;
